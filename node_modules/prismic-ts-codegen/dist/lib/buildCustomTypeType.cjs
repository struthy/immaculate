"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const commonTags = require("common-tags");
const constants = require("../constants.cjs");
const addSection = require("./addSection.cjs");
const buildCustomTypeDataType = require("./buildCustomTypeDataType.cjs");
const buildTypeName = require("./buildTypeName.cjs");
const buildUnion = require("./buildUnion.cjs");
const checkHasUIDFIeld = require("./checkHasUIDFIeld.cjs");
const getCacheKey = require("./getCacheKey.cjs");
const getHumanReadableModelName = require("./getHumanReadableModelName.cjs");
function buildCustomTypeType(args) {
  if (args.cache) {
    const key = getCacheKey.getCacheKey(args.model);
    const cached = args.cache.get(key);
    if (cached) {
      return cached;
    }
  }
  let code = "";
  const auxiliaryTypes = [];
  const contentTypeNames = [];
  const name = buildTypeName.buildTypeName(args.model.id, "Document");
  const langDefault = args.localeIDs && args.localeIDs.length > 0 ? buildUnion.buildUnion(args.localeIDs.map((localeID) => `"${localeID}"`)) : "string";
  const baseDocumentType = checkHasUIDFIeld.checkHasUIDField(args.model) ? "PrismicDocumentWithUID" : "PrismicDocumentWithoutUID";
  const humanReadableName = getHumanReadableModelName.getHumanReadableModelName({
    name: args.model.id,
    model: args.model
  });
  const dataType = buildCustomTypeDataType.buildCustomTypeDataType({
    model: args.model,
    fieldConfigs: args.fieldConfigs
  });
  auxiliaryTypes.push(...dataType.auxiliaryTypes);
  contentTypeNames.push(dataType.name);
  contentTypeNames.push(...dataType.contentTypeNames);
  code = addSection.addSection(dataType.code, code);
  code = addSection.addSection(commonTags.source`
			/**
			 * ${humanReadableName} document from Prismic
			 *
			 * - **API ID**: \`${args.model.id}\`
			 * - **Repeatable**: \`${args.model.repeatable.toString()}\`
			 * - **Documentation**: ${constants.CUSTOM_TYPES_DOCUMENTATION_URL}
			 *
			 * @typeParam Lang - Language API ID of the document.
			 */
			export type ${name}<Lang extends string = ${langDefault}> = prismic.${baseDocumentType}<Simplify<${dataType.name}>, "${args.model.id}", Lang>;
		`, code);
  const result = {
    name,
    code,
    auxiliaryTypes,
    contentTypeNames
  };
  if (args.cache) {
    const key = getCacheKey.getCacheKey(args.model);
    args.cache.set(key, result);
  }
  return result;
}
exports.buildCustomTypeType = buildCustomTypeType;
//# sourceMappingURL=buildCustomTypeType.cjs.map
