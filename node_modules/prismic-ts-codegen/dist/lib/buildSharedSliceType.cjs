"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const commonTags = require("common-tags");
const constants = require("../constants.cjs");
const addSection = require("./addSection.cjs");
const buildFieldProperties = require("./buildFieldProperties.cjs");
const buildTypeName = require("./buildTypeName.cjs");
const buildUnion = require("./buildUnion.cjs");
const getCacheKey = require("./getCacheKey.cjs");
const getHumanReadableModelName = require("./getHumanReadableModelName.cjs");
const getHumanReadablePath = require("./getHumanReadablePath.cjs");
function buildSharedSliceType(args) {
  if (args.cache) {
    const key = getCacheKey.getCacheKey([args.model, args.fieldConfigs]);
    const cached = args.cache.get(key);
    if (cached) {
      return cached;
    }
  }
  let code = "";
  const auxiliaryTypes = [];
  const contentTypeNames = [];
  const name = buildTypeName.buildTypeName(args.model.id, "Slice");
  const humanReadableName = getHumanReadableModelName.getHumanReadableModelName({
    name: args.model.id,
    model: args.model
  });
  const variationNames = [];
  for (const variationModel of args.model.variations) {
    const variationName = buildTypeName.buildTypeName(name, variationModel.id);
    let primaryInterfaceName;
    if (variationModel.primary && Object.keys(variationModel.primary).length > 0) {
      primaryInterfaceName = buildTypeName.buildTypeName(variationName, "Primary");
      const path = [
        {
          name: args.model.id,
          model: args.model
        },
        {
          name: variationModel.id,
          label: variationModel.name
        },
        {
          name: "primary",
          label: "Primary"
        }
      ];
      const humanReadablePath = getHumanReadablePath.getHumanReadablePath({ path });
      const primaryFieldProperties = buildFieldProperties.buildFieldProperties({
        fields: variationModel.primary,
        fieldConfigs: args.fieldConfigs,
        path
      });
      auxiliaryTypes.push(...primaryFieldProperties.auxiliaryTypes);
      contentTypeNames.push(...primaryFieldProperties.contentTypeNames);
      contentTypeNames.push(primaryInterfaceName);
      const docs = commonTags.stripIndent`
				/**
				 * Primary content in *${humanReadablePath}*
				 */
			`;
      code = addSection.addSection(primaryFieldProperties.code ? commonTags.source`
						${docs}
						export interface ${primaryInterfaceName} {
							${primaryFieldProperties.code}
						}
					` : commonTags.source`
						${docs}
						export interface ${primaryInterfaceName} {}
					`, code);
    }
    let itemInterfaceName;
    if (variationModel.items && Object.keys(variationModel.items).length > 0) {
      itemInterfaceName = buildTypeName.buildTypeName(variationName, "Item");
      const path = [
        {
          name: args.model.id,
          model: args.model
        },
        {
          name: "items",
          label: "Items"
        }
      ];
      const humanReadablePath = getHumanReadablePath.getHumanReadablePath({ path });
      const itemFieldProperties = buildFieldProperties.buildFieldProperties({
        fields: variationModel.items,
        fieldConfigs: args.fieldConfigs,
        path
      });
      auxiliaryTypes.push(...itemFieldProperties.auxiliaryTypes);
      contentTypeNames.push(...itemFieldProperties.contentTypeNames);
      contentTypeNames.push(itemInterfaceName);
      const docs = commonTags.stripIndent`
				/**
				 * Primary content in *${humanReadablePath}*
				 */
			`;
      code = addSection.addSection(itemFieldProperties.code ? commonTags.source`
						${docs}
						export interface ${itemInterfaceName} {
							${itemFieldProperties.code}
						}
					` : commonTags.source`
						${docs}
						export interface ${itemInterfaceName} {}
					`, code);
    }
    code = addSection.addSection(commonTags.source`
				/**
				 * ${variationModel.name} variation for ${humanReadableName} Slice
				 *
				 * - **API ID**: \`${variationModel.id}\`
				 * - **Description**: ${variationModel.description || "*None*"}
				 * - **Documentation**: ${constants.SHARED_SLICES_DOCUMENTATION_URL}
				 */
				export type ${variationName} = prismic.SharedSliceVariation<"${variationModel.id}", ${primaryInterfaceName ? `Simplify<${primaryInterfaceName}>` : `Record<string, never>`}, ${itemInterfaceName ? `Simplify<${itemInterfaceName}>` : `never`}>;
			`, code);
    variationNames.push(variationName);
  }
  const variationUnionName = buildTypeName.buildTypeName(name, "Variation");
  const variationsUnion = buildUnion.buildUnion(variationNames);
  contentTypeNames.push(variationUnionName);
  contentTypeNames.push(...variationNames);
  code = addSection.addSection(commonTags.source`
			/**
			 * Slice variation for *${humanReadableName}*
			 */
			type ${variationUnionName} = ${variationNames.length > 0 ? variationsUnion : "never"}
		`, code);
  code = addSection.addSection(commonTags.source`
			/**
			 * ${humanReadableName} Shared Slice
			 *
			 * - **API ID**: \`${args.model.id}\`
			 * - **Description**: ${args.model.description || "*None*"}
			 * - **Documentation**: ${constants.SHARED_SLICES_DOCUMENTATION_URL}
			 */
			export type ${name} = prismic.SharedSlice<"${args.model.id}", ${variationUnionName}>;
		`, code);
  const result = {
    name,
    variationNames,
    code,
    auxiliaryTypes,
    contentTypeNames
  };
  if (args.cache) {
    const key = getCacheKey.getCacheKey([args.model, args.fieldConfigs]);
    args.cache.set(key, result);
  }
  return result;
}
exports.buildSharedSliceType = buildSharedSliceType;
//# sourceMappingURL=buildSharedSliceType.cjs.map
