"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const constants = require("../constants.cjs");
const addLine = require("./addLine.cjs");
const getAPIIDPath = require("./getAPIIDPath.cjs");
const getHumanReadableModelName = require("./getHumanReadableModelName.cjs");
const getHumanReadablePath = require("./getHumanReadablePath.cjs");
function getHumanReadableFieldType(args) {
  var _a, _b;
  switch (args.field.type) {
    case "StructuredText": {
      const isTitleField = args.field.config && "single" in args.field.config && args.field.config.single && args.field.config.single.split(",").every((blockType) => /heading/.test(blockType));
      return isTitleField ? "Title" : "Rich Text";
    }
    case "IntegrationFields": {
      const catalog = (_a = args.field.config) == null ? void 0 : _a.catalog;
      return `Integration Fields (Catalog: ${catalog ? `\`${catalog}\`` : "*unknown*"})`;
    }
    case "Link": {
      switch ((_b = args.field.config) == null ? void 0 : _b.select) {
        case "document": {
          return "Content Relationship";
        }
        case "media": {
          return "Link to Media";
        }
        default: {
          return "Link";
        }
      }
    }
    case "Slices": {
      return "Slice Zone";
    }
    default: {
      return args.field.type;
    }
  }
}
function buildFieldDocs(args) {
  let result = "/**";
  const humanReadableName = getHumanReadableModelName.getHumanReadableModelName({
    model: args.field,
    name: args.name
  });
  const humanReadablePath = getHumanReadablePath.getHumanReadablePath({ path: args.path });
  const humanReadableFieldType = getHumanReadableFieldType({
    field: args.field
  });
  result = addLine.addLine(` * ${humanReadableName} field in *${humanReadablePath}*`, result);
  result = addLine.addLine(" *", result);
  result = addLine.addLine(` * - **Field Type**: ${humanReadableFieldType}`, result);
  const placeholder = args.field.config && "placeholder" in args.field.config && args.field.config.placeholder || `*None*`;
  result = addLine.addLine(` * - **Placeholder**: ${placeholder}`, result);
  const defaultValue = args.field.config && "default_value" in args.field.config ? args.field.config.default_value : void 0;
  if (defaultValue !== void 0) {
    const stringifiedDefaultValue = typeof defaultValue === "boolean" ? `${defaultValue}` : defaultValue;
    result = addLine.addLine(` * - **Default Value**: ${stringifiedDefaultValue}`, result);
  }
  const apiIDPath = getAPIIDPath.getAPIIDPath({
    path: [...args.path, { name: args.name, model: args.field }]
  });
  result = addLine.addLine(` * - **API ID Path**: ${apiIDPath}`, result);
  if (args.tabName) {
    result = addLine.addLine(` * - **Tab**: ${args.tabName}`, result);
  }
  const documentationURL = constants.FIELD_DOCUMENTATION_URLS[args.field.type];
  if (documentationURL) {
    result = addLine.addLine(` * - **Documentation**: ${documentationURL}`, result);
  }
  result = addLine.addLine(" */", result);
  return result;
}
exports.buildFieldDocs = buildFieldDocs;
//# sourceMappingURL=buildFieldDocs.cjs.map
