"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const commonTags = require("common-tags");
const buildTypeName = require("./buildTypeName.cjs");
const buildFieldProperties = require("./buildFieldProperties.cjs");
const getHumanReadableModelName = require("./getHumanReadableModelName.cjs");
function buildCustomTypeDataType(args) {
  let code = "";
  const auxiliaryTypes = [];
  const contentTypeNames = [];
  const name = buildTypeName.buildTypeName(args.model.id, "Document", "Data");
  const humanReadableName = getHumanReadableModelName.getHumanReadableModelName({
    name: args.model.id,
    model: args.model
  });
  let fieldProperties = "";
  for (const tabName in args.model.json) {
    const { uid: _uid, ...fields } = args.model.json[tabName];
    const tabFieldProperties = buildFieldProperties.buildFieldProperties({
      fields,
      fieldConfigs: args.fieldConfigs,
      path: [
        {
          name: args.model.id,
          model: args.model
        }
      ],
      tabName
    });
    fieldProperties += tabFieldProperties.code;
    auxiliaryTypes.push(...tabFieldProperties.auxiliaryTypes);
    contentTypeNames.push(...tabFieldProperties.contentTypeNames);
  }
  if (fieldProperties) {
    code = commonTags.source`
			/**
			 * Content for ${humanReadableName} documents
			 */
			interface ${name} {
				${fieldProperties}
			}
		`;
  } else {
    code = `interface ${name} {}`;
  }
  return {
    name,
    code,
    auxiliaryTypes,
    contentTypeNames
  };
}
exports.buildCustomTypeDataType = buildCustomTypeDataType;
//# sourceMappingURL=buildCustomTypeDataType.cjs.map
