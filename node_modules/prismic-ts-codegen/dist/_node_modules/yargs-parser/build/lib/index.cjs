"use strict";
const require$$0 = require("util");
const path = require("path");
const stringUtils = require("./string-utils.cjs");
const yargsParser$1 = require("./yargs-parser.cjs");
const fs = require("fs");
/**
 * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js
 * CJS and ESM environments.
 *
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
var _a, _b, _c;
const minNodeVersion = process && process.env && process.env.YARGS_MIN_NODE_VERSION ? Number(process.env.YARGS_MIN_NODE_VERSION) : 12;
const nodeVersion = (_b = (_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) !== null && _b !== void 0 ? _b : (_c = process === null || process === void 0 ? void 0 : process.version) === null || _c === void 0 ? void 0 : _c.slice(1);
if (nodeVersion) {
  const major = Number(nodeVersion.match(/^([^.]+)/)[1]);
  if (major < minNodeVersion) {
    throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);
  }
}
const env = process ? process.env : {};
const parser = new yargsParser$1.YargsParser({
  cwd: process.cwd,
  env: () => {
    return env;
  },
  format: require$$0.format,
  normalize: path.normalize,
  resolve: path.resolve,
  // TODO: figure  out a  way to combine ESM and CJS coverage, such  that
  // we can exercise all the lines below:
  require: (path2) => {
    if (typeof require !== "undefined") {
      return require(path2);
    } else if (path2.match(/\.json$/)) {
      return JSON.parse(fs.readFileSync(path2, "utf8"));
    } else {
      throw Error("only .json config files are supported in ESM");
    }
  }
});
const yargsParser = function Parser(args, opts) {
  const result = parser.parse(args.slice(), opts);
  return result.argv;
};
yargsParser.detailed = function(args, opts) {
  return parser.parse(args.slice(), opts);
};
yargsParser.camelCase = stringUtils.camelCase;
yargsParser.decamelize = stringUtils.decamelize;
yargsParser.looksLikeNumber = stringUtils.looksLikeNumber;
module.exports = yargsParser;
//# sourceMappingURL=index.cjs.map
