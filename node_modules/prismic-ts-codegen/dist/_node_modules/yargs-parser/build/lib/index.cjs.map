{"version":3,"file":"index.cjs","sources":["../../../../../node_modules/yargs-parser/build/lib/index.js"],"sourcesContent":["/**\n * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js\n * CJS and ESM environments.\n *\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nvar _a, _b, _c;\nimport { format } from 'util';\nimport { normalize, resolve } from 'path';\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\nimport { YargsParser } from './yargs-parser.js';\nimport { readFileSync } from 'fs';\n// See https://github.com/yargs/yargs-parser#supported-nodejs-versions for our\n// version support policy. The YARGS_MIN_NODE_VERSION is used for testing only.\nconst minNodeVersion = (process && process.env && process.env.YARGS_MIN_NODE_VERSION)\n    ? Number(process.env.YARGS_MIN_NODE_VERSION)\n    : 12;\nconst nodeVersion = (_b = (_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) !== null && _b !== void 0 ? _b : (_c = process === null || process === void 0 ? void 0 : process.version) === null || _c === void 0 ? void 0 : _c.slice(1);\nif (nodeVersion) {\n    const major = Number(nodeVersion.match(/^([^.]+)/)[1]);\n    if (major < minNodeVersion) {\n        throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\n    }\n}\n// Creates a yargs-parser instance using Node.js standard libraries:\nconst env = process ? process.env : {};\nconst parser = new YargsParser({\n    cwd: process.cwd,\n    env: () => {\n        return env;\n    },\n    format,\n    normalize,\n    resolve,\n    // TODO: figure  out a  way to combine ESM and CJS coverage, such  that\n    // we can exercise all the lines below:\n    require: (path) => {\n        if (typeof require !== 'undefined') {\n            return require(path);\n        }\n        else if (path.match(/\\.json$/)) {\n            // Addresses: https://github.com/yargs/yargs/issues/2040\n            return JSON.parse(readFileSync(path, 'utf8'));\n        }\n        else {\n            throw Error('only .json config files are supported in ESM');\n        }\n    }\n});\nconst yargsParser = function Parser(args, opts) {\n    const result = parser.parse(args.slice(), opts);\n    return result.argv;\n};\nyargsParser.detailed = function (args, opts) {\n    return parser.parse(args.slice(), opts);\n};\nyargsParser.camelCase = camelCase;\nyargsParser.decamelize = decamelize;\nyargsParser.looksLikeNumber = looksLikeNumber;\nexport default yargsParser;\n"],"names":["YargsParser","format","normalize","resolve","path","readFileSync","camelCase","decamelize","looksLikeNumber"],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,IAAI,IAAI,IAAI;AAQZ,MAAM,iBAAkB,WAAW,QAAQ,OAAO,QAAQ,IAAI,yBACxD,OAAO,QAAQ,IAAI,sBAAsB,IACzC;AACN,MAAM,eAAe,MAAM,KAAK,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,cAAc,QAAQ,OAAO,SAAS,SAAS,GAAG,UAAU,QAAQ,OAAO,SAAS,MAAM,KAAK,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,aAAa,QAAQ,OAAO,SAAS,SAAS,GAAG,MAAM,CAAC;AAC3S,IAAI,aAAa;AACb,QAAM,QAAQ,OAAO,YAAY,MAAM,UAAU,EAAE,CAAC,CAAC;AACrD,MAAI,QAAQ,gBAAgB;AACxB,UAAM,MAAM,sDAAsD,kHAAkH;AAAA,EACvL;AACL;AAEA,MAAM,MAAM,UAAU,QAAQ,MAAM,CAAA;AACpC,MAAM,SAAS,IAAIA,cAAAA,YAAY;AAAA,EAC3B,KAAK,QAAQ;AAAA,EACb,KAAK,MAAM;AACP,WAAO;AAAA,EACV;AAAA,EACL,QAAIC,WAAM;AAAA,EACV,WAAIC,KAAS;AAAA,EACb,SAAIC,KAAO;AAAA;AAAA;AAAA,EAGP,SAAS,CAACC,UAAS;AACf,QAAI,OAAO,YAAY,aAAa;AAChC,aAAO,QAAQA,KAAI;AAAA,IACtB,WACQA,MAAK,MAAM,SAAS,GAAG;AAE5B,aAAO,KAAK,MAAMC,GAAAA,aAAaD,OAAM,MAAM,CAAC;AAAA,IAC/C,OACI;AACD,YAAM,MAAM,8CAA8C;AAAA,IAC7D;AAAA,EACJ;AACL,CAAC;AACI,MAAC,cAAc,SAAS,OAAO,MAAM,MAAM;AAC5C,QAAM,SAAS,OAAO,MAAM,KAAK,MAAK,GAAI,IAAI;AAC9C,SAAO,OAAO;AAClB;AACA,YAAY,WAAW,SAAU,MAAM,MAAM;AACzC,SAAO,OAAO,MAAM,KAAK,MAAO,GAAE,IAAI;AAC1C;AACA,YAAY,YAAYE,YAAAA;AACxB,YAAY,aAAaC,YAAAA;AACzB,YAAY,kBAAkBC,YAAe;;","x_google_ignoreList":[0]}