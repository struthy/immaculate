import { getDefaultExportFromCjs } from "../../_virtual/_commonjsHelpers.js";
import { e as errorEx_1 } from "../error-ex/index.js";
import { j as jsonParseEvenBetterErrors } from "../json-parse-even-better-errors/index.js";
import "../lines-and-columns/build/index.js";
import "../@babel/code-frame/lib/index.js";
import { __exports as build } from "../../_virtual/index4.js";
import { __exports as lib } from "../../_virtual/index5.js";
const errorEx = errorEx_1;
const fallback = jsonParseEvenBetterErrors;
const { default: LinesAndColumns } = build;
const { codeFrameColumns } = lib;
const JSONError = errorEx("JSONError", {
  fileName: errorEx.append("in %s"),
  codeFrame: errorEx.append("\n\n%s\n")
});
const parseJson = (string, reviver, filename) => {
  if (typeof reviver === "string") {
    filename = reviver;
    reviver = null;
  }
  try {
    try {
      return JSON.parse(string, reviver);
    } catch (error) {
      fallback(string, reviver);
      throw error;
    }
  } catch (error) {
    error.message = error.message.replace(/\n/g, "");
    const indexMatch = error.message.match(/in JSON at position (\d+) while parsing/);
    const jsonError = new JSONError(error);
    if (filename) {
      jsonError.fileName = filename;
    }
    if (indexMatch && indexMatch.length > 0) {
      const lines = new LinesAndColumns(string);
      const index = Number(indexMatch[1]);
      const location = lines.locationForIndex(index);
      const codeFrame = codeFrameColumns(
        string,
        { start: { line: location.line + 1, column: location.column + 1 } },
        { highlightCode: true }
      );
      jsonError.codeFrame = codeFrame;
    }
    throw jsonError;
  }
};
parseJson.JSONError = JSONError;
var parseJson_1 = parseJson;
const parseJson$1 = /* @__PURE__ */ getDefaultExportFromCjs(parseJson_1);
export {
  parseJson$1 as default
};
//# sourceMappingURL=index.js.map
