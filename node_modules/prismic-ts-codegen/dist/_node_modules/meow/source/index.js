import process from "node:process";
import yargsParser from "../../yargs-parser/build/lib/index.js";
import camelcaseKeys from "../../camelcase-keys/index.js";
import { trimNewlines } from "../../trim-newlines/index.js";
import redent from "../../redent/index.js";
import hardRejection from "../../hard-rejection/index.js";
import normalizePackageData from "../../normalize-package-data/lib/normalize.js";
import { buildOptions } from "./options.js";
import { buildParserOptions } from "./parser.js";
import { checkUnknownFlags, validate, checkMissingRequiredFlags } from "./validate.js";
const buildResult = (options, parserOptions) => {
  const { pkg: package_ } = options;
  const argv = yargsParser(options.argv, parserOptions);
  let help = "";
  if (options.help) {
    help = trimNewlines((options.help || "").replace(/\t+\n*$/, ""));
    if (help.includes("\n")) {
      help = redent(help, 2);
    }
    help = `
${help}`;
  }
  normalizePackageData(package_);
  let { description } = options;
  if (!description && description !== false) {
    ({ description } = package_);
  }
  description && (description = help ? `
  ${description}
` : `
${description}`);
  help = `${description || ""}${help}
`;
  const showHelp = (code) => {
    console.log(help);
    process.exit(typeof code === "number" ? code : 2);
  };
  const showVersion = () => {
    console.log(typeof options.version === "string" ? options.version : package_.version);
    process.exit(0);
  };
  if (argv._.length === 0 && options.argv.length === 1) {
    if (argv.version === true && options.autoVersion) {
      showVersion();
    } else if (argv.help === true && options.autoHelp) {
      showHelp(0);
    }
  }
  const input = argv._;
  delete argv._;
  if (!options.allowUnknownFlags) {
    checkUnknownFlags(input);
  }
  const flags = camelcaseKeys(argv, { exclude: ["--", /^\w$/] });
  const unnormalizedFlags = { ...flags };
  validate(flags, options);
  for (const flagValue of Object.values(options.flags)) {
    if (Array.isArray(flagValue.aliases)) {
      for (const alias of flagValue.aliases) {
        delete flags[alias];
      }
    }
    delete flags[flagValue.shortFlag];
  }
  checkMissingRequiredFlags(options.flags, flags, input);
  return {
    input,
    flags,
    unnormalizedFlags,
    pkg: package_,
    help,
    showHelp,
    showVersion
  };
};
const meow = (helpText, options = {}) => {
  const parsedOptions = buildOptions(helpText, options);
  if (parsedOptions.hardRejection) {
    hardRejection();
  }
  const parserOptions = buildParserOptions(parsedOptions);
  const result = buildResult(parsedOptions, parserOptions);
  process.title = result.pkg.bin ? Object.keys(result.pkg.bin).at(0) : result.pkg.name;
  return result;
};
export {
  meow as default
};
//# sourceMappingURL=index.js.map
