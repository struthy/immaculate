{"version":3,"file":"options.js","sources":["../../../../node_modules/meow/source/options.js"],"sourcesContent":["import process from 'node:process';\nimport {dirname} from 'node:path';\nimport {fileURLToPath} from 'node:url';\nimport {readPackageUpSync} from 'read-pkg-up';\nimport {decamelizeFlagKey, joinFlagKeys} from './utils.js';\n\nconst validateOptions = options => {\n\tconst invalidOptionFilters = {\n\t\tflags: {\n\t\t\tkeyContainsDashes: {\n\t\t\t\tfilter: ([flagKey]) => flagKey.includes('-') && flagKey !== '--',\n\t\t\t\tmessage: flagKeys => `Flag keys may not contain '-'. Invalid flags: ${joinFlagKeys(flagKeys, '')}`,\n\t\t\t},\n\t\t\taliasIsSet: {\n\t\t\t\tfilter: ([, flag]) => Object.hasOwn(flag, 'alias'),\n\t\t\t\tmessage: flagKeys => `The option \\`alias\\` has been renamed to \\`shortFlag\\`. The following flags need to be updated: ${joinFlagKeys(flagKeys)}`,\n\t\t\t},\n\t\t\tchoicesNotAnArray: {\n\t\t\t\tfilter: ([, flag]) => Object.hasOwn(flag, 'choices') && !Array.isArray(flag.choices),\n\t\t\t\tmessage: flagKeys => `The option \\`choices\\` must be an array. Invalid flags: ${joinFlagKeys(flagKeys)}`,\n\t\t\t},\n\t\t\tchoicesNotMatchFlagType: {\n\t\t\t\tfilter: ([, flag]) => flag.type && Array.isArray(flag.choices) && flag.choices.some(choice => typeof choice !== flag.type),\n\t\t\t\tmessage(flagKeys) {\n\t\t\t\t\tconst flagKeysAndTypes = flagKeys.map(flagKey => `(\\`${decamelizeFlagKey(flagKey)}\\`, type: '${options.flags[flagKey].type}')`);\n\t\t\t\t\treturn `Each value of the option \\`choices\\` must be of the same type as its flag. Invalid flags: ${flagKeysAndTypes.join(', ')}`;\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefaultNotInChoices: {\n\t\t\t\tfilter: ([, flag]) => flag.default && Array.isArray(flag.choices) && ![flag.default].flat().every(value => flag.choices.includes(value)),\n\t\t\t\tmessage: flagKeys => `Each value of the option \\`default\\` must exist within the option \\`choices\\`. Invalid flags: ${joinFlagKeys(flagKeys)}`,\n\t\t\t},\n\t\t},\n\t};\n\n\tconst errorMessages = [];\n\n\tfor (const [optionKey, filters] of Object.entries(invalidOptionFilters)) {\n\t\tconst optionEntries = Object.entries(options[optionKey]);\n\n\t\tfor (const {filter, message} of Object.values(filters)) {\n\t\t\tconst invalidOptions = optionEntries.filter(option => filter(option));\n\t\t\tconst invalidOptionKeys = invalidOptions.map(([key]) => key);\n\n\t\t\tif (invalidOptions.length > 0) {\n\t\t\t\terrorMessages.push(message(invalidOptionKeys));\n\t\t\t}\n\t\t}\n\t}\n\n\tif (errorMessages.length > 0) {\n\t\tthrow new Error(errorMessages.join('\\n'));\n\t}\n};\n\nexport const buildOptions = (helpText, options) => {\n\tif (typeof helpText !== 'string') {\n\t\toptions = helpText;\n\t\thelpText = '';\n\t}\n\n\tif (!options.importMeta?.url) {\n\t\tthrow new TypeError('The `importMeta` option is required. Its value must be `import.meta`.');\n\t}\n\n\tconst foundPackage = readPackageUpSync({\n\t\tcwd: dirname(fileURLToPath(options.importMeta.url)),\n\t\tnormalize: false,\n\t});\n\n\tconst parsedOptions = {\n\t\tpkg: foundPackage ? foundPackage.packageJson : {},\n\t\targv: process.argv.slice(2),\n\t\tflags: {},\n\t\tinferType: false,\n\t\tinput: 'string',\n\t\thelp: helpText,\n\t\tautoHelp: true,\n\t\tautoVersion: true,\n\t\tbooleanDefault: false,\n\t\thardRejection: true,\n\t\tallowUnknownFlags: true,\n\t\tallowParentFlags: true,\n\t\t...options,\n\t};\n\n\tvalidateOptions(parsedOptions);\n\n\treturn parsedOptions;\n};\n"],"names":[],"mappings":";;;;;AAMA,MAAM,kBAAkB,aAAW;AAClC,QAAM,uBAAuB;AAAA,IAC5B,OAAO;AAAA,MACN,mBAAmB;AAAA,QAClB,QAAQ,CAAC,CAAC,OAAO,MAAM,QAAQ,SAAS,GAAG,KAAK,YAAY;AAAA,QAC5D,SAAS,cAAY,iDAAiD,aAAa,UAAU,EAAE;AAAA,MAC/F;AAAA,MACD,YAAY;AAAA,QACX,QAAQ,CAAC,CAAA,EAAG,IAAI,MAAM,OAAO,OAAO,MAAM,OAAO;AAAA,QACjD,SAAS,cAAY,mGAAmG,aAAa,QAAQ;AAAA,MAC7I;AAAA,MACD,mBAAmB;AAAA,QAClB,QAAQ,CAAC,CAAG,EAAA,IAAI,MAAM,OAAO,OAAO,MAAM,SAAS,KAAK,CAAC,MAAM,QAAQ,KAAK,OAAO;AAAA,QACnF,SAAS,cAAY,2DAA2D,aAAa,QAAQ;AAAA,MACrG;AAAA,MACD,yBAAyB;AAAA,QACxB,QAAQ,CAAC,CAAA,EAAG,IAAI,MAAM,KAAK,QAAQ,MAAM,QAAQ,KAAK,OAAO,KAAK,KAAK,QAAQ,KAAK,YAAU,OAAO,WAAW,KAAK,IAAI;AAAA,QACzH,QAAQ,UAAU;AACjB,gBAAM,mBAAmB,SAAS,IAAI,aAAW,MAAM,kBAAkB,OAAO,eAAe,QAAQ,MAAM,OAAO,EAAE,QAAQ;AAC9H,iBAAO,6FAA6F,iBAAiB,KAAK,IAAI;AAAA,QAC9H;AAAA,MACD;AAAA,MACD,qBAAqB;AAAA,QACpB,QAAQ,CAAC,GAAG,IAAI,MAAM,KAAK,WAAW,MAAM,QAAQ,KAAK,OAAO,KAAK,CAAC,CAAC,KAAK,OAAO,EAAE,KAAI,EAAG,MAAM,WAAS,KAAK,QAAQ,SAAS,KAAK,CAAC;AAAA,QACvI,SAAS,cAAY,iGAAiG,aAAa,QAAQ;AAAA,MAC3I;AAAA,IACD;AAAA,EACH;AAEC,QAAM,gBAAgB,CAAA;AAEtB,aAAW,CAAC,WAAW,OAAO,KAAK,OAAO,QAAQ,oBAAoB,GAAG;AACxE,UAAM,gBAAgB,OAAO,QAAQ,QAAQ,SAAS,CAAC;AAEvD,eAAW,EAAC,QAAQ,QAAO,KAAK,OAAO,OAAO,OAAO,GAAG;AACvD,YAAM,iBAAiB,cAAc,OAAO,YAAU,OAAO,MAAM,CAAC;AACpE,YAAM,oBAAoB,eAAe,IAAI,CAAC,CAAC,GAAG,MAAM,GAAG;AAE3D,UAAI,eAAe,SAAS,GAAG;AAC9B,sBAAc,KAAK,QAAQ,iBAAiB,CAAC;AAAA,MAC7C;AAAA,IACD;AAAA,EACD;AAED,MAAI,cAAc,SAAS,GAAG;AAC7B,UAAM,IAAI,MAAM,cAAc,KAAK,IAAI,CAAC;AAAA,EACxC;AACF;AAEY,MAAC,eAAe,CAAC,UAAU,YAAY;;AAClD,MAAI,OAAO,aAAa,UAAU;AACjC,cAAU;AACV,eAAW;AAAA,EACX;AAED,MAAI,GAAC,aAAQ,eAAR,mBAAoB,MAAK;AAC7B,UAAM,IAAI,UAAU,uEAAuE;AAAA,EAC3F;AAED,QAAM,eAAe,kBAAkB;AAAA,IACtC,KAAK,QAAQ,cAAc,QAAQ,WAAW,GAAG,CAAC;AAAA,IAClD,WAAW;AAAA,EACb,CAAE;AAED,QAAM,gBAAgB;AAAA,IACrB,KAAK,eAAe,aAAa,cAAc,CAAE;AAAA,IACjD,MAAM,QAAQ,KAAK,MAAM,CAAC;AAAA,IAC1B,OAAO,CAAE;AAAA,IACT,WAAW;AAAA,IACX,OAAO;AAAA,IACP,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,gBAAgB;AAAA,IAChB,eAAe;AAAA,IACf,mBAAmB;AAAA,IACnB,kBAAkB;AAAA,IAClB,GAAG;AAAA,EACL;AAEC,kBAAgB,aAAa;AAE7B,SAAO;AACR;","x_google_ignoreList":[0]}