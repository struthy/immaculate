{"version":3,"file":"parser.cjs","sources":["../../../../node_modules/meow/source/parser.js"],"sourcesContent":["import constructParserOptions from 'minimist-options';\nimport decamelizeKeys from 'decamelize-keys';\n\nconst buildParserFlags = ({flags, booleanDefault}) => {\n\tconst parserFlags = {};\n\n\tfor (const [flagKey, flagValue] of Object.entries(flags)) {\n\t\tconst flag = {...flagValue};\n\n\t\t// `minimist-options` expects `flag.alias`\n\t\tif (flag.shortFlag) {\n\t\t\tflag.alias = flag.shortFlag;\n\t\t\tdelete flag.shortFlag;\n\t\t}\n\n\t\tif (\n\t\t\tbooleanDefault !== undefined\n\t\t\t\t&& flag.type === 'boolean'\n\t\t\t\t&& !Object.hasOwn(flag, 'default')\n\t\t) {\n\t\t\tflag.default = flag.isMultiple ? [booleanDefault] : booleanDefault;\n\t\t}\n\n\t\tif (flag.isMultiple) {\n\t\t\tflag.type = flag.type ? `${flag.type}-array` : 'array';\n\t\t\tflag.default = flag.default ?? [];\n\t\t\tdelete flag.isMultiple;\n\t\t}\n\n\t\tif (Array.isArray(flag.aliases)) {\n\t\t\tif (flag.alias) {\n\t\t\t\tflag.aliases.push(flag.alias);\n\t\t\t}\n\n\t\t\tflag.alias = flag.aliases;\n\t\t\tdelete flag.aliases;\n\t\t}\n\n\t\tparserFlags[flagKey] = flag;\n\t}\n\n\treturn parserFlags;\n};\n\nexport const buildParserOptions = options => {\n\tlet parserOptions = buildParserFlags(options);\n\tparserOptions.arguments = options.input;\n\n\tparserOptions = decamelizeKeys(parserOptions, {separator: '-', exclude: ['stopEarly', '--']});\n\n\tif (options.inferType) {\n\t\tdelete parserOptions.arguments;\n\t}\n\n\t// Add --help and --version to known flags if autoHelp or autoVersion are set\n\tif (!options.allowUnknownFlags) {\n\t\tif (options.autoHelp && !parserOptions.help) {\n\t\t\tparserOptions.help = {type: 'boolean'};\n\t\t}\n\n\t\tif (options.autoVersion && !parserOptions.version) {\n\t\t\tparserOptions.version = {type: 'boolean'};\n\t\t}\n\t}\n\n\tparserOptions = constructParserOptions(parserOptions);\n\n\tparserOptions.configuration = {\n\t\t...parserOptions.configuration,\n\t\t'greedy-arrays': false,\n\t};\n\n\tif (parserOptions['--']) {\n\t\tparserOptions.configuration['populate--'] = true;\n\t}\n\n\tif (!options.allowUnknownFlags) {\n\t\t// Collect unknown options in `argv._` to be checked later.\n\t\tparserOptions.configuration['unknown-options-as-args'] = true;\n\t}\n\n\treturn parserOptions;\n};\n"],"names":["decamelizeKeys","constructParserOptions"],"mappings":";;;;AAGA,MAAM,mBAAmB,CAAC,EAAC,OAAO,eAAc,MAAM;AACrD,QAAM,cAAc,CAAA;AAEpB,aAAW,CAAC,SAAS,SAAS,KAAK,OAAO,QAAQ,KAAK,GAAG;AACzD,UAAM,OAAO,EAAC,GAAG,UAAS;AAG1B,QAAI,KAAK,WAAW;AACnB,WAAK,QAAQ,KAAK;AAClB,aAAO,KAAK;AAAA,IACZ;AAED,QACC,mBAAmB,UACf,KAAK,SAAS,aACd,CAAC,OAAO,OAAO,MAAM,SAAS,GACjC;AACD,WAAK,UAAU,KAAK,aAAa,CAAC,cAAc,IAAI;AAAA,IACpD;AAED,QAAI,KAAK,YAAY;AACpB,WAAK,OAAO,KAAK,OAAO,GAAG,KAAK,eAAe;AAC/C,WAAK,UAAU,KAAK,WAAW,CAAA;AAC/B,aAAO,KAAK;AAAA,IACZ;AAED,QAAI,MAAM,QAAQ,KAAK,OAAO,GAAG;AAChC,UAAI,KAAK,OAAO;AACf,aAAK,QAAQ,KAAK,KAAK,KAAK;AAAA,MAC5B;AAED,WAAK,QAAQ,KAAK;AAClB,aAAO,KAAK;AAAA,IACZ;AAED,gBAAY,OAAO,IAAI;AAAA,EACvB;AAED,SAAO;AACR;AAEY,MAAC,qBAAqB,aAAW;AAC5C,MAAI,gBAAgB,iBAAiB,OAAO;AAC5C,gBAAc,YAAY,QAAQ;AAElC,kBAAgBA,MAAe,eAAe,EAAC,WAAW,KAAK,SAAS,CAAC,aAAa,IAAI,EAAC,CAAC;AAE5F,MAAI,QAAQ,WAAW;AACtB,WAAO,cAAc;AAAA,EACrB;AAGD,MAAI,CAAC,QAAQ,mBAAmB;AAC/B,QAAI,QAAQ,YAAY,CAAC,cAAc,MAAM;AAC5C,oBAAc,OAAO,EAAC,MAAM,UAAS;AAAA,IACrC;AAED,QAAI,QAAQ,eAAe,CAAC,cAAc,SAAS;AAClD,oBAAc,UAAU,EAAC,MAAM,UAAS;AAAA,IACxC;AAAA,EACD;AAED,kBAAgBC,QAAuB,aAAa;AAEpD,gBAAc,gBAAgB;AAAA,IAC7B,GAAG,cAAc;AAAA,IACjB,iBAAiB;AAAA,EACnB;AAEC,MAAI,cAAc,IAAI,GAAG;AACxB,kBAAc,cAAc,YAAY,IAAI;AAAA,EAC5C;AAED,MAAI,CAAC,QAAQ,mBAAmB;AAE/B,kBAAc,cAAc,yBAAyB,IAAI;AAAA,EACzD;AAED,SAAO;AACR;;","x_google_ignoreList":[0]}