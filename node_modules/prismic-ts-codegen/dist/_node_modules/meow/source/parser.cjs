"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index$1 = require("../../minimist-options/index.cjs");
const index = require("../../decamelize-keys/index.cjs");
const buildParserFlags = ({ flags, booleanDefault }) => {
  const parserFlags = {};
  for (const [flagKey, flagValue] of Object.entries(flags)) {
    const flag = { ...flagValue };
    if (flag.shortFlag) {
      flag.alias = flag.shortFlag;
      delete flag.shortFlag;
    }
    if (booleanDefault !== void 0 && flag.type === "boolean" && !Object.hasOwn(flag, "default")) {
      flag.default = flag.isMultiple ? [booleanDefault] : booleanDefault;
    }
    if (flag.isMultiple) {
      flag.type = flag.type ? `${flag.type}-array` : "array";
      flag.default = flag.default ?? [];
      delete flag.isMultiple;
    }
    if (Array.isArray(flag.aliases)) {
      if (flag.alias) {
        flag.aliases.push(flag.alias);
      }
      flag.alias = flag.aliases;
      delete flag.aliases;
    }
    parserFlags[flagKey] = flag;
  }
  return parserFlags;
};
const buildParserOptions = (options) => {
  let parserOptions = buildParserFlags(options);
  parserOptions.arguments = options.input;
  parserOptions = index(parserOptions, { separator: "-", exclude: ["stopEarly", "--"] });
  if (options.inferType) {
    delete parserOptions.arguments;
  }
  if (!options.allowUnknownFlags) {
    if (options.autoHelp && !parserOptions.help) {
      parserOptions.help = { type: "boolean" };
    }
    if (options.autoVersion && !parserOptions.version) {
      parserOptions.version = { type: "boolean" };
    }
  }
  parserOptions = index$1(parserOptions);
  parserOptions.configuration = {
    ...parserOptions.configuration,
    "greedy-arrays": false
  };
  if (parserOptions["--"]) {
    parserOptions.configuration["populate--"] = true;
  }
  if (!options.allowUnknownFlags) {
    parserOptions.configuration["unknown-options-as-args"] = true;
  }
  return parserOptions;
};
exports.buildParserOptions = buildParserOptions;
//# sourceMappingURL=parser.cjs.map
