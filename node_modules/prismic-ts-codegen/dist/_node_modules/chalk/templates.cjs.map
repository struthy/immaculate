{"version":3,"file":"templates.cjs","sources":["../../../node_modules/chalk/templates.js"],"sourcesContent":["'use strict';\nconst TEMPLATE_REGEX = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = new Map([\n\t['n', '\\n'],\n\t['r', '\\r'],\n\t['t', '\\t'],\n\t['b', '\\b'],\n\t['f', '\\f'],\n\t['v', '\\v'],\n\t['0', '\\0'],\n\t['\\\\', '\\\\'],\n\t['e', '\\u001B'],\n\t['a', '\\u0007']\n]);\n\nfunction unescape(c) {\n\tif ((c[0] === 'u' && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\treturn ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, args) {\n\tconst results = [];\n\tconst chunks = args.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tif (!isNaN(chunk)) {\n\t\t\tresults.push(Number(chunk));\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const styleName of Object.keys(enabled)) {\n\t\tif (Array.isArray(enabled[styleName])) {\n\t\t\tif (!(styleName in current)) {\n\t\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t\t}\n\n\t\t\tif (enabled[styleName].length > 0) {\n\t\t\t\tcurrent = current[styleName].apply(current, enabled[styleName]);\n\t\t\t} else {\n\t\t\t\tcurrent = current[styleName];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, tmp) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {\n\t\tif (escapeChar) {\n\t\t\tchunk.push(unescape(escapeChar));\n\t\t} else if (style) {\n\t\t\tconst str = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(chr);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMsg);\n\t}\n\n\treturn chunks.join('');\n};\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}