{"version":3,"file":"index.cjs","sources":["../../../../node_modules/hosted-git-info/lib/index.js"],"sourcesContent":["'use strict'\n\nconst LRU = require('lru-cache')\nconst hosts = require('./hosts.js')\nconst fromUrl = require('./from-url.js')\nconst parseUrl = require('./parse-url.js')\n\nconst cache = new LRU({ max: 1000 })\n\nclass GitHost {\n  constructor (type, user, auth, project, committish, defaultRepresentation, opts = {}) {\n    Object.assign(this, GitHost.#gitHosts[type], {\n      type,\n      user,\n      auth,\n      project,\n      committish,\n      default: defaultRepresentation,\n      opts,\n    })\n  }\n\n  static #gitHosts = { byShortcut: {}, byDomain: {} }\n  static #protocols = {\n    'git+ssh:': { name: 'sshurl' },\n    'ssh:': { name: 'sshurl' },\n    'git+https:': { name: 'https', auth: true },\n    'git:': { auth: true },\n    'http:': { auth: true },\n    'https:': { auth: true },\n    'git+http:': { auth: true },\n  }\n\n  static addHost (name, host) {\n    GitHost.#gitHosts[name] = host\n    GitHost.#gitHosts.byDomain[host.domain] = name\n    GitHost.#gitHosts.byShortcut[`${name}:`] = name\n    GitHost.#protocols[`${name}:`] = { name }\n  }\n\n  static fromUrl (giturl, opts) {\n    if (typeof giturl !== 'string') {\n      return\n    }\n\n    const key = giturl + JSON.stringify(opts || {})\n\n    if (!cache.has(key)) {\n      const hostArgs = fromUrl(giturl, opts, {\n        gitHosts: GitHost.#gitHosts,\n        protocols: GitHost.#protocols,\n      })\n      cache.set(key, hostArgs ? new GitHost(...hostArgs) : undefined)\n    }\n\n    return cache.get(key)\n  }\n\n  static parseUrl (url) {\n    return parseUrl(url)\n  }\n\n  #fill (template, opts) {\n    if (typeof template !== 'function') {\n      return null\n    }\n\n    const options = { ...this, ...this.opts, ...opts }\n\n    // the path should always be set so we don't end up with 'undefined' in urls\n    if (!options.path) {\n      options.path = ''\n    }\n\n    // template functions will insert the leading slash themselves\n    if (options.path.startsWith('/')) {\n      options.path = options.path.slice(1)\n    }\n\n    if (options.noCommittish) {\n      options.committish = null\n    }\n\n    const result = template(options)\n    return options.noGitPlus && result.startsWith('git+') ? result.slice(4) : result\n  }\n\n  hash () {\n    return this.committish ? `#${this.committish}` : ''\n  }\n\n  ssh (opts) {\n    return this.#fill(this.sshtemplate, opts)\n  }\n\n  sshurl (opts) {\n    return this.#fill(this.sshurltemplate, opts)\n  }\n\n  browse (path, ...args) {\n    // not a string, treat path as opts\n    if (typeof path !== 'string') {\n      return this.#fill(this.browsetemplate, path)\n    }\n\n    if (typeof args[0] !== 'string') {\n      return this.#fill(this.browsetreetemplate, { ...args[0], path })\n    }\n\n    return this.#fill(this.browsetreetemplate, { ...args[1], fragment: args[0], path })\n  }\n\n  // If the path is known to be a file, then browseFile should be used. For some hosts\n  // the url is the same as browse, but for others like GitHub a file can use both `/tree/`\n  // and `/blob/` in the path. When using a default committish of `HEAD` then the `/tree/`\n  // path will redirect to a specific commit. Using the `/blob/` path avoids this and\n  // does not redirect to a different commit.\n  browseFile (path, ...args) {\n    if (typeof args[0] !== 'string') {\n      return this.#fill(this.browseblobtemplate, { ...args[0], path })\n    }\n\n    return this.#fill(this.browseblobtemplate, { ...args[1], fragment: args[0], path })\n  }\n\n  docs (opts) {\n    return this.#fill(this.docstemplate, opts)\n  }\n\n  bugs (opts) {\n    return this.#fill(this.bugstemplate, opts)\n  }\n\n  https (opts) {\n    return this.#fill(this.httpstemplate, opts)\n  }\n\n  git (opts) {\n    return this.#fill(this.gittemplate, opts)\n  }\n\n  shortcut (opts) {\n    return this.#fill(this.shortcuttemplate, opts)\n  }\n\n  path (opts) {\n    return this.#fill(this.pathtemplate, opts)\n  }\n\n  tarball (opts) {\n    return this.#fill(this.tarballtemplate, { ...opts, noCommittish: false })\n  }\n\n  file (path, opts) {\n    return this.#fill(this.filetemplate, { ...opts, path })\n  }\n\n  edit (path, opts) {\n    return this.#fill(this.edittemplate, { ...opts, path })\n  }\n\n  getDefaultRepresentation () {\n    return this.default\n  }\n\n  toString (opts) {\n    if (this.default && typeof this[this.default] === 'function') {\n      return this[this.default](opts)\n    }\n\n    return this.sshurl(opts)\n  }\n}\n\nfor (const [name, host] of Object.entries(hosts)) {\n  GitHost.addHost(name, host)\n}\n\nmodule.exports = GitHost\n"],"names":["require$$0","require$$1","require$$2","require$$3"],"mappings":"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","x_google_ignoreList":[0]}