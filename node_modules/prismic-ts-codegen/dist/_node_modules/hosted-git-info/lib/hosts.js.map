{"version":3,"file":"hosts.js","sources":["../../../../node_modules/hosted-git-info/lib/hosts.js"],"sourcesContent":["/* eslint-disable max-len */\n\n'use strict'\n\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : ''\nconst maybeEncode = (arg) => arg ? encodeURIComponent(arg) : ''\nconst formatHashFragment = (f) => f.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-')\n\nconst defaults = {\n  sshtemplate: ({ domain, user, project, committish }) =>\n    `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, user, project, committish }) =>\n    `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({ domain, user, project, committish, editpath, path }) =>\n    `https://${domain}/${user}/${project}${maybeJoin('/', editpath, '/', maybeEncode(committish || 'HEAD'), '/', path)}`,\n  browsetemplate: ({ domain, user, project, committish, treepath }) =>\n    `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsetreetemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) =>\n    `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'HEAD')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  browseblobtemplate: ({ domain, user, project, committish, blobpath, path, fragment, hashformat }) =>\n    `https://${domain}/${user}/${project}/${blobpath}/${maybeEncode(committish || 'HEAD')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) =>\n    `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({ auth, domain, user, project, committish }) =>\n    `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ domain, user, project, committish, path }) =>\n    `https://${domain}/${user}/${project}/raw/${maybeEncode(committish || 'HEAD')}/${path}`,\n  shortcuttemplate: ({ type, user, project, committish }) =>\n    `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ user, project, committish }) =>\n    `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, user, project }) =>\n    `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment,\n}\n\nconst hosts = {}\nhosts.github = {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  blobpath: 'blob',\n  editpath: 'edit',\n  filetemplate: ({ auth, user, project, committish, path }) =>\n    `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish || 'HEAD')}/${path}`,\n  gittemplate: ({ auth, domain, user, project, committish }) =>\n    `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) =>\n    `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish || 'HEAD')}`,\n  extract: (url) => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5)\n    if (type && type !== 'tree') {\n      return\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1)\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish }\n  },\n}\n\nhosts.bitbucket = {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  blobpath: 'src',\n  editpath: '?mode=edit',\n  edittemplate: ({ domain, user, project, committish, treepath, path, editpath }) =>\n    `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish || 'HEAD'), '/', path, editpath)}`,\n  tarballtemplate: ({ domain, user, project, committish }) =>\n    `https://${domain}/${user}/${project}/get/${maybeEncode(committish || 'HEAD')}.tar.gz`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (['get'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n}\n\nhosts.gitlab = {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  blobpath: 'tree',\n  editpath: '-/edit',\n  httpstemplate: ({ auth, domain, user, project, committish }) =>\n    `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) =>\n    `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish || 'HEAD')}`,\n  extract: (url) => {\n    const path = url.pathname.slice(1)\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return\n    }\n\n    const segments = path.split('/')\n    let project = segments.pop()\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    const user = segments.join('/')\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n}\n\nhosts.gist = {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  editpath: 'edit',\n  sshtemplate: ({ domain, project, committish }) =>\n    `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, project, committish }) =>\n    `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({ domain, user, project, committish, editpath }) =>\n    `https://${domain}/${user}/${project}${maybeJoin('/', maybeEncode(committish))}/${editpath}`,\n  browsetemplate: ({ domain, project, committish }) =>\n    `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsetreetemplate: ({ domain, project, committish, path, hashformat }) =>\n    `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  browseblobtemplate: ({ domain, project, committish, path, hashformat }) =>\n    `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({ domain, project, committish }) =>\n    `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({ domain, project, committish }) =>\n    `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ user, project, committish, path }) =>\n    `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({ type, project, committish }) =>\n    `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ project, committish }) =>\n    `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, project }) =>\n    `https://${domain}/${project}`,\n  gittemplate: ({ domain, project, committish }) =>\n    `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ project, committish }) =>\n    `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish || 'HEAD')}`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (aux === 'raw') {\n      return\n    }\n\n    if (!project) {\n      if (!user) {\n        return\n      }\n\n      project = user\n      user = null\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment)\n  },\n}\n\nhosts.sourcehut = {\n  protocols: ['git+ssh:', 'https:'],\n  domain: 'git.sr.ht',\n  treepath: 'tree',\n  blobpath: 'tree',\n  filetemplate: ({ domain, user, project, committish, path }) =>\n    `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'HEAD'}/${path}`,\n  httpstemplate: ({ domain, user, project, committish }) =>\n    `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) =>\n    `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'HEAD'}.tar.gz`,\n  bugstemplate: ({ user, project }) =>\n    `https://todo.sr.ht/${user}/${project}`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n\n    // tarball url\n    if (['archive'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n}\n\nfor (const [name, host] of Object.entries(hosts)) {\n  hosts[name] = Object.assign({}, defaults, host)\n}\n\nmodule.exports = hosts\n"],"names":[],"mappings":"AAIA,MAAM,YAAY,IAAI,SAAS,KAAK,MAAM,SAAO,GAAG,IAAI,KAAK,KAAK,EAAE,IAAI;AACxE,MAAM,cAAc,CAAC,QAAQ,MAAM,mBAAmB,GAAG,IAAI;AAC7D,MAAM,qBAAqB,CAAC,MAAM,EAAE,YAAW,EAAG,QAAQ,iBAAiB,EAAE,EAAE,QAAQ,QAAQ,GAAG;AAElG,MAAM,WAAW;AAAA,EACf,aAAa,CAAC,EAAE,QAAQ,MAAM,SAAS,WAAY,MACjD,OAAO,UAAU,QAAQ,cAAc,UAAU,KAAK,UAAU;AAAA,EAClE,gBAAgB,CAAC,EAAE,QAAQ,MAAM,SAAS,WAAY,MACpD,iBAAiB,UAAU,QAAQ,cAAc,UAAU,KAAK,UAAU;AAAA,EAC5E,cAAc,CAAC,EAAE,QAAQ,MAAM,SAAS,YAAY,UAAU,KAAM,MAClE,WAAW,UAAU,QAAQ,UAAU,UAAU,KAAK,UAAU,KAAK,YAAY,cAAc,MAAM,GAAG,KAAK,IAAI;AAAA,EACnH,gBAAgB,CAAC,EAAE,QAAQ,MAAM,SAAS,YAAY,SAAU,MAC9D,WAAW,UAAU,QAAQ,UAAU,UAAU,KAAK,UAAU,KAAK,YAAY,UAAU,CAAC;AAAA,EAC9F,oBAAoB,CAAC,EAAE,QAAQ,MAAM,SAAS,YAAY,UAAU,MAAM,UAAU,WAAY,MAC9F,WAAW,UAAU,QAAQ,WAAW,YAAY,YAAY,cAAc,MAAM,KAAK,OAAO,UAAU,KAAK,WAAW,YAAY,EAAE,CAAC;AAAA,EAC3I,oBAAoB,CAAC,EAAE,QAAQ,MAAM,SAAS,YAAY,UAAU,MAAM,UAAU,WAAY,MAC9F,WAAW,UAAU,QAAQ,WAAW,YAAY,YAAY,cAAc,MAAM,KAAK,OAAO,UAAU,KAAK,WAAW,YAAY,EAAE,CAAC;AAAA,EAC3I,cAAc,CAAC,EAAE,QAAQ,MAAM,SAAS,UAAU,WAAY,MAC5D,WAAW,UAAU,QAAQ,UAAU,UAAU,KAAK,UAAU,KAAK,YAAY,UAAU,CAAC;AAAA,EAC9F,eAAe,CAAC,EAAE,MAAM,QAAQ,MAAM,SAAS,WAAY,MACzD,eAAe,UAAU,MAAM,GAAG,IAAI,UAAU,QAAQ,cAAc,UAAU,KAAK,UAAU;AAAA,EACjG,cAAc,CAAC,EAAE,QAAQ,MAAM,SAAS,YAAY,KAAM,MACxD,WAAW,UAAU,QAAQ,eAAe,YAAY,cAAc,MAAM,KAAK;AAAA,EACnF,kBAAkB,CAAC,EAAE,MAAM,MAAM,SAAS,WAAY,MACpD,GAAG,QAAQ,QAAQ,UAAU,UAAU,KAAK,UAAU;AAAA,EACxD,cAAc,CAAC,EAAE,MAAM,SAAS,WAAY,MAC1C,GAAG,QAAQ,UAAU,UAAU,KAAK,UAAU;AAAA,EAChD,cAAc,CAAC,EAAE,QAAQ,MAAM,QAAS,MACtC,WAAW,UAAU,QAAQ;AAAA,EAC/B,YAAY;AACd;AAEA,MAAM,QAAQ,CAAE;AAChB,MAAM,SAAS;AAAA;AAAA;AAAA,EAGb,WAAW,CAAC,QAAQ,SAAS,YAAY,cAAc,QAAQ,QAAQ;AAAA,EACvE,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,cAAc,CAAC,EAAE,MAAM,MAAM,SAAS,YAAY,KAAM,MACtD,WAAW,UAAU,MAAM,GAAG,8BAA8B,QAAQ,WAAW,YAAY,cAAc,MAAM,KAAK;AAAA,EACtH,aAAa,CAAC,EAAE,MAAM,QAAQ,MAAM,SAAS,WAAY,MACvD,SAAS,UAAU,MAAM,GAAG,IAAI,UAAU,QAAQ,cAAc,UAAU,KAAK,UAAU;AAAA,EAC3F,iBAAiB,CAAC,EAAE,QAAQ,MAAM,SAAS,WAAY,MACrD,oBAAoB,UAAU,QAAQ,kBAAkB,YAAY,cAAc,MAAM;AAAA,EAC1F,SAAS,CAAC,QAAQ;AAChB,QAAI,GAAG,MAAM,SAAS,MAAM,UAAU,IAAI,IAAI,SAAS,MAAM,KAAK,CAAC;AACnE,QAAI,QAAQ,SAAS,QAAQ;AAC3B;AAAA,IACD;AAED,QAAI,CAAC,MAAM;AACT,mBAAa,IAAI,KAAK,MAAM,CAAC;AAAA,IAC9B;AAED,QAAI,WAAW,QAAQ,SAAS,MAAM,GAAG;AACvC,gBAAU,QAAQ,MAAM,GAAG,EAAE;AAAA,IAC9B;AAED,QAAI,CAAC,QAAQ,CAAC,SAAS;AACrB;AAAA,IACD;AAED,WAAO,EAAE,MAAM,SAAS,WAAY;AAAA,EACrC;AACH;AAEA,MAAM,YAAY;AAAA,EAChB,WAAW,CAAC,YAAY,cAAc,QAAQ,QAAQ;AAAA,EACtD,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,cAAc,CAAC,EAAE,QAAQ,MAAM,SAAS,YAAY,UAAU,MAAM,SAAU,MAC5E,WAAW,UAAU,QAAQ,UAAU,UAAU,KAAK,UAAU,KAAK,YAAY,cAAc,MAAM,GAAG,KAAK,MAAM,QAAQ;AAAA,EAC7H,iBAAiB,CAAC,EAAE,QAAQ,MAAM,SAAS,WAAY,MACrD,WAAW,UAAU,QAAQ,eAAe,YAAY,cAAc,MAAM;AAAA,EAC9E,SAAS,CAAC,QAAQ;AAChB,QAAI,CAAG,EAAA,MAAM,SAAS,GAAG,IAAI,IAAI,SAAS,MAAM,KAAK,CAAC;AACtD,QAAI,CAAC,KAAK,EAAE,SAAS,GAAG,GAAG;AACzB;AAAA,IACD;AAED,QAAI,WAAW,QAAQ,SAAS,MAAM,GAAG;AACvC,gBAAU,QAAQ,MAAM,GAAG,EAAE;AAAA,IAC9B;AAED,QAAI,CAAC,QAAQ,CAAC,SAAS;AACrB;AAAA,IACD;AAED,WAAO,EAAE,MAAM,SAAS,YAAY,IAAI,KAAK,MAAM,CAAC,EAAG;AAAA,EACxD;AACH;AAEA,MAAM,SAAS;AAAA,EACb,WAAW,CAAC,YAAY,cAAc,QAAQ,QAAQ;AAAA,EACtD,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,eAAe,CAAC,EAAE,MAAM,QAAQ,MAAM,SAAS,WAAY,MACzD,eAAe,UAAU,MAAM,GAAG,IAAI,UAAU,QAAQ,cAAc,UAAU,KAAK,UAAU;AAAA,EACjG,iBAAiB,CAAC,EAAE,QAAQ,MAAM,SAAS,WAAY,MACrD,WAAW,UAAU,QAAQ,yCAAyC,YAAY,cAAc,MAAM;AAAA,EACxG,SAAS,CAAC,QAAQ;AAChB,UAAM,OAAO,IAAI,SAAS,MAAM,CAAC;AACjC,QAAI,KAAK,SAAS,KAAK,KAAK,KAAK,SAAS,iBAAiB,GAAG;AAC5D;AAAA,IACD;AAED,UAAM,WAAW,KAAK,MAAM,GAAG;AAC/B,QAAI,UAAU,SAAS,IAAK;AAC5B,QAAI,QAAQ,SAAS,MAAM,GAAG;AAC5B,gBAAU,QAAQ,MAAM,GAAG,EAAE;AAAA,IAC9B;AAED,UAAM,OAAO,SAAS,KAAK,GAAG;AAC9B,QAAI,CAAC,QAAQ,CAAC,SAAS;AACrB;AAAA,IACD;AAED,WAAO,EAAE,MAAM,SAAS,YAAY,IAAI,KAAK,MAAM,CAAC,EAAG;AAAA,EACxD;AACH;AAEA,MAAM,OAAO;AAAA,EACX,WAAW,CAAC,QAAQ,YAAY,cAAc,QAAQ,QAAQ;AAAA,EAC9D,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,aAAa,CAAC,EAAE,QAAQ,SAAS,WAAY,MAC3C,OAAO,UAAU,cAAc,UAAU,KAAK,UAAU;AAAA,EAC1D,gBAAgB,CAAC,EAAE,QAAQ,SAAS,WAAY,MAC9C,iBAAiB,UAAU,cAAc,UAAU,KAAK,UAAU;AAAA,EACpE,cAAc,CAAC,EAAE,QAAQ,MAAM,SAAS,YAAY,SAAU,MAC5D,WAAW,UAAU,QAAQ,UAAU,UAAU,KAAK,YAAY,UAAU,CAAC,KAAK;AAAA,EACpF,gBAAgB,CAAC,EAAE,QAAQ,SAAS,WAAY,MAC9C,WAAW,UAAU,UAAU,UAAU,KAAK,YAAY,UAAU,CAAC;AAAA,EACvE,oBAAoB,CAAC,EAAE,QAAQ,SAAS,YAAY,MAAM,WAAY,MACpE,WAAW,UAAU,UAAU,UAAU,KAAK,YAAY,UAAU,CAAC,IAAI,UAAU,KAAK,WAAW,IAAI,CAAC;AAAA,EAC1G,oBAAoB,CAAC,EAAE,QAAQ,SAAS,YAAY,MAAM,WAAY,MACpE,WAAW,UAAU,UAAU,UAAU,KAAK,YAAY,UAAU,CAAC,IAAI,UAAU,KAAK,WAAW,IAAI,CAAC;AAAA,EAC1G,cAAc,CAAC,EAAE,QAAQ,SAAS,WAAY,MAC5C,WAAW,UAAU,UAAU,UAAU,KAAK,YAAY,UAAU,CAAC;AAAA,EACvE,eAAe,CAAC,EAAE,QAAQ,SAAS,WAAY,MAC7C,eAAe,UAAU,cAAc,UAAU,KAAK,UAAU;AAAA,EAClE,cAAc,CAAC,EAAE,MAAM,SAAS,YAAY,KAAM,MAChD,sCAAsC,QAAQ,cAAc,UAAU,KAAK,YAAY,UAAU,CAAC,KAAK;AAAA,EACzG,kBAAkB,CAAC,EAAE,MAAM,SAAS,WAAY,MAC9C,GAAG,QAAQ,UAAU,UAAU,KAAK,UAAU;AAAA,EAChD,cAAc,CAAC,EAAE,SAAS,WAAY,MACpC,GAAG,UAAU,UAAU,KAAK,UAAU;AAAA,EACxC,cAAc,CAAC,EAAE,QAAQ,QAAS,MAChC,WAAW,UAAU;AAAA,EACvB,aAAa,CAAC,EAAE,QAAQ,SAAS,WAAY,MAC3C,SAAS,UAAU,cAAc,UAAU,KAAK,UAAU;AAAA,EAC5D,iBAAiB,CAAC,EAAE,SAAS,WAAY,MACvC,oCAAoC,kBAAkB,YAAY,cAAc,MAAM;AAAA,EACxF,SAAS,CAAC,QAAQ;AAChB,QAAI,CAAG,EAAA,MAAM,SAAS,GAAG,IAAI,IAAI,SAAS,MAAM,KAAK,CAAC;AACtD,QAAI,QAAQ,OAAO;AACjB;AAAA,IACD;AAED,QAAI,CAAC,SAAS;AACZ,UAAI,CAAC,MAAM;AACT;AAAA,MACD;AAED,gBAAU;AACV,aAAO;AAAA,IACR;AAED,QAAI,QAAQ,SAAS,MAAM,GAAG;AAC5B,gBAAU,QAAQ,MAAM,GAAG,EAAE;AAAA,IAC9B;AAED,WAAO,EAAE,MAAM,SAAS,YAAY,IAAI,KAAK,MAAM,CAAC,EAAG;AAAA,EACxD;AAAA,EACD,YAAY,SAAU,UAAU;AAC9B,WAAO,YAAY,UAAU,mBAAmB,QAAQ;AAAA,EACzD;AACH;AAEA,MAAM,YAAY;AAAA,EAChB,WAAW,CAAC,YAAY,QAAQ;AAAA,EAChC,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,UAAU;AAAA,EACV,cAAc,CAAC,EAAE,QAAQ,MAAM,SAAS,YAAY,KAAM,MACxD,WAAW,UAAU,QAAQ,gBAAgB,YAAY,UAAU,KAAK,UAAU;AAAA,EACpF,eAAe,CAAC,EAAE,QAAQ,MAAM,SAAS,WAAY,MACnD,WAAW,UAAU,QAAQ,cAAc,UAAU,KAAK,UAAU;AAAA,EACtE,iBAAiB,CAAC,EAAE,QAAQ,MAAM,SAAS,WAAY,MACrD,WAAW,UAAU,QAAQ,mBAAmB,YAAY,UAAU,KAAK;AAAA,EAC7E,cAAc,CAAC,EAAE,MAAM,QAAS,MAC9B,sBAAsB,QAAQ;AAAA,EAChC,SAAS,CAAC,QAAQ;AAChB,QAAI,CAAG,EAAA,MAAM,SAAS,GAAG,IAAI,IAAI,SAAS,MAAM,KAAK,CAAC;AAGtD,QAAI,CAAC,SAAS,EAAE,SAAS,GAAG,GAAG;AAC7B;AAAA,IACD;AAED,QAAI,WAAW,QAAQ,SAAS,MAAM,GAAG;AACvC,gBAAU,QAAQ,MAAM,GAAG,EAAE;AAAA,IAC9B;AAED,QAAI,CAAC,QAAQ,CAAC,SAAS;AACrB;AAAA,IACD;AAED,WAAO,EAAE,MAAM,SAAS,YAAY,IAAI,KAAK,MAAM,CAAC,EAAG;AAAA,EACxD;AACH;AAEA,WAAW,CAAC,MAAM,IAAI,KAAK,OAAO,QAAQ,KAAK,GAAG;AAChD,QAAM,IAAI,IAAI,OAAO,OAAO,CAAE,GAAE,UAAU,IAAI;AAChD;AAEA,IAAA,UAAiB;","x_google_ignoreList":[0]}