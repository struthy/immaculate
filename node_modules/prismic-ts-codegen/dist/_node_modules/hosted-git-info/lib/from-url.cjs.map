{"version":3,"file":"from-url.cjs","sources":["../../../../node_modules/hosted-git-info/lib/from-url.js"],"sourcesContent":["'use strict'\n\nconst parseUrl = require('./parse-url')\n\n// look for github shorthand inputs, such as npm/cli\nconst isGitHubShorthand = (arg) => {\n  // it cannot contain whitespace before the first #\n  // it cannot start with a / because that's probably an absolute file path\n  // but it must include a slash since repos are username/repository\n  // it cannot start with a . because that's probably a relative file path\n  // it cannot start with an @ because that's a scoped package if it passes the other tests\n  // it cannot contain a : before a # because that tells us that there's a protocol\n  // a second / may not exist before a #\n  const firstHash = arg.indexOf('#')\n  const firstSlash = arg.indexOf('/')\n  const secondSlash = arg.indexOf('/', firstSlash + 1)\n  const firstColon = arg.indexOf(':')\n  const firstSpace = /\\s/.exec(arg)\n  const firstAt = arg.indexOf('@')\n\n  const spaceOnlyAfterHash = !firstSpace || (firstHash > -1 && firstSpace.index > firstHash)\n  const atOnlyAfterHash = firstAt === -1 || (firstHash > -1 && firstAt > firstHash)\n  const colonOnlyAfterHash = firstColon === -1 || (firstHash > -1 && firstColon > firstHash)\n  const secondSlashOnlyAfterHash = secondSlash === -1 || (firstHash > -1 && secondSlash > firstHash)\n  const hasSlash = firstSlash > 0\n  // if a # is found, what we really want to know is that the character\n  // immediately before # is not a /\n  const doesNotEndWithSlash = firstHash > -1 ? arg[firstHash - 1] !== '/' : !arg.endsWith('/')\n  const doesNotStartWithDot = !arg.startsWith('.')\n\n  return spaceOnlyAfterHash && hasSlash && doesNotEndWithSlash &&\n    doesNotStartWithDot && atOnlyAfterHash && colonOnlyAfterHash &&\n    secondSlashOnlyAfterHash\n}\n\nmodule.exports = (giturl, opts, { gitHosts, protocols }) => {\n  if (!giturl) {\n    return\n  }\n\n  const correctedUrl = isGitHubShorthand(giturl) ? `github:${giturl}` : giturl\n  const parsed = parseUrl(correctedUrl, protocols)\n  if (!parsed) {\n    return\n  }\n\n  const gitHostShortcut = gitHosts.byShortcut[parsed.protocol]\n  const gitHostDomain = gitHosts.byDomain[parsed.hostname.startsWith('www.')\n    ? parsed.hostname.slice(4)\n    : parsed.hostname]\n  const gitHostName = gitHostShortcut || gitHostDomain\n  if (!gitHostName) {\n    return\n  }\n\n  const gitHostInfo = gitHosts[gitHostShortcut || gitHostDomain]\n  let auth = null\n  if (protocols[parsed.protocol]?.auth && (parsed.username || parsed.password)) {\n    auth = `${parsed.username}${parsed.password ? ':' + parsed.password : ''}`\n  }\n\n  let committish = null\n  let user = null\n  let project = null\n  let defaultRepresentation = null\n\n  try {\n    if (gitHostShortcut) {\n      let pathname = parsed.pathname.startsWith('/') ? parsed.pathname.slice(1) : parsed.pathname\n      const firstAt = pathname.indexOf('@')\n      // we ignore auth for shortcuts, so just trim it out\n      if (firstAt > -1) {\n        pathname = pathname.slice(firstAt + 1)\n      }\n\n      const lastSlash = pathname.lastIndexOf('/')\n      if (lastSlash > -1) {\n        user = decodeURIComponent(pathname.slice(0, lastSlash))\n        // we want nulls only, never empty strings\n        if (!user) {\n          user = null\n        }\n        project = decodeURIComponent(pathname.slice(lastSlash + 1))\n      } else {\n        project = decodeURIComponent(pathname)\n      }\n\n      if (project.endsWith('.git')) {\n        project = project.slice(0, -4)\n      }\n\n      if (parsed.hash) {\n        committish = decodeURIComponent(parsed.hash.slice(1))\n      }\n\n      defaultRepresentation = 'shortcut'\n    } else {\n      if (!gitHostInfo.protocols.includes(parsed.protocol)) {\n        return\n      }\n\n      const segments = gitHostInfo.extract(parsed)\n      if (!segments) {\n        return\n      }\n\n      user = segments.user && decodeURIComponent(segments.user)\n      project = decodeURIComponent(segments.project)\n      committish = decodeURIComponent(segments.committish)\n      defaultRepresentation = protocols[parsed.protocol]?.name || parsed.protocol.slice(0, -1)\n    }\n  } catch (err) {\n    /* istanbul ignore else */\n    if (err instanceof URIError) {\n      return\n    } else {\n      throw err\n    }\n  }\n\n  return [gitHostName, user, auth, project, committish, defaultRepresentation, opts]\n}\n"],"names":["require$$0"],"mappings":";;;AAEA,MAAM,WAAWA,WAAsB;AAGvC,MAAM,oBAAoB,CAAC,QAAQ;AAQjC,QAAM,YAAY,IAAI,QAAQ,GAAG;AACjC,QAAM,aAAa,IAAI,QAAQ,GAAG;AAClC,QAAM,cAAc,IAAI,QAAQ,KAAK,aAAa,CAAC;AACnD,QAAM,aAAa,IAAI,QAAQ,GAAG;AAClC,QAAM,aAAa,KAAK,KAAK,GAAG;AAChC,QAAM,UAAU,IAAI,QAAQ,GAAG;AAE/B,QAAM,qBAAqB,CAAC,cAAe,YAAY,MAAM,WAAW,QAAQ;AAChF,QAAM,kBAAkB,YAAY,MAAO,YAAY,MAAM,UAAU;AACvE,QAAM,qBAAqB,eAAe,MAAO,YAAY,MAAM,aAAa;AAChF,QAAM,2BAA2B,gBAAgB,MAAO,YAAY,MAAM,cAAc;AACxF,QAAM,WAAW,aAAa;AAG9B,QAAM,sBAAsB,YAAY,KAAK,IAAI,YAAY,CAAC,MAAM,MAAM,CAAC,IAAI,SAAS,GAAG;AAC3F,QAAM,sBAAsB,CAAC,IAAI,WAAW,GAAG;AAE/C,SAAO,sBAAsB,YAAY,uBACvC,uBAAuB,mBAAmB,sBAC1C;AACJ;IAEA,UAAiB,CAAC,QAAQ,MAAM,EAAE,UAAU,UAAS,MAAO;;AAC1D,MAAI,CAAC,QAAQ;AACX;AAAA,EACD;AAED,QAAM,eAAe,kBAAkB,MAAM,IAAI,UAAU,WAAW;AACtE,QAAM,SAAS,SAAS,cAAc,SAAS;AAC/C,MAAI,CAAC,QAAQ;AACX;AAAA,EACD;AAED,QAAM,kBAAkB,SAAS,WAAW,OAAO,QAAQ;AAC3D,QAAM,gBAAgB,SAAS,SAAS,OAAO,SAAS,WAAW,MAAM,IACrE,OAAO,SAAS,MAAM,CAAC,IACvB,OAAO,QAAQ;AACnB,QAAM,cAAc,mBAAmB;AACvC,MAAI,CAAC,aAAa;AAChB;AAAA,EACD;AAED,QAAM,cAAc,SAAS,mBAAmB,aAAa;AAC7D,MAAI,OAAO;AACX,QAAI,eAAU,OAAO,QAAQ,MAAzB,mBAA4B,UAAS,OAAO,YAAY,OAAO,WAAW;AAC5E,WAAO,GAAG,OAAO,WAAW,OAAO,WAAW,MAAM,OAAO,WAAW;AAAA,EACvE;AAED,MAAI,aAAa;AACjB,MAAI,OAAO;AACX,MAAI,UAAU;AACd,MAAI,wBAAwB;AAE5B,MAAI;AACF,QAAI,iBAAiB;AACnB,UAAI,WAAW,OAAO,SAAS,WAAW,GAAG,IAAI,OAAO,SAAS,MAAM,CAAC,IAAI,OAAO;AACnF,YAAM,UAAU,SAAS,QAAQ,GAAG;AAEpC,UAAI,UAAU,IAAI;AAChB,mBAAW,SAAS,MAAM,UAAU,CAAC;AAAA,MACtC;AAED,YAAM,YAAY,SAAS,YAAY,GAAG;AAC1C,UAAI,YAAY,IAAI;AAClB,eAAO,mBAAmB,SAAS,MAAM,GAAG,SAAS,CAAC;AAEtD,YAAI,CAAC,MAAM;AACT,iBAAO;AAAA,QACR;AACD,kBAAU,mBAAmB,SAAS,MAAM,YAAY,CAAC,CAAC;AAAA,MAClE,OAAa;AACL,kBAAU,mBAAmB,QAAQ;AAAA,MACtC;AAED,UAAI,QAAQ,SAAS,MAAM,GAAG;AAC5B,kBAAU,QAAQ,MAAM,GAAG,EAAE;AAAA,MAC9B;AAED,UAAI,OAAO,MAAM;AACf,qBAAa,mBAAmB,OAAO,KAAK,MAAM,CAAC,CAAC;AAAA,MACrD;AAED,8BAAwB;AAAA,IAC9B,OAAW;AACL,UAAI,CAAC,YAAY,UAAU,SAAS,OAAO,QAAQ,GAAG;AACpD;AAAA,MACD;AAED,YAAM,WAAW,YAAY,QAAQ,MAAM;AAC3C,UAAI,CAAC,UAAU;AACb;AAAA,MACD;AAED,aAAO,SAAS,QAAQ,mBAAmB,SAAS,IAAI;AACxD,gBAAU,mBAAmB,SAAS,OAAO;AAC7C,mBAAa,mBAAmB,SAAS,UAAU;AACnD,gCAAwB,eAAU,OAAO,QAAQ,MAAzB,mBAA4B,SAAQ,OAAO,SAAS,MAAM,GAAG,EAAE;AAAA,IACxF;AAAA,EACF,SAAQ,KAAP;AAEA,QAAI,eAAe,UAAU;AAC3B;AAAA,IACN,OAAW;AACL,YAAM;AAAA,IACP;AAAA,EACF;AAED,SAAO,CAAC,aAAa,MAAM,MAAM,SAAS,YAAY,uBAAuB,IAAI;AACnF;;","x_google_ignoreList":[0]}