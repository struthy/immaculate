"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const index = require("../spdx-license-ids/index.json.cjs");
const deprecated = require("../spdx-license-ids/deprecated.json.cjs");
const index$1 = require("../spdx-exceptions/index.json.cjs");
var licenses = [].concat(index).concat(deprecated);
var exceptions = index$1;
var scan = function(source) {
  var index2 = 0;
  function hasMore() {
    return index2 < source.length;
  }
  function read(value) {
    if (value instanceof RegExp) {
      var chars = source.slice(index2);
      var match = chars.match(value);
      if (match) {
        index2 += match[0].length;
        return match[0];
      }
    } else {
      if (source.indexOf(value, index2) === index2) {
        index2 += value.length;
        return value;
      }
    }
  }
  function skipWhitespace() {
    read(/[ ]*/);
  }
  function operator() {
    var string;
    var possibilities = ["WITH", "AND", "OR", "(", ")", ":", "+"];
    for (var i = 0; i < possibilities.length; i++) {
      string = read(possibilities[i]);
      if (string) {
        break;
      }
    }
    if (string === "+" && index2 > 1 && source[index2 - 2] === " ") {
      throw new Error("Space before `+`");
    }
    return string && {
      type: "OPERATOR",
      string
    };
  }
  function idstring() {
    return read(/[A-Za-z0-9-.]+/);
  }
  function expectIdstring() {
    var string = idstring();
    if (!string) {
      throw new Error("Expected idstring at offset " + index2);
    }
    return string;
  }
  function documentRef() {
    if (read("DocumentRef-")) {
      var string = expectIdstring();
      return { type: "DOCUMENTREF", string };
    }
  }
  function licenseRef() {
    if (read("LicenseRef-")) {
      var string = expectIdstring();
      return { type: "LICENSEREF", string };
    }
  }
  function identifier() {
    var begin = index2;
    var string = idstring();
    if (licenses.indexOf(string) !== -1) {
      return {
        type: "LICENSE",
        string
      };
    } else if (exceptions.indexOf(string) !== -1) {
      return {
        type: "EXCEPTION",
        string
      };
    }
    index2 = begin;
  }
  function parseToken() {
    return operator() || documentRef() || licenseRef() || identifier();
  }
  var tokens = [];
  while (hasMore()) {
    skipWhitespace();
    if (!hasMore()) {
      break;
    }
    var token = parseToken();
    if (!token) {
      throw new Error("Unexpected `" + source[index2] + "` at offset " + index2);
    }
    tokens.push(token);
  }
  return tokens;
};
exports.scan = scan;
//# sourceMappingURL=scan.cjs.map
