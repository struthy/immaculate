{"version":3,"file":"parse.js","sources":["../../../node_modules/spdx-expression-parse/parse.js"],"sourcesContent":["'use strict'\n\n// The ABNF grammar in the spec is totally ambiguous.\n//\n// This parser follows the operator precedence defined in the\n// `Order of Precedence and Parentheses` section.\n\nmodule.exports = function (tokens) {\n  var index = 0\n\n  function hasMore () {\n    return index < tokens.length\n  }\n\n  function token () {\n    return hasMore() ? tokens[index] : null\n  }\n\n  function next () {\n    if (!hasMore()) {\n      throw new Error()\n    }\n    index++\n  }\n\n  function parseOperator (operator) {\n    var t = token()\n    if (t && t.type === 'OPERATOR' && operator === t.string) {\n      next()\n      return t.string\n    }\n  }\n\n  function parseWith () {\n    if (parseOperator('WITH')) {\n      var t = token()\n      if (t && t.type === 'EXCEPTION') {\n        next()\n        return t.string\n      }\n      throw new Error('Expected exception after `WITH`')\n    }\n  }\n\n  function parseLicenseRef () {\n    // TODO: Actually, everything is concatenated into one string\n    // for backward-compatibility but it could be better to return\n    // a nice structure.\n    var begin = index\n    var string = ''\n    var t = token()\n    if (t.type === 'DOCUMENTREF') {\n      next()\n      string += 'DocumentRef-' + t.string + ':'\n      if (!parseOperator(':')) {\n        throw new Error('Expected `:` after `DocumentRef-...`')\n      }\n    }\n    t = token()\n    if (t.type === 'LICENSEREF') {\n      next()\n      string += 'LicenseRef-' + t.string\n      return { license: string }\n    }\n    index = begin\n  }\n\n  function parseLicense () {\n    var t = token()\n    if (t && t.type === 'LICENSE') {\n      next()\n      var node = { license: t.string }\n      if (parseOperator('+')) {\n        node.plus = true\n      }\n      var exception = parseWith()\n      if (exception) {\n        node.exception = exception\n      }\n      return node\n    }\n  }\n\n  function parseParenthesizedExpression () {\n    var left = parseOperator('(')\n    if (!left) {\n      return\n    }\n\n    var expr = parseExpression()\n\n    if (!parseOperator(')')) {\n      throw new Error('Expected `)`')\n    }\n\n    return expr\n  }\n\n  function parseAtom () {\n    return (\n      parseParenthesizedExpression() ||\n      parseLicenseRef() ||\n      parseLicense()\n    )\n  }\n\n  function makeBinaryOpParser (operator, nextParser) {\n    return function parseBinaryOp () {\n      var left = nextParser()\n      if (!left) {\n        return\n      }\n\n      if (!parseOperator(operator)) {\n        return left\n      }\n\n      var right = parseBinaryOp()\n      if (!right) {\n        throw new Error('Expected expression')\n      }\n      return {\n        left: left,\n        conjunction: operator.toLowerCase(),\n        right: right\n      }\n    }\n  }\n\n  var parseAnd = makeBinaryOpParser('AND', parseAtom)\n  var parseExpression = makeBinaryOpParser('OR', parseAnd)\n\n  var node = parseExpression()\n  if (!node || hasMore()) {\n    throw new Error('Syntax error')\n  }\n  return node\n}\n"],"names":["node"],"mappings":"IAOA,QAAiB,SAAU,QAAQ;AACjC,MAAI,QAAQ;AAEZ,WAAS,UAAW;AAClB,WAAO,QAAQ,OAAO;AAAA,EACvB;AAED,WAAS,QAAS;AAChB,WAAO,QAAS,IAAG,OAAO,KAAK,IAAI;AAAA,EACpC;AAED,WAAS,OAAQ;AACf,QAAI,CAAC,QAAO,GAAI;AACd,YAAM,IAAI,MAAO;AAAA,IAClB;AACD;AAAA,EACD;AAED,WAAS,cAAe,UAAU;AAChC,QAAI,IAAI,MAAO;AACf,QAAI,KAAK,EAAE,SAAS,cAAc,aAAa,EAAE,QAAQ;AACvD,WAAM;AACN,aAAO,EAAE;AAAA,IACV;AAAA,EACF;AAED,WAAS,YAAa;AACpB,QAAI,cAAc,MAAM,GAAG;AACzB,UAAI,IAAI,MAAO;AACf,UAAI,KAAK,EAAE,SAAS,aAAa;AAC/B,aAAM;AACN,eAAO,EAAE;AAAA,MACV;AACD,YAAM,IAAI,MAAM,iCAAiC;AAAA,IAClD;AAAA,EACF;AAED,WAAS,kBAAmB;AAI1B,QAAI,QAAQ;AACZ,QAAI,SAAS;AACb,QAAI,IAAI,MAAO;AACf,QAAI,EAAE,SAAS,eAAe;AAC5B,WAAM;AACN,gBAAU,iBAAiB,EAAE,SAAS;AACtC,UAAI,CAAC,cAAc,GAAG,GAAG;AACvB,cAAM,IAAI,MAAM,sCAAsC;AAAA,MACvD;AAAA,IACF;AACD,QAAI,MAAO;AACX,QAAI,EAAE,SAAS,cAAc;AAC3B,WAAM;AACN,gBAAU,gBAAgB,EAAE;AAC5B,aAAO,EAAE,SAAS,OAAQ;AAAA,IAC3B;AACD,YAAQ;AAAA,EACT;AAED,WAAS,eAAgB;AACvB,QAAI,IAAI,MAAO;AACf,QAAI,KAAK,EAAE,SAAS,WAAW;AAC7B,WAAM;AACN,UAAIA,QAAO,EAAE,SAAS,EAAE,OAAQ;AAChC,UAAI,cAAc,GAAG,GAAG;AACtB,QAAAA,MAAK,OAAO;AAAA,MACb;AACD,UAAI,YAAY,UAAW;AAC3B,UAAI,WAAW;AACb,QAAAA,MAAK,YAAY;AAAA,MAClB;AACD,aAAOA;AAAA,IACR;AAAA,EACF;AAED,WAAS,+BAAgC;AACvC,QAAI,OAAO,cAAc,GAAG;AAC5B,QAAI,CAAC,MAAM;AACT;AAAA,IACD;AAED,QAAI,OAAO,gBAAiB;AAE5B,QAAI,CAAC,cAAc,GAAG,GAAG;AACvB,YAAM,IAAI,MAAM,cAAc;AAAA,IAC/B;AAED,WAAO;AAAA,EACR;AAED,WAAS,YAAa;AACpB,WACE,6BAA8B,KAC9B,gBAAiB,KACjB,aAAc;AAAA,EAEjB;AAED,WAAS,mBAAoB,UAAU,YAAY;AACjD,WAAO,SAAS,gBAAiB;AAC/B,UAAI,OAAO,WAAY;AACvB,UAAI,CAAC,MAAM;AACT;AAAA,MACD;AAED,UAAI,CAAC,cAAc,QAAQ,GAAG;AAC5B,eAAO;AAAA,MACR;AAED,UAAI,QAAQ,cAAe;AAC3B,UAAI,CAAC,OAAO;AACV,cAAM,IAAI,MAAM,qBAAqB;AAAA,MACtC;AACD,aAAO;AAAA,QACL;AAAA,QACA,aAAa,SAAS,YAAa;AAAA,QACnC;AAAA,MACD;AAAA,IACF;AAAA,EACF;AAED,MAAI,WAAW,mBAAmB,OAAO,SAAS;AAClD,MAAI,kBAAkB,mBAAmB,MAAM,QAAQ;AAEvD,MAAI,OAAO,gBAAiB;AAC5B,MAAI,CAAC,QAAQ,WAAW;AACtB,UAAM,IAAI,MAAM,cAAc;AAAA,EAC/B;AACD,SAAO;AACT;","x_google_ignoreList":[0]}