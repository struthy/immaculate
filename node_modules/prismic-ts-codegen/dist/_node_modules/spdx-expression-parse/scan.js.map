{"version":3,"file":"scan.js","sources":["../../../node_modules/spdx-expression-parse/scan.js"],"sourcesContent":["'use strict'\n\nvar licenses = []\n  .concat(require('spdx-license-ids'))\n  .concat(require('spdx-license-ids/deprecated'))\nvar exceptions = require('spdx-exceptions')\n\nmodule.exports = function (source) {\n  var index = 0\n\n  function hasMore () {\n    return index < source.length\n  }\n\n  // `value` can be a regexp or a string.\n  // If it is recognized, the matching source string is returned and\n  // the index is incremented. Otherwise `undefined` is returned.\n  function read (value) {\n    if (value instanceof RegExp) {\n      var chars = source.slice(index)\n      var match = chars.match(value)\n      if (match) {\n        index += match[0].length\n        return match[0]\n      }\n    } else {\n      if (source.indexOf(value, index) === index) {\n        index += value.length\n        return value\n      }\n    }\n  }\n\n  function skipWhitespace () {\n    read(/[ ]*/)\n  }\n\n  function operator () {\n    var string\n    var possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+']\n    for (var i = 0; i < possibilities.length; i++) {\n      string = read(possibilities[i])\n      if (string) {\n        break\n      }\n    }\n\n    if (string === '+' && index > 1 && source[index - 2] === ' ') {\n      throw new Error('Space before `+`')\n    }\n\n    return string && {\n      type: 'OPERATOR',\n      string: string\n    }\n  }\n\n  function idstring () {\n    return read(/[A-Za-z0-9-.]+/)\n  }\n\n  function expectIdstring () {\n    var string = idstring()\n    if (!string) {\n      throw new Error('Expected idstring at offset ' + index)\n    }\n    return string\n  }\n\n  function documentRef () {\n    if (read('DocumentRef-')) {\n      var string = expectIdstring()\n      return { type: 'DOCUMENTREF', string: string }\n    }\n  }\n\n  function licenseRef () {\n    if (read('LicenseRef-')) {\n      var string = expectIdstring()\n      return { type: 'LICENSEREF', string: string }\n    }\n  }\n\n  function identifier () {\n    var begin = index\n    var string = idstring()\n\n    if (licenses.indexOf(string) !== -1) {\n      return {\n        type: 'LICENSE',\n        string: string\n      }\n    } else if (exceptions.indexOf(string) !== -1) {\n      return {\n        type: 'EXCEPTION',\n        string: string\n      }\n    }\n\n    index = begin\n  }\n\n  // Tries to read the next token. Returns `undefined` if no token is\n  // recognized.\n  function parseToken () {\n    // Ordering matters\n    return (\n      operator() ||\n      documentRef() ||\n      licenseRef() ||\n      identifier()\n    )\n  }\n\n  var tokens = []\n  while (hasMore()) {\n    skipWhitespace()\n    if (!hasMore()) {\n      break\n    }\n\n    var token = parseToken()\n    if (!token) {\n      throw new Error('Unexpected `' + source[index] +\n                      '` at offset ' + index)\n    }\n\n    tokens.push(token)\n  }\n  return tokens\n}\n"],"names":["require$$0","require$$1"],"mappings":";;;AAEA,IAAI,WAAW,CAAE,EACd,OAAOA,UAA2B,EAClC,OAAOC,YAAsC;AAChD,IAAI,aAAa;IAEjB,OAAiB,SAAU,QAAQ;AACjC,MAAI,QAAQ;AAEZ,WAAS,UAAW;AAClB,WAAO,QAAQ,OAAO;AAAA,EACvB;AAKD,WAAS,KAAM,OAAO;AACpB,QAAI,iBAAiB,QAAQ;AAC3B,UAAI,QAAQ,OAAO,MAAM,KAAK;AAC9B,UAAI,QAAQ,MAAM,MAAM,KAAK;AAC7B,UAAI,OAAO;AACT,iBAAS,MAAM,CAAC,EAAE;AAClB,eAAO,MAAM,CAAC;AAAA,MACf;AAAA,IACP,OAAW;AACL,UAAI,OAAO,QAAQ,OAAO,KAAK,MAAM,OAAO;AAC1C,iBAAS,MAAM;AACf,eAAO;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAED,WAAS,iBAAkB;AACzB,SAAK,MAAM;AAAA,EACZ;AAED,WAAS,WAAY;AACnB,QAAI;AACJ,QAAI,gBAAgB,CAAC,QAAQ,OAAO,MAAM,KAAK,KAAK,KAAK,GAAG;AAC5D,aAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC7C,eAAS,KAAK,cAAc,CAAC,CAAC;AAC9B,UAAI,QAAQ;AACV;AAAA,MACD;AAAA,IACF;AAED,QAAI,WAAW,OAAO,QAAQ,KAAK,OAAO,QAAQ,CAAC,MAAM,KAAK;AAC5D,YAAM,IAAI,MAAM,kBAAkB;AAAA,IACnC;AAED,WAAO,UAAU;AAAA,MACf,MAAM;AAAA,MACN;AAAA,IACD;AAAA,EACF;AAED,WAAS,WAAY;AACnB,WAAO,KAAK,gBAAgB;AAAA,EAC7B;AAED,WAAS,iBAAkB;AACzB,QAAI,SAAS,SAAU;AACvB,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,iCAAiC,KAAK;AAAA,IACvD;AACD,WAAO;AAAA,EACR;AAED,WAAS,cAAe;AACtB,QAAI,KAAK,cAAc,GAAG;AACxB,UAAI,SAAS,eAAgB;AAC7B,aAAO,EAAE,MAAM,eAAe,OAAgB;AAAA,IAC/C;AAAA,EACF;AAED,WAAS,aAAc;AACrB,QAAI,KAAK,aAAa,GAAG;AACvB,UAAI,SAAS,eAAgB;AAC7B,aAAO,EAAE,MAAM,cAAc,OAAgB;AAAA,IAC9C;AAAA,EACF;AAED,WAAS,aAAc;AACrB,QAAI,QAAQ;AACZ,QAAI,SAAS,SAAU;AAEvB,QAAI,SAAS,QAAQ,MAAM,MAAM,IAAI;AACnC,aAAO;AAAA,QACL,MAAM;AAAA,QACN;AAAA,MACD;AAAA,IACF,WAAU,WAAW,QAAQ,MAAM,MAAM,IAAI;AAC5C,aAAO;AAAA,QACL,MAAM;AAAA,QACN;AAAA,MACD;AAAA,IACF;AAED,YAAQ;AAAA,EACT;AAID,WAAS,aAAc;AAErB,WACE,SAAU,KACV,YAAa,KACb,WAAY,KACZ,WAAY;AAAA,EAEf;AAED,MAAI,SAAS,CAAE;AACf,SAAO,QAAO,GAAI;AAChB,mBAAgB;AAChB,QAAI,CAAC,QAAO,GAAI;AACd;AAAA,IACD;AAED,QAAI,QAAQ,WAAY;AACxB,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MAAM,iBAAiB,OAAO,KAAK,IAC7B,iBAAiB,KAAK;AAAA,IACvC;AAED,WAAO,KAAK,KAAK;AAAA,EAClB;AACD,SAAO;AACT;","x_google_ignoreList":[0]}