{"version":3,"file":"index.cjs","sources":["../../../../../node_modules/read-pkg/node_modules/lru-cache/index.js"],"sourcesContent":["'use strict'\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = require('yallist')\n\nconst MAX = Symbol('max')\nconst LENGTH = Symbol('length')\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\nconst ALLOW_STALE = Symbol('allowStale')\nconst MAX_AGE = Symbol('maxAge')\nconst DISPOSE = Symbol('dispose')\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\nconst LRU_LIST = Symbol('lruList')\nconst CACHE = Symbol('cache')\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\n\nconst naiveLength = () => 1\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor (options) {\n    if (typeof options === 'number')\n      options = { max: options }\n\n    if (!options)\n      options = {}\n\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n      throw new TypeError('max must be a non-negative number')\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity\n\n    const lc = options.length || naiveLength\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\n    this[ALLOW_STALE] = options.stale || false\n    if (options.maxAge && typeof options.maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n    this[MAX_AGE] = options.maxAge || 0\n    this[DISPOSE] = options.dispose\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\n    this.reset()\n  }\n\n  // resize the cache when the max changes.\n  set max (mL) {\n    if (typeof mL !== 'number' || mL < 0)\n      throw new TypeError('max must be a non-negative number')\n\n    this[MAX] = mL || Infinity\n    trim(this)\n  }\n  get max () {\n    return this[MAX]\n  }\n\n  set allowStale (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  }\n  get allowStale () {\n    return this[ALLOW_STALE]\n  }\n\n  set maxAge (mA) {\n    if (typeof mA !== 'number')\n      throw new TypeError('maxAge must be a non-negative number')\n\n    this[MAX_AGE] = mA\n    trim(this)\n  }\n  get maxAge () {\n    return this[MAX_AGE]\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator (lC) {\n    if (typeof lC !== 'function')\n      lC = naiveLength\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      })\n    }\n    trim(this)\n  }\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n  get length () { return this[LENGTH] }\n  get itemCount () { return this[LRU_LIST].length }\n\n  rforEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev\n      forEachStep(this, fn, walker, thisp)\n      walker = prev\n    }\n  }\n\n  forEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next\n      forEachStep(this, fn, walker, thisp)\n      walker = next\n    }\n  }\n\n  keys () {\n    return this[LRU_LIST].toArray().map(k => k.key)\n  }\n\n  values () {\n    return this[LRU_LIST].toArray().map(k => k.value)\n  }\n\n  reset () {\n    if (this[DISPOSE] &&\n        this[LRU_LIST] &&\n        this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\n    }\n\n    this[CACHE] = new Map() // hash of items by key\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\n    this[LENGTH] = 0 // length of items in the list\n  }\n\n  dump () {\n    return this[LRU_LIST].map(hit =>\n      isStale(this, hit) ? false : {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }).toArray().filter(h => h)\n  }\n\n  dumpLru () {\n    return this[LRU_LIST]\n  }\n\n  set (key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE]\n\n    if (maxAge && typeof maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n\n    const now = maxAge ? Date.now() : 0\n    const len = this[LENGTH_CALCULATOR](value, key)\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key))\n        return false\n      }\n\n      const node = this[CACHE].get(key)\n      const item = node.value\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET])\n          this[DISPOSE](key, item.value)\n      }\n\n      item.now = now\n      item.maxAge = maxAge\n      item.value = value\n      this[LENGTH] += len - item.length\n      item.length = len\n      this.get(key)\n      trim(this)\n      return true\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE])\n        this[DISPOSE](key, value)\n\n      return false\n    }\n\n    this[LENGTH] += hit.length\n    this[LRU_LIST].unshift(hit)\n    this[CACHE].set(key, this[LRU_LIST].head)\n    trim(this)\n    return true\n  }\n\n  has (key) {\n    if (!this[CACHE].has(key)) return false\n    const hit = this[CACHE].get(key).value\n    return !isStale(this, hit)\n  }\n\n  get (key) {\n    return get(this, key, true)\n  }\n\n  peek (key) {\n    return get(this, key, false)\n  }\n\n  pop () {\n    const node = this[LRU_LIST].tail\n    if (!node)\n      return null\n\n    del(this, node)\n    return node.value\n  }\n\n  del (key) {\n    del(this, this[CACHE].get(key))\n  }\n\n  load (arr) {\n    // reset the cache\n    this.reset()\n\n    const now = Date.now()\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l]\n      const expiresAt = hit.e || 0\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v)\n      else {\n        const maxAge = expiresAt - now\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge)\n        }\n      }\n    }\n  }\n\n  prune () {\n    this[CACHE].forEach((value, key) => get(this, key, false))\n  }\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key)\n  if (node) {\n    const hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE])\n        return undefined\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET])\n          node.value.now = Date.now()\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    return hit.value\n  }\n}\n\nconst isStale = (self, hit) => {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n    return false\n\n  const diff = Date.now() - hit.now\n  return hit.maxAge ? diff > hit.maxAge\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\n}\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value\n    if (self[DISPOSE])\n      self[DISPOSE](hit.key, hit.value)\n\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\nclass Entry {\n  constructor (key, value, length, now, maxAge) {\n    this.key = key\n    this.value = value\n    this.length = length\n    this.now = now\n    this.maxAge = maxAge || 0\n  }\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE])\n      hit = undefined\n  }\n  if (hit)\n    fn.call(thisp, hit.value, hit.key, self)\n}\n\nmodule.exports = LRUCache\n"],"names":["require$$0"],"mappings":"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","x_google_ignoreList":[0]}