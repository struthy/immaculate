{"version":3,"file":"index.cjs","sources":["../../../../../node_modules/read-pkg-up/node_modules/find-up/index.js"],"sourcesContent":["import path from 'node:path';\nimport {fileURLToPath} from 'node:url';\nimport {locatePath, locatePathSync} from 'locate-path';\n\nconst toPath = urlOrPath => urlOrPath instanceof URL ? fileURLToPath(urlOrPath) : urlOrPath;\n\nexport const findUpStop = Symbol('findUpStop');\n\nexport async function findUpMultiple(name, options = {}) {\n\tlet directory = path.resolve(toPath(options.cwd) || '');\n\tconst {root} = path.parse(directory);\n\tconst stopAt = path.resolve(directory, options.stopAt || root);\n\tconst limit = options.limit || Number.POSITIVE_INFINITY;\n\tconst paths = [name].flat();\n\n\tconst runMatcher = async locateOptions => {\n\t\tif (typeof name !== 'function') {\n\t\t\treturn locatePath(paths, locateOptions);\n\t\t}\n\n\t\tconst foundPath = await name(locateOptions.cwd);\n\t\tif (typeof foundPath === 'string') {\n\t\t\treturn locatePath([foundPath], locateOptions);\n\t\t}\n\n\t\treturn foundPath;\n\t};\n\n\tconst matches = [];\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) {\n\t\t// eslint-disable-next-line no-await-in-loop\n\t\tconst foundPath = await runMatcher({...options, cwd: directory});\n\n\t\tif (foundPath === findUpStop) {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (foundPath) {\n\t\t\tmatches.push(path.resolve(directory, foundPath));\n\t\t}\n\n\t\tif (directory === stopAt || matches.length >= limit) {\n\t\t\tbreak;\n\t\t}\n\n\t\tdirectory = path.dirname(directory);\n\t}\n\n\treturn matches;\n}\n\nexport function findUpMultipleSync(name, options = {}) {\n\tlet directory = path.resolve(toPath(options.cwd) || '');\n\tconst {root} = path.parse(directory);\n\tconst stopAt = options.stopAt || root;\n\tconst limit = options.limit || Number.POSITIVE_INFINITY;\n\tconst paths = [name].flat();\n\n\tconst runMatcher = locateOptions => {\n\t\tif (typeof name !== 'function') {\n\t\t\treturn locatePathSync(paths, locateOptions);\n\t\t}\n\n\t\tconst foundPath = name(locateOptions.cwd);\n\t\tif (typeof foundPath === 'string') {\n\t\t\treturn locatePathSync([foundPath], locateOptions);\n\t\t}\n\n\t\treturn foundPath;\n\t};\n\n\tconst matches = [];\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) {\n\t\tconst foundPath = runMatcher({...options, cwd: directory});\n\n\t\tif (foundPath === findUpStop) {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (foundPath) {\n\t\t\tmatches.push(path.resolve(directory, foundPath));\n\t\t}\n\n\t\tif (directory === stopAt || matches.length >= limit) {\n\t\t\tbreak;\n\t\t}\n\n\t\tdirectory = path.dirname(directory);\n\t}\n\n\treturn matches;\n}\n\nexport async function findUp(name, options = {}) {\n\tconst matches = await findUpMultiple(name, {...options, limit: 1});\n\treturn matches[0];\n}\n\nexport function findUpSync(name, options = {}) {\n\tconst matches = findUpMultipleSync(name, {...options, limit: 1});\n\treturn matches[0];\n}\n\nexport {\n\tpathExists,\n\tpathExistsSync,\n} from 'path-exists';\n"],"names":["fileURLToPath","locatePathSync"],"mappings":";;;;;;AAIA,MAAM,SAAS,eAAa,qBAAqB,MAAMA,SAAAA,cAAc,SAAS,IAAI;AAEtE,MAAC,aAAa,OAAO,YAAY;AA8CtC,SAAS,mBAAmB,MAAM,UAAU,IAAI;AACtD,MAAI,YAAY,KAAK,QAAQ,OAAO,QAAQ,GAAG,KAAK,EAAE;AACtD,QAAM,EAAC,KAAI,IAAI,KAAK,MAAM,SAAS;AACnC,QAAM,SAAS,QAAQ,UAAU;AACjC,QAAM,QAAQ,QAAQ,SAAS,OAAO;AACtC,QAAM,QAAQ,CAAC,IAAI,EAAE,KAAI;AAEzB,QAAM,aAAa,mBAAiB;AACnC,QAAI,OAAO,SAAS,YAAY;AAC/B,aAAOC,MAAc,eAAC,OAAO,aAAa;AAAA,IAC1C;AAED,UAAM,YAAY,KAAK,cAAc,GAAG;AACxC,QAAI,OAAO,cAAc,UAAU;AAClC,aAAOA,qBAAe,CAAC,SAAS,GAAG,aAAa;AAAA,IAChD;AAED,WAAO;AAAA,EACT;AAEC,QAAM,UAAU,CAAA;AAEhB,SAAO,MAAM;AACZ,UAAM,YAAY,WAAW,EAAC,GAAG,SAAS,KAAK,UAAS,CAAC;AAEzD,QAAI,cAAc,YAAY;AAC7B;AAAA,IACA;AAED,QAAI,WAAW;AACd,cAAQ,KAAK,KAAK,QAAQ,WAAW,SAAS,CAAC;AAAA,IAC/C;AAED,QAAI,cAAc,UAAU,QAAQ,UAAU,OAAO;AACpD;AAAA,IACA;AAED,gBAAY,KAAK,QAAQ,SAAS;AAAA,EAClC;AAED,SAAO;AACR;AAOO,SAAS,WAAW,MAAM,UAAU,IAAI;AAC9C,QAAM,UAAU,mBAAmB,MAAM,EAAC,GAAG,SAAS,OAAO,EAAC,CAAC;AAC/D,SAAO,QAAQ,CAAC;AACjB;;;;","x_google_ignoreList":[0]}