{"version":3,"file":"index.js","sources":["../../../node_modules/json-parse-even-better-errors/index.js"],"sourcesContent":["'use strict'\n\nconst hexify = char => {\n  const h = char.charCodeAt(0).toString(16).toUpperCase()\n  return '0x' + (h.length % 2 ? '0' : '') + h\n}\n\nconst parseError = (e, txt, context) => {\n  if (!txt) {\n    return {\n      message: e.message + ' while parsing empty string',\n      position: 0,\n    }\n  }\n  const badToken = e.message.match(/^Unexpected token (.) .*position\\s+(\\d+)/i)\n  const errIdx = badToken ? +badToken[2]\n    : e.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1\n    : null\n\n  const msg = badToken ? e.message.replace(/^Unexpected token ./, `Unexpected token ${\n      JSON.stringify(badToken[1])\n    } (${hexify(badToken[1])})`)\n    : e.message\n\n  if (errIdx !== null && errIdx !== undefined) {\n    const start = errIdx <= context ? 0\n      : errIdx - context\n\n    const end = errIdx + context >= txt.length ? txt.length\n      : errIdx + context\n\n    const slice = (start === 0 ? '' : '...') +\n      txt.slice(start, end) +\n      (end === txt.length ? '' : '...')\n\n    const near = txt === slice ? '' : 'near '\n\n    return {\n      message: msg + ` while parsing ${near}${JSON.stringify(slice)}`,\n      position: errIdx,\n    }\n  } else {\n    return {\n      message: msg + ` while parsing '${txt.slice(0, context * 2)}'`,\n      position: 0,\n    }\n  }\n}\n\nclass JSONParseError extends SyntaxError {\n  constructor (er, txt, context, caller) {\n    context = context || 20\n    const metadata = parseError(er, txt, context)\n    super(metadata.message)\n    Object.assign(this, metadata)\n    this.code = 'EJSONPARSE'\n    this.systemError = er\n    Error.captureStackTrace(this, caller || this.constructor)\n  }\n  get name () { return this.constructor.name }\n  set name (n) {}\n  get [Symbol.toStringTag] () { return this.constructor.name }\n}\n\nconst kIndent = Symbol.for('indent')\nconst kNewline = Symbol.for('newline')\n// only respect indentation if we got a line break, otherwise squash it\n// things other than objects and arrays aren't indented, so ignore those\n// Important: in both of these regexps, the $1 capture group is the newline\n// or undefined, and the $2 capture group is the indent, or undefined.\nconst formatRE = /^\\s*[{\\[]((?:\\r?\\n)+)([\\s\\t]*)/\nconst emptyRE = /^(?:\\{\\}|\\[\\])((?:\\r?\\n)+)?$/\n\nconst parseJson = (txt, reviver, context) => {\n  const parseText = stripBOM(txt)\n  context = context || 20\n  try {\n    // get the indentation so that we can save it back nicely\n    // if the file starts with {\" then we have an indent of '', ie, none\n    // otherwise, pick the indentation of the next line after the first \\n\n    // If the pattern doesn't match, then it means no indentation.\n    // JSON.stringify ignores symbols, so this is reasonably safe.\n    // if the string is '{}' or '[]', then use the default 2-space indent.\n    const [, newline = '\\n', indent = '  '] = parseText.match(emptyRE) ||\n      parseText.match(formatRE) ||\n      [, '', '']\n\n    const result = JSON.parse(parseText, reviver)\n    if (result && typeof result === 'object') {\n      result[kNewline] = newline\n      result[kIndent] = indent\n    }\n    return result\n  } catch (e) {\n    if (typeof txt !== 'string' && !Buffer.isBuffer(txt)) {\n      const isEmptyArray = Array.isArray(txt) && txt.length === 0\n      throw Object.assign(new TypeError(\n        `Cannot parse ${isEmptyArray ? 'an empty array' : String(txt)}`\n      ), {\n        code: 'EJSONPARSE',\n        systemError: e,\n      })\n    }\n\n    throw new JSONParseError(e, parseText, context, parseJson)\n  }\n}\n\n// Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n// because the buffer-to-string conversion in `fs.readFileSync()`\n// translates it to FEFF, the UTF-16 BOM.\nconst stripBOM = txt => String(txt).replace(/^\\uFEFF/, '')\n\nmodule.exports = parseJson\nparseJson.JSONParseError = JSONParseError\n\nparseJson.noExceptions = (txt, reviver) => {\n  try {\n    return JSON.parse(stripBOM(txt), reviver)\n  } catch (e) {}\n}\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}