{"version":3,"file":"loadConfig.js","sources":["../../../src/cli/loadConfig.ts"],"sourcesContent":["import { existsSync } from \"fs\";\nimport _jiti from \"jiti\";\nimport { resolve as resolvePath } from \"path\";\n\nimport type { Config } from \"./types\";\n\nconst jiti = _jiti(process.cwd());\n\nconst loadModuleWithJiti = <TModule>(id: string): TModule => {\n\tconst mod = jiti(id) as TModule | { default: TModule };\n\n\treturn typeof mod === \"object\" && mod !== null && \"default\" in mod\n\t\t? mod.default\n\t\t: mod;\n};\n\nconst DEFAULT_CONFIG_PATHS = [\n\t\"prismicCodegen.config.ts\",\n\t\"prismicCodegen.config.js\",\n];\n\ntype LoadConfigConfig = {\n\tpath?: string;\n};\n\nexport const loadConfig = (config: LoadConfigConfig): Config => {\n\tif (config.path) {\n\t\tif (existsSync(config.path)) {\n\t\t\treturn loadModuleWithJiti(resolvePath(config.path));\n\t\t} else {\n\t\t\tthrow new Error(`Config file does not exist: ${config.path}`);\n\t\t}\n\t} else {\n\t\tfor (const configPath of DEFAULT_CONFIG_PATHS) {\n\t\t\tif (existsSync(configPath)) {\n\t\t\t\treturn loadModuleWithJiti(resolvePath(configPath));\n\t\t\t}\n\t\t}\n\t}\n\n\t// If no config file exists, an empty config is returned.\n\treturn {};\n};\n"],"names":["resolvePath"],"mappings":";;;AAMA,MAAM,OAAO,MAAM,QAAQ,IAAK,CAAA;AAEhC,MAAM,qBAAqB,CAAU,OAAuB;AACrD,QAAA,MAAM,KAAK,EAAE;AAEZ,SAAA,OAAO,QAAQ,YAAY,QAAQ,QAAQ,aAAa,MAC5D,IAAI,UACJ;AACJ;AAEA,MAAM,uBAAuB;AAAA,EAC5B;AAAA,EACA;;AAOY,MAAA,aAAa,CAAC,WAAoC;AAC9D,MAAI,OAAO,MAAM;AACZ,QAAA,WAAW,OAAO,IAAI,GAAG;AAC5B,aAAO,mBAAmBA,QAAY,OAAO,IAAI,CAAC;AAAA,IAAA,OAC5C;AACN,YAAM,IAAI,MAAM,+BAA+B,OAAO,MAAM;AAAA,IAC5D;AAAA,EAAA,OACK;AACN,eAAW,cAAc,sBAAsB;AAC1C,UAAA,WAAW,UAAU,GAAG;AACpB,eAAA,mBAAmBA,QAAY,UAAU,CAAC;AAAA,MACjD;AAAA,IACD;AAAA,EACD;AAGD,SAAO;AACR;"}