import * as prismicCT from "@prismicio/custom-types-client";
import fg from "fast-glob";
import { readFileSync } from "fs";
import fetch from './../_node_modules/node-fetch/src/index.js';
const isCustomTypeModel = (input) => {
  return typeof input === "object" && input !== null && "json" in input;
};
const isSharedSliceModel = (input) => {
  return typeof input === "object" && input !== null && "variations" in input;
};
const readJSONFromGlob = async (globs) => {
  const paths = await fg(globs.split(",").map((path) => path.trim()));
  return paths.map((path) => {
    const raw = readFileSync(path, "utf8");
    return JSON.parse(raw);
  });
};
const loadModels = async (config) => {
  const customTypeModels = {};
  const sharedSliceModels = {};
  if ("customTypesAPIToken" in config) {
    const customTypesClient = prismicCT.createClient({
      repositoryName: config.repositoryName,
      token: config.customTypesAPIToken,
      fetch
    });
    if (config.fetchFromRepository) {
      const [remoteCustomTypeModels, remoteSharedSliceModels] = await Promise.all([
        customTypesClient.getAllCustomTypes(),
        customTypesClient.getAllSharedSlices()
      ]);
      for (const customTypeModel of remoteCustomTypeModels) {
        customTypeModels[customTypeModel.id] = customTypeModel;
      }
      for (const sharedSliceModel of remoteSharedSliceModels) {
        sharedSliceModels[sharedSliceModel.id] = sharedSliceModel;
      }
    }
  }
  if (config.localPaths) {
    const models = (await Promise.all(config.localPaths.map((glob) => readJSONFromGlob(glob)))).flat();
    for (const model of models) {
      if (isCustomTypeModel(model)) {
        customTypeModels[model.id] = model;
      } else if (isSharedSliceModel(model)) {
        sharedSliceModels[model.id] = model;
      }
    }
  }
  return {
    customTypeModels: Object.values(customTypeModels).sort((a, b) => {
      return a.id.localeCompare(b.id);
    }),
    sharedSliceModels: Object.values(sharedSliceModels).sort((a, b) => {
      return a.id.localeCompare(b.id);
    })
  };
};
export {
  loadModels
};
//# sourceMappingURL=loadModels.js.map
