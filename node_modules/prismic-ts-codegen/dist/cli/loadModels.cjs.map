{"version":3,"file":"loadModels.cjs","sources":["../../../src/cli/loadModels.ts"],"sourcesContent":["import * as prismicCT from \"@prismicio/custom-types-client\";\nimport type { CustomTypeModel, SharedSliceModel } from \"@prismicio/client\";\nimport fg from \"fast-glob\";\nimport { readFileSync } from \"fs\";\nimport fetch from \"node-fetch\";\n\nconst isCustomTypeModel = (input: unknown): input is CustomTypeModel => {\n\treturn typeof input === \"object\" && input !== null && \"json\" in input;\n};\n\nconst isSharedSliceModel = (input: unknown): input is SharedSliceModel => {\n\treturn typeof input === \"object\" && input !== null && \"variations\" in input;\n};\n\nconst readJSONFromGlob = async <T>(globs: string): Promise<T[]> => {\n\tconst paths = await fg(globs.split(\",\").map((path) => path.trim()));\n\n\treturn paths.map((path) => {\n\t\tconst raw = readFileSync(path, \"utf8\");\n\n\t\treturn JSON.parse(raw);\n\t});\n};\n\ntype LoadModelsConfig =\n\t| {\n\t\t\tlocalPaths?: string[];\n\t  }\n\t| {\n\t\t\tlocalPaths?: string[];\n\t\t\trepositoryName: string;\n\t\t\tcustomTypesAPIToken: string;\n\t\t\tfetchFromRepository?: boolean;\n\t  };\n\ntype LoadModelsReturnType = {\n\tcustomTypeModels: CustomTypeModel[];\n\tsharedSliceModels: SharedSliceModel[];\n};\n\nexport const loadModels = async (\n\tconfig: LoadModelsConfig,\n): Promise<LoadModelsReturnType> => {\n\tconst customTypeModels: Record<string, CustomTypeModel> = {};\n\tconst sharedSliceModels: Record<string, SharedSliceModel> = {};\n\n\tif (\"customTypesAPIToken\" in config) {\n\t\tconst customTypesClient = prismicCT.createClient({\n\t\t\trepositoryName: config.repositoryName,\n\t\t\ttoken: config.customTypesAPIToken,\n\t\t\tfetch,\n\t\t});\n\n\t\tif (config.fetchFromRepository) {\n\t\t\tconst [remoteCustomTypeModels, remoteSharedSliceModels] =\n\t\t\t\tawait Promise.all([\n\t\t\t\t\tcustomTypesClient.getAllCustomTypes(),\n\t\t\t\t\tcustomTypesClient.getAllSharedSlices(),\n\t\t\t\t]);\n\n\t\t\tfor (const customTypeModel of remoteCustomTypeModels) {\n\t\t\t\tcustomTypeModels[customTypeModel.id] = customTypeModel;\n\t\t\t}\n\t\t\tfor (const sharedSliceModel of remoteSharedSliceModels) {\n\t\t\t\tsharedSliceModels[sharedSliceModel.id] = sharedSliceModel;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (config.localPaths) {\n\t\tconst models = (\n\t\t\tawait Promise.all(config.localPaths.map((glob) => readJSONFromGlob(glob)))\n\t\t).flat();\n\n\t\tfor (const model of models) {\n\t\t\tif (isCustomTypeModel(model)) {\n\t\t\t\tcustomTypeModels[model.id] = model;\n\t\t\t} else if (isSharedSliceModel(model)) {\n\t\t\t\tsharedSliceModels[model.id] = model;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tcustomTypeModels: Object.values(customTypeModels).sort((a, b) => {\n\t\t\treturn a.id.localeCompare(b.id);\n\t\t}),\n\t\tsharedSliceModels: Object.values(sharedSliceModels).sort((a, b) => {\n\t\t\treturn a.id.localeCompare(b.id);\n\t\t}),\n\t};\n};\n"],"names":["readFileSync","prismicCT","fetch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAMA,MAAM,oBAAoB,CAAC,UAA4C;AACtE,SAAO,OAAO,UAAU,YAAY,UAAU,QAAQ,UAAU;AACjE;AAEA,MAAM,qBAAqB,CAAC,UAA6C;AACxE,SAAO,OAAO,UAAU,YAAY,UAAU,QAAQ,gBAAgB;AACvE;AAEA,MAAM,mBAAmB,OAAU,UAA+B;AACjE,QAAM,QAAQ,MAAM,GAAG,MAAM,MAAM,GAAG,EAAE,IAAI,CAAC,SAAS,KAAK,KAAA,CAAM,CAAC;AAE3D,SAAA,MAAM,IAAI,CAAC,SAAQ;AACnB,UAAA,MAAMA,GAAAA,aAAa,MAAM,MAAM;AAE9B,WAAA,KAAK,MAAM,GAAG;AAAA,EAAA,CACrB;AACF;AAkBa,MAAA,aAAa,OACzB,WACkC;AAClC,QAAM,mBAAoD,CAAA;AAC1D,QAAM,oBAAsD,CAAA;AAE5D,MAAI,yBAAyB,QAAQ;AAC9B,UAAA,oBAAoBC,qBAAU,aAAa;AAAA,MAChD,gBAAgB,OAAO;AAAA,MACvB,OAAO,OAAO;AAAA,MAAA,OACdC,MAAA;AAAA,IAAA,CACA;AAED,QAAI,OAAO,qBAAqB;AAC/B,YAAM,CAAC,wBAAwB,uBAAuB,IACrD,MAAM,QAAQ,IAAI;AAAA,QACjB,kBAAkB,kBAAmB;AAAA,QACrC,kBAAkB,mBAAoB;AAAA,MAAA,CACtC;AAEF,iBAAW,mBAAmB,wBAAwB;AACpC,yBAAA,gBAAgB,EAAE,IAAI;AAAA,MACvC;AACD,iBAAW,oBAAoB,yBAAyB;AACrC,0BAAA,iBAAiB,EAAE,IAAI;AAAA,MACzC;AAAA,IACD;AAAA,EACD;AAED,MAAI,OAAO,YAAY;AACtB,UAAM,UACL,MAAM,QAAQ,IAAI,OAAO,WAAW,IAAI,CAAC,SAAS,iBAAiB,IAAI,CAAC,CAAC,GACxE;AAEF,eAAW,SAAS,QAAQ;AACvB,UAAA,kBAAkB,KAAK,GAAG;AACZ,yBAAA,MAAM,EAAE,IAAI;AAAA,MAAA,WACnB,mBAAmB,KAAK,GAAG;AACnB,0BAAA,MAAM,EAAE,IAAI;AAAA,MAC9B;AAAA,IACD;AAAA,EACD;AAEM,SAAA;AAAA,IACN,kBAAkB,OAAO,OAAO,gBAAgB,EAAE,KAAK,CAAC,GAAG,MAAK;AAC/D,aAAO,EAAE,GAAG,cAAc,EAAE,EAAE;AAAA,IAAA,CAC9B;AAAA,IACD,mBAAmB,OAAO,OAAO,iBAAiB,EAAE,KAAK,CAAC,GAAG,MAAK;AACjE,aAAO,EAAE,GAAG,cAAc,EAAE,EAAE;AAAA,IAAA,CAC9B;AAAA,EAAA;AAEH;;"}