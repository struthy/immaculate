"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const prismicCT = require("@prismicio/custom-types-client");
const fg = require("fast-glob");
const fs = require("fs");
const index = require('./../_node_modules/node-fetch/src/index.cjs');
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const prismicCT__namespace = /* @__PURE__ */ _interopNamespaceDefault(prismicCT);
const isCustomTypeModel = (input) => {
  return typeof input === "object" && input !== null && "json" in input;
};
const isSharedSliceModel = (input) => {
  return typeof input === "object" && input !== null && "variations" in input;
};
const readJSONFromGlob = async (globs) => {
  const paths = await fg(globs.split(",").map((path) => path.trim()));
  return paths.map((path) => {
    const raw = fs.readFileSync(path, "utf8");
    return JSON.parse(raw);
  });
};
const loadModels = async (config) => {
  const customTypeModels = {};
  const sharedSliceModels = {};
  if ("customTypesAPIToken" in config) {
    const customTypesClient = prismicCT__namespace.createClient({
      repositoryName: config.repositoryName,
      token: config.customTypesAPIToken,
      fetch: index.default
    });
    if (config.fetchFromRepository) {
      const [remoteCustomTypeModels, remoteSharedSliceModels] = await Promise.all([
        customTypesClient.getAllCustomTypes(),
        customTypesClient.getAllSharedSlices()
      ]);
      for (const customTypeModel of remoteCustomTypeModels) {
        customTypeModels[customTypeModel.id] = customTypeModel;
      }
      for (const sharedSliceModel of remoteSharedSliceModels) {
        sharedSliceModels[sharedSliceModel.id] = sharedSliceModel;
      }
    }
  }
  if (config.localPaths) {
    const models = (await Promise.all(config.localPaths.map((glob) => readJSONFromGlob(glob)))).flat();
    for (const model of models) {
      if (isCustomTypeModel(model)) {
        customTypeModels[model.id] = model;
      } else if (isSharedSliceModel(model)) {
        sharedSliceModels[model.id] = model;
      }
    }
  }
  return {
    customTypeModels: Object.values(customTypeModels).sort((a, b) => {
      return a.id.localeCompare(b.id);
    }),
    sharedSliceModels: Object.values(sharedSliceModels).sort((a, b) => {
      return a.id.localeCompare(b.id);
    })
  };
};
exports.loadModels = loadModels;
//# sourceMappingURL=loadModels.cjs.map
