import { source } from "common-tags";
import QuickLRU from './_node_modules/quick-lru/index.js';
import { addLine } from "./lib/addLine.js";
import { addSection } from "./lib/addSection.js";
import { buildCustomTypeType } from "./lib/buildCustomTypeType.js";
import { buildSharedSliceType } from "./lib/buildSharedSliceType.js";
import { buildUnion } from "./lib/buildUnion.js";
const cache = new QuickLRU({ maxSize: 1e3 });
function generateTypes(config = {}) {
  var _a, _b, _c, _d, _e;
  const fieldConfigs = config.fieldConfigs || {};
  const shouldUseCache = config.cache ?? true;
  let code = "";
  const typesProvider = config.typesProvider || "@prismicio/types";
  let clientImportName = "prismic";
  code = addLine(`import type * as prismic from "${typesProvider}";`, code);
  if (((_a = config.clientIntegration) == null ? void 0 : _a.includeCreateClientInterface) || ((_b = config.clientIntegration) == null ? void 0 : _b.includeContentNamespace)) {
    if (typesProvider !== "@prismicio/client") {
      clientImportName = "prismicClient";
      code = addLine(`import type * as ${clientImportName} from "@prismicio/client";`, code);
    }
  }
  code = addSection(`type Simplify<T> = { [KeyType in keyof T]: T[KeyType] };`, code);
  const contentTypeNames = [];
  if (config.customTypeModels) {
    const allDocumentTypesTypeNames = [];
    for (const model of config.customTypeModels) {
      const customTypeType = buildCustomTypeType({
        model,
        localeIDs: config.localeIDs,
        fieldConfigs,
        cache: shouldUseCache ? cache : void 0
      });
      for (const auxiliaryType of customTypeType.auxiliaryTypes) {
        code = addSection(auxiliaryType.code, code);
      }
      code = addSection(customTypeType.code, code);
      allDocumentTypesTypeNames.push(customTypeType.name);
      contentTypeNames.push(customTypeType.name);
      contentTypeNames.push(...customTypeType.contentTypeNames);
    }
    if (config.customTypeModels.length > 0) {
      const allDocumentTypesUnionName = "AllDocumentTypes";
      const allDocumentTypesUnion = buildUnion(allDocumentTypesTypeNames);
      code = addSection(`export type ${allDocumentTypesUnionName} = ${allDocumentTypesUnion};`, code);
      contentTypeNames.push(allDocumentTypesUnionName);
    }
  }
  if (config.sharedSliceModels) {
    for (const model of config.sharedSliceModels) {
      const sharedSliceType = buildSharedSliceType({
        model,
        fieldConfigs,
        cache: shouldUseCache ? cache : void 0
      });
      for (const auxiliaryType of sharedSliceType.auxiliaryTypes) {
        code = addSection(auxiliaryType.code, code);
      }
      code = addSection(sharedSliceType.code, code);
      contentTypeNames.push(sharedSliceType.name);
      contentTypeNames.push(...sharedSliceType.contentTypeNames);
    }
  }
  if (((_c = config.clientIntegration) == null ? void 0 : _c.includeCreateClientInterface) || ((_d = config.clientIntegration) == null ? void 0 : _d.includeContentNamespace)) {
    let clientModuleCode = "";
    if (config.clientIntegration.includeCreateClientInterface) {
      if ((((_e = config.customTypeModels) == null ? void 0 : _e.length) || 0) > 0) {
        clientModuleCode = addSection(`interface CreateClient {
	(repositoryNameOrEndpoint: string, options?: ${clientImportName}.ClientConfig): ${clientImportName}.Client<AllDocumentTypes>;
}`, clientModuleCode);
      } else {
        clientModuleCode = addSection(`interface CreateClient {
	(repositoryNameOrEndpoint: string, options?: ${clientImportName}.ClientConfig): ${clientImportName}.Client;
}`, clientModuleCode);
      }
    }
    if (config.clientIntegration.includeContentNamespace) {
      clientModuleCode = addSection(source`
					namespace Content {
						export type {
							${contentTypeNames.join(",\n")}
						}
					}
				`, clientModuleCode);
    }
    code = addSection(source`
				declare module "@prismicio/client" {
					${clientModuleCode}
				}
			`, code);
  }
  return code;
}
export {
  generateTypes
};
//# sourceMappingURL=generateTypes.js.map
