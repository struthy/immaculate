{"version":3,"file":"createSliceMachineManagerMSWHandler.cjs","sources":["../../../src/test/createSliceMachineManagerMSWHandler.ts"],"sourcesContent":["import { handleRPCRequest } from \"r19\";\nimport { rest, DefaultBodyType, MockedRequest, RestHandler } from \"msw\";\n\nimport { SliceMachineManager } from \"../managers/SliceMachineManager\";\nimport { getSliceMachineManagerProcedures } from \"../managers/createSliceMachineManagerMiddleware\";\n\nexport type CreateSliceMachineManagerMSWHandlerArgs = {\n\tsliceMachineManager: SliceMachineManager;\n\turl: string;\n};\n\nexport const createSliceMachineManagerMSWHandler = (\n\targs: CreateSliceMachineManagerMSWHandlerArgs,\n): RestHandler<MockedRequest<DefaultBodyType>> => {\n\treturn rest.post(args.url, async (req, res, ctx) => {\n\t\tconst rpcResponse = await handleRPCRequest({\n\t\t\tbody: await req.arrayBuffer(),\n\t\t\tprocedures: getSliceMachineManagerProcedures({\n\t\t\t\tsliceMachineManager: args.sliceMachineManager,\n\t\t\t}),\n\t\t});\n\n\t\treturn res(\n\t\t\tctx.body(rpcResponse.body),\n\t\t\tctx.set(rpcResponse.headers),\n\t\t\tctx.status(rpcResponse.statusCode || 200),\n\t\t);\n\t});\n};\n"],"names":["rest","handleRPCRequest","getSliceMachineManagerProcedures"],"mappings":";;;;;AAWa,MAAA,sCAAsC,CAClD,SACgD;AAChD,SAAOA,IAAAA,KAAK,KAAK,KAAK,KAAK,OAAO,KAAK,KAAK,QAAO;AAC5C,UAAA,cAAc,MAAMC,kCAAiB;AAAA,MAC1C,MAAM,MAAM,IAAI,YAAa;AAAA,MAC7B,YAAYC,oCAAAA,iCAAiC;AAAA,QAC5C,qBAAqB,KAAK;AAAA,MAAA,CAC1B;AAAA,IAAA,CACD;AAED,WAAO,IACN,IAAI,KAAK,YAAY,IAAI,GACzB,IAAI,IAAI,YAAY,OAAO,GAC3B,IAAI,OAAO,YAAY,cAAc,GAAG,CAAC;AAAA,EAAA,CAE1C;AACF;;"}