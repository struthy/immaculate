import * as t from "io-ts";
import { createRouter, eventHandler, readBody, defineNodeMiddleware, createEvent } from "h3";
import { decode } from "../lib/decode.js";
const PrismicAuthResponse = t.type({
  email: t.string,
  cookies: t.array(t.string)
});
const createPrismicAuthManagerMiddleware = (args) => {
  const router = createRouter();
  router.post("/", eventHandler(async (event) => {
    const body = await readBody(event);
    const { value, error } = decode(PrismicAuthResponse, body);
    if (error) {
      throw new Error(`Invalid auth payload: ${error.errors.join(", ")}`);
    }
    await args.prismicAuthManager.login({
      email: value.email,
      cookies: value.cookies
    });
    if (args.onLoginCallback) {
      await args.onLoginCallback();
    }
    return {};
  }));
  return defineNodeMiddleware(async (req, res) => {
    const event = createEvent(req, res);
    await router.handler(event);
    res.end();
  });
};
export {
  createPrismicAuthManagerMiddleware
};
//# sourceMappingURL=createPrismicAuthManagerMiddleware.js.map
