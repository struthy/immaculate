"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const t = require("io-ts");
const h3 = require("h3");
const decode = require("../lib/decode.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const t__namespace = /* @__PURE__ */ _interopNamespaceDefault(t);
const PrismicAuthResponse = t__namespace.type({
  email: t__namespace.string,
  cookies: t__namespace.array(t__namespace.string)
});
const createPrismicAuthManagerMiddleware = (args) => {
  const router = h3.createRouter();
  router.post("/", h3.eventHandler(async (event) => {
    const body = await h3.readBody(event);
    const { value, error } = decode.decode(PrismicAuthResponse, body);
    if (error) {
      throw new Error(`Invalid auth payload: ${error.errors.join(", ")}`);
    }
    await args.prismicAuthManager.login({
      email: value.email,
      cookies: value.cookies
    });
    if (args.onLoginCallback) {
      await args.onLoginCallback();
    }
    return {};
  }));
  return h3.defineNodeMiddleware(async (req, res) => {
    const event = h3.createEvent(req, res);
    await router.handler(event);
    res.end();
  });
};
exports.createPrismicAuthManagerMiddleware = createPrismicAuthManagerMiddleware;
//# sourceMappingURL=createPrismicAuthManagerMiddleware.cjs.map
