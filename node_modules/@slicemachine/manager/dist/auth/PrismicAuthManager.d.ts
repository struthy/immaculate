import * as t from "io-ts";
declare const AUTH_COOKIE_KEY = "prismic-auth";
declare const SESSION_COOKIE_KEY = "SESSION";
declare const PrismicAuthState: t.IntersectionC<[t.TypeC<{
    base: t.StringC;
    cookies: t.IntersectionC<[t.PartialC<{
        "prismic-auth": t.StringC;
        SESSION: t.StringC;
    }>, t.RecordC<t.StringC, t.StringC>]>;
}>, t.PartialC<{
    shortId: t.StringC;
    intercomHash: t.StringC;
    oauthAccessToken: t.StringC;
    authUrl: t.StringC;
}>]>;
export type PrismicAuthState = t.TypeOf<typeof PrismicAuthState>;
declare const PrismicUserProfile: t.ExactC<t.TypeC<{
    userId: t.StringC;
    shortId: t.StringC;
    intercomHash: t.StringC;
    email: t.StringC;
    firstName: t.StringC;
    lastName: t.StringC;
}>>;
export type PrismicUserProfile = t.TypeOf<typeof PrismicUserProfile>;
type PrismicAuthManagerConstructorArgs = {
    scopedDirectory?: string;
};
type PrismicAuthManagerLoginArgs = {
    email: string;
    cookies: string[];
};
type PrismicAuthManagerGetLoginSessionInfoReturnType = {
    port: number;
    url: string;
};
type PrismicAuthManagerNodeLoginSessionArgs = {
    port: number;
    onListenCallback?: () => void;
};
export declare class PrismicAuthManager {
    scopedDirectory: string;
    constructor({ scopedDirectory, }?: PrismicAuthManagerConstructorArgs);
    login(args: PrismicAuthManagerLoginArgs): Promise<void>;
    getLoginSessionInfo(): Promise<PrismicAuthManagerGetLoginSessionInfoReturnType>;
    nodeLoginSession(args: PrismicAuthManagerNodeLoginSessionArgs): Promise<void>;
    logout(): Promise<void>;
    checkIsLoggedIn(): Promise<boolean>;
    getAuthenticationCookies(): Promise<PrismicAuthState["cookies"] & Required<Pick<PrismicAuthState["cookies"], typeof AUTH_COOKIE_KEY | typeof SESSION_COOKIE_KEY>>>;
    getAuthenticationToken(): Promise<string>;
    refreshAuthenticationToken(): Promise<void>;
    getProfile(): Promise<PrismicUserProfile>;
    private _getProfileForAuthenticationToken;
    private _readPersistedAuthState;
    private _writePersistedAuthState;
    private _getPersistedAuthStateFilePath;
}
export {};
