{"version":3,"file":"getEnvironmentInfo.cjs","sources":["../../src/getEnvironmentInfo.ts"],"sourcesContent":["import semver from \"semver\";\n\ntype PackageManifest = { name: string; version: string };\n\ntype EnvironmentInfo = { environment: string; release: string };\n\nexport const getEnvironmentInfo = (pkg: PackageManifest): EnvironmentInfo => {\n\tconst parsedPkgVersion = semver.parse(pkg.version);\n\tif (parsedPkgVersion === null) {\n\t\tthrow new Error(\n\t\t\t`Package \\`${pkg.name}\\` has an invalid version \\`${pkg.version}\\` in its manifest.`,\n\t\t);\n\t}\n\n\tlet environment;\n\tif (parsedPkgVersion.prerelease.length === 0) {\n\t\tenvironment = import.meta.env.MODE || \"production\";\n\t} else if (\n\t\tparsedPkgVersion.prerelease[0] === \"alpha\" ||\n\t\tparsedPkgVersion.prerelease[0] === \"beta\"\n\t) {\n\t\tenvironment = parsedPkgVersion.prerelease[0];\n\t} else {\n\t\tthrow new Error(\n\t\t\t`Invalid package version: \\`${pkg.name}@${parsedPkgVersion.version}\\`. The first prerelease component \\`${parsedPkgVersion.prerelease[0]}\\` must be either \\`alpha\\` or \\`beta\\`.`,\n\t\t);\n\t}\n\n\treturn { environment, release: parsedPkgVersion.version };\n};\n"],"names":[],"mappings":";;;AAMa,MAAA,qBAAqB,CAAC,QAAyC;AAC3E,QAAM,mBAAmB,OAAO,MAAM,IAAI,OAAO;AACjD,MAAI,qBAAqB,MAAM;AAC9B,UAAM,IAAI,MACT,aAAa,IAAI,mCAAmC,IAAI,4BAA4B;AAAA,EAErF;AAEG,MAAA;AACA,MAAA,iBAAiB,WAAW,WAAW,GAAG;AAC/B,kBAAA;AAAA,EAAwB,WAEtC,iBAAiB,WAAW,CAAC,MAAM,WACnC,iBAAiB,WAAW,CAAC,MAAM,QAClC;AACa,kBAAA,iBAAiB,WAAW,CAAC;AAAA,EAAA,OACrC;AACA,UAAA,IAAI,MACT,8BAA8B,IAAI,QAAQ,iBAAiB,+CAA+C,iBAAiB,WAAW,CAAC,2CAA2C;AAAA,EAEnL;AAED,SAAO,EAAE,aAAa,SAAS,iBAAiB,QAAO;AACxD;;"}