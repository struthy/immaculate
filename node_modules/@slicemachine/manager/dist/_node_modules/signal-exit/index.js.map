{"version":3,"file":"index.js","sources":["../../../../../node_modules/signal-exit/index.js"],"sourcesContent":["// Note: since nyc uses this module to output coverage, any lines\n// that are in the direct sync flow of nyc's outputCoverage are\n// ignored, since we can never get coverage for them.\n// grab a reference to node's real process object right away\nvar process = global.process\n\nconst processOk = function (process) {\n  return process &&\n    typeof process === 'object' &&\n    typeof process.removeListener === 'function' &&\n    typeof process.emit === 'function' &&\n    typeof process.reallyExit === 'function' &&\n    typeof process.listeners === 'function' &&\n    typeof process.kill === 'function' &&\n    typeof process.pid === 'number' &&\n    typeof process.on === 'function'\n}\n\n// some kind of non-node environment, just no-op\n/* istanbul ignore if */\nif (!processOk(process)) {\n  module.exports = function () {\n    return function () {}\n  }\n} else {\n  var assert = require('assert')\n  var signals = require('./signals.js')\n  var isWin = /^win/i.test(process.platform)\n\n  var EE = require('events')\n  /* istanbul ignore if */\n  if (typeof EE !== 'function') {\n    EE = EE.EventEmitter\n  }\n\n  var emitter\n  if (process.__signal_exit_emitter__) {\n    emitter = process.__signal_exit_emitter__\n  } else {\n    emitter = process.__signal_exit_emitter__ = new EE()\n    emitter.count = 0\n    emitter.emitted = {}\n  }\n\n  // Because this emitter is a global, we have to check to see if a\n  // previous version of this library failed to enable infinite listeners.\n  // I know what you're about to say.  But literally everything about\n  // signal-exit is a compromise with evil.  Get used to it.\n  if (!emitter.infinite) {\n    emitter.setMaxListeners(Infinity)\n    emitter.infinite = true\n  }\n\n  module.exports = function (cb, opts) {\n    /* istanbul ignore if */\n    if (!processOk(global.process)) {\n      return function () {}\n    }\n    assert.equal(typeof cb, 'function', 'a callback must be provided for exit handler')\n\n    if (loaded === false) {\n      load()\n    }\n\n    var ev = 'exit'\n    if (opts && opts.alwaysLast) {\n      ev = 'afterexit'\n    }\n\n    var remove = function () {\n      emitter.removeListener(ev, cb)\n      if (emitter.listeners('exit').length === 0 &&\n          emitter.listeners('afterexit').length === 0) {\n        unload()\n      }\n    }\n    emitter.on(ev, cb)\n\n    return remove\n  }\n\n  var unload = function unload () {\n    if (!loaded || !processOk(global.process)) {\n      return\n    }\n    loaded = false\n\n    signals.forEach(function (sig) {\n      try {\n        process.removeListener(sig, sigListeners[sig])\n      } catch (er) {}\n    })\n    process.emit = originalProcessEmit\n    process.reallyExit = originalProcessReallyExit\n    emitter.count -= 1\n  }\n  module.exports.unload = unload\n\n  var emit = function emit (event, code, signal) {\n    /* istanbul ignore if */\n    if (emitter.emitted[event]) {\n      return\n    }\n    emitter.emitted[event] = true\n    emitter.emit(event, code, signal)\n  }\n\n  // { <signal>: <listener fn>, ... }\n  var sigListeners = {}\n  signals.forEach(function (sig) {\n    sigListeners[sig] = function listener () {\n      /* istanbul ignore if */\n      if (!processOk(global.process)) {\n        return\n      }\n      // If there are no other listeners, an exit is coming!\n      // Simplest way: remove us and then re-send the signal.\n      // We know that this will kill the process, so we can\n      // safely emit now.\n      var listeners = process.listeners(sig)\n      if (listeners.length === emitter.count) {\n        unload()\n        emit('exit', null, sig)\n        /* istanbul ignore next */\n        emit('afterexit', null, sig)\n        /* istanbul ignore next */\n        if (isWin && sig === 'SIGHUP') {\n          // \"SIGHUP\" throws an `ENOSYS` error on Windows,\n          // so use a supported signal instead\n          sig = 'SIGINT'\n        }\n        /* istanbul ignore next */\n        process.kill(process.pid, sig)\n      }\n    }\n  })\n\n  module.exports.signals = function () {\n    return signals\n  }\n\n  var loaded = false\n\n  var load = function load () {\n    if (loaded || !processOk(global.process)) {\n      return\n    }\n    loaded = true\n\n    // This is the number of onSignalExit's that are in play.\n    // It's important so that we can count the correct number of\n    // listeners on signals, and don't wait for the other one to\n    // handle it instead of us.\n    emitter.count += 1\n\n    signals = signals.filter(function (sig) {\n      try {\n        process.on(sig, sigListeners[sig])\n        return true\n      } catch (er) {\n        return false\n      }\n    })\n\n    process.emit = processEmit\n    process.reallyExit = processReallyExit\n  }\n  module.exports.load = load\n\n  var originalProcessReallyExit = process.reallyExit\n  var processReallyExit = function processReallyExit (code) {\n    /* istanbul ignore if */\n    if (!processOk(global.process)) {\n      return\n    }\n    process.exitCode = code || /* istanbul ignore next */ 0\n    emit('exit', process.exitCode, null)\n    /* istanbul ignore next */\n    emit('afterexit', process.exitCode, null)\n    /* istanbul ignore next */\n    originalProcessReallyExit.call(process, process.exitCode)\n  }\n\n  var originalProcessEmit = process.emit\n  var processEmit = function processEmit (ev, arg) {\n    if (ev === 'exit' && processOk(global.process)) {\n      /* istanbul ignore else */\n      if (arg !== undefined) {\n        process.exitCode = arg\n      }\n      var ret = originalProcessEmit.apply(this, arguments)\n      /* istanbul ignore next */\n      emit('exit', process.exitCode, null)\n      /* istanbul ignore next */\n      emit('afterexit', process.exitCode, null)\n      /* istanbul ignore next */\n      return ret\n    } else {\n      return originalProcessEmit.apply(this, arguments)\n    }\n  }\n}\n"],"names":["global","process","signalExitModule","require$$1","unload","emit","load","processReallyExit","processEmit"],"mappings":"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","x_google_ignoreList":[0]}