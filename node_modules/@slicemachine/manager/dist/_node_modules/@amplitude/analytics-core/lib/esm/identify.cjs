"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const tslib_es6 = require("../../../../tslib/tslib.es6.cjs");
const constants = require("./constants.cjs");
const validProperties = require("./utils/valid-properties.cjs");
const event = require("../../../analytics-types/lib/esm/event.cjs");
var Identify = (
  /** @class */
  function() {
    function Identify2() {
      this._propertySet = /* @__PURE__ */ new Set();
      this._properties = {};
    }
    Identify2.prototype.getUserProperties = function() {
      return tslib_es6.__assign({}, this._properties);
    };
    Identify2.prototype.set = function(property, value) {
      this._safeSet(event.IdentifyOperation.SET, property, value);
      return this;
    };
    Identify2.prototype.setOnce = function(property, value) {
      this._safeSet(event.IdentifyOperation.SET_ONCE, property, value);
      return this;
    };
    Identify2.prototype.append = function(property, value) {
      this._safeSet(event.IdentifyOperation.APPEND, property, value);
      return this;
    };
    Identify2.prototype.prepend = function(property, value) {
      this._safeSet(event.IdentifyOperation.PREPEND, property, value);
      return this;
    };
    Identify2.prototype.postInsert = function(property, value) {
      this._safeSet(event.IdentifyOperation.POSTINSERT, property, value);
      return this;
    };
    Identify2.prototype.preInsert = function(property, value) {
      this._safeSet(event.IdentifyOperation.PREINSERT, property, value);
      return this;
    };
    Identify2.prototype.remove = function(property, value) {
      this._safeSet(event.IdentifyOperation.REMOVE, property, value);
      return this;
    };
    Identify2.prototype.add = function(property, value) {
      this._safeSet(event.IdentifyOperation.ADD, property, value);
      return this;
    };
    Identify2.prototype.unset = function(property) {
      this._safeSet(event.IdentifyOperation.UNSET, property, constants.UNSET_VALUE);
      return this;
    };
    Identify2.prototype.clearAll = function() {
      this._properties = {};
      this._properties[event.IdentifyOperation.CLEAR_ALL] = constants.UNSET_VALUE;
      return this;
    };
    Identify2.prototype._safeSet = function(operation, property, value) {
      if (this._validate(operation, property, value)) {
        var userPropertyMap = this._properties[operation];
        if (userPropertyMap === void 0) {
          userPropertyMap = {};
          this._properties[operation] = userPropertyMap;
        }
        userPropertyMap[property] = value;
        this._propertySet.add(property);
        return true;
      }
      return false;
    };
    Identify2.prototype._validate = function(operation, property, value) {
      if (this._properties[event.IdentifyOperation.CLEAR_ALL] !== void 0) {
        return false;
      }
      if (this._propertySet.has(property)) {
        return false;
      }
      if (operation === event.IdentifyOperation.ADD) {
        return typeof value === "number";
      }
      if (operation !== event.IdentifyOperation.UNSET && operation !== event.IdentifyOperation.REMOVE) {
        return validProperties.isValidProperties(property, value);
      }
      return true;
    };
    return Identify2;
  }()
);
exports.Identify = Identify;
//# sourceMappingURL=identify.cjs.map
