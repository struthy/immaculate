"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const constants = require("./constants.cjs");
const logger$1 = require("./logger.cjs");
const logger = require("../../../analytics-types/lib/esm/logger.cjs");
const serverZone = require("../../../analytics-types/lib/esm/server-zone.cjs");
var getDefaultConfig = function() {
  return {
    flushMaxRetries: 12,
    flushQueueSize: 200,
    flushIntervalMillis: 1e4,
    instanceName: "$default_instance",
    logLevel: logger.LogLevel.Warn,
    loggerProvider: new logger$1.Logger(),
    optOut: false,
    serverUrl: constants.AMPLITUDE_SERVER_URL,
    serverZone: serverZone.ServerZone.US,
    useBatch: false
  };
};
var Config = (
  /** @class */
  function() {
    function Config2(options) {
      var _a, _b, _c, _d;
      this._optOut = false;
      var defaultConfig = getDefaultConfig();
      this.apiKey = options.apiKey;
      this.flushIntervalMillis = (_a = options.flushIntervalMillis) !== null && _a !== void 0 ? _a : defaultConfig.flushIntervalMillis;
      this.flushMaxRetries = options.flushMaxRetries || defaultConfig.flushMaxRetries;
      this.flushQueueSize = options.flushQueueSize || defaultConfig.flushQueueSize;
      this.instanceName = options.instanceName || defaultConfig.instanceName;
      this.loggerProvider = options.loggerProvider || defaultConfig.loggerProvider;
      this.logLevel = (_b = options.logLevel) !== null && _b !== void 0 ? _b : defaultConfig.logLevel;
      this.minIdLength = options.minIdLength;
      this.plan = options.plan;
      this.ingestionMetadata = options.ingestionMetadata;
      this.optOut = (_c = options.optOut) !== null && _c !== void 0 ? _c : defaultConfig.optOut;
      this.serverUrl = options.serverUrl;
      this.serverZone = options.serverZone || defaultConfig.serverZone;
      this.storageProvider = options.storageProvider;
      this.transportProvider = options.transportProvider;
      this.useBatch = (_d = options.useBatch) !== null && _d !== void 0 ? _d : defaultConfig.useBatch;
      this.loggerProvider.enable(this.logLevel);
      var serverConfig = createServerConfig(options.serverUrl, options.serverZone, options.useBatch);
      this.serverZone = serverConfig.serverZone;
      this.serverUrl = serverConfig.serverUrl;
    }
    Object.defineProperty(Config2.prototype, "optOut", {
      get: function() {
        return this._optOut;
      },
      set: function(optOut) {
        this._optOut = optOut;
      },
      enumerable: false,
      configurable: true
    });
    return Config2;
  }()
);
var getServerUrl = function(serverZone$1, useBatch) {
  if (serverZone$1 === serverZone.ServerZone.EU) {
    return useBatch ? constants.EU_AMPLITUDE_BATCH_SERVER_URL : constants.EU_AMPLITUDE_SERVER_URL;
  }
  return useBatch ? constants.AMPLITUDE_BATCH_SERVER_URL : constants.AMPLITUDE_SERVER_URL;
};
var createServerConfig = function(serverUrl, serverZone2, useBatch) {
  if (serverUrl === void 0) {
    serverUrl = "";
  }
  if (serverZone2 === void 0) {
    serverZone2 = getDefaultConfig().serverZone;
  }
  if (useBatch === void 0) {
    useBatch = getDefaultConfig().useBatch;
  }
  if (serverUrl) {
    return { serverUrl, serverZone: void 0 };
  }
  var _serverZone = ["US", "EU"].includes(serverZone2) ? serverZone2 : getDefaultConfig().serverZone;
  return {
    serverZone: _serverZone,
    serverUrl: getServerUrl(_serverZone, useBatch)
  };
};
exports.Config = Config;
exports.createServerConfig = createServerConfig;
exports.getDefaultConfig = getDefaultConfig;
exports.getServerUrl = getServerUrl;
//# sourceMappingURL=config.cjs.map
