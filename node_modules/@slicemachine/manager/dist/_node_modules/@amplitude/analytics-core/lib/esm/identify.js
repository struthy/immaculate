import { __assign } from "../../../../tslib/tslib.es6.js";
import { UNSET_VALUE } from "./constants.js";
import { isValidProperties } from "./utils/valid-properties.js";
import { IdentifyOperation } from "../../../analytics-types/lib/esm/event.js";
var Identify = (
  /** @class */
  function() {
    function Identify2() {
      this._propertySet = /* @__PURE__ */ new Set();
      this._properties = {};
    }
    Identify2.prototype.getUserProperties = function() {
      return __assign({}, this._properties);
    };
    Identify2.prototype.set = function(property, value) {
      this._safeSet(IdentifyOperation.SET, property, value);
      return this;
    };
    Identify2.prototype.setOnce = function(property, value) {
      this._safeSet(IdentifyOperation.SET_ONCE, property, value);
      return this;
    };
    Identify2.prototype.append = function(property, value) {
      this._safeSet(IdentifyOperation.APPEND, property, value);
      return this;
    };
    Identify2.prototype.prepend = function(property, value) {
      this._safeSet(IdentifyOperation.PREPEND, property, value);
      return this;
    };
    Identify2.prototype.postInsert = function(property, value) {
      this._safeSet(IdentifyOperation.POSTINSERT, property, value);
      return this;
    };
    Identify2.prototype.preInsert = function(property, value) {
      this._safeSet(IdentifyOperation.PREINSERT, property, value);
      return this;
    };
    Identify2.prototype.remove = function(property, value) {
      this._safeSet(IdentifyOperation.REMOVE, property, value);
      return this;
    };
    Identify2.prototype.add = function(property, value) {
      this._safeSet(IdentifyOperation.ADD, property, value);
      return this;
    };
    Identify2.prototype.unset = function(property) {
      this._safeSet(IdentifyOperation.UNSET, property, UNSET_VALUE);
      return this;
    };
    Identify2.prototype.clearAll = function() {
      this._properties = {};
      this._properties[IdentifyOperation.CLEAR_ALL] = UNSET_VALUE;
      return this;
    };
    Identify2.prototype._safeSet = function(operation, property, value) {
      if (this._validate(operation, property, value)) {
        var userPropertyMap = this._properties[operation];
        if (userPropertyMap === void 0) {
          userPropertyMap = {};
          this._properties[operation] = userPropertyMap;
        }
        userPropertyMap[property] = value;
        this._propertySet.add(property);
        return true;
      }
      return false;
    };
    Identify2.prototype._validate = function(operation, property, value) {
      if (this._properties[IdentifyOperation.CLEAR_ALL] !== void 0) {
        return false;
      }
      if (this._propertySet.has(property)) {
        return false;
      }
      if (operation === IdentifyOperation.ADD) {
        return typeof value === "number";
      }
      if (operation !== IdentifyOperation.UNSET && operation !== IdentifyOperation.REMOVE) {
        return isValidProperties(property, value);
      }
      return true;
    };
    return Identify2;
  }()
);
export {
  Identify
};
//# sourceMappingURL=identify.js.map
