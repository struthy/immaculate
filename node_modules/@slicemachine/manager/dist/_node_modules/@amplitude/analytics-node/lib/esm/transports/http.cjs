"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const tslib_es6 = require("../../../../../tslib/tslib.es6.cjs");
const require$$0 = require("http");
const require$$1 = require("https");
const base = require("../../../../analytics-core/lib/esm/transports/base.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const require$$0__namespace = /* @__PURE__ */ _interopNamespaceDefault(require$$0);
const require$$1__namespace = /* @__PURE__ */ _interopNamespaceDefault(require$$1);
var Http = (
  /** @class */
  function(_super) {
    tslib_es6.__extends(Http2, _super);
    function Http2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Http2.prototype.send = function(serverUrl, payload) {
      var _this = this;
      var protocol;
      if (serverUrl.startsWith("http://")) {
        protocol = require$$0__namespace;
      } else if (serverUrl.startsWith("https://")) {
        protocol = require$$1__namespace;
      } else {
        throw new Error("Invalid server url");
      }
      var url = new URL(serverUrl);
      var requestPayload = JSON.stringify(payload);
      var options = {
        headers: {
          "Content-Type": "application/json",
          "Content-Length": Buffer.byteLength(requestPayload)
        },
        hostname: url.hostname,
        method: "POST",
        path: url.pathname,
        port: url.port,
        protocol: url.protocol
      };
      return new Promise(function(resolve) {
        var req = protocol.request(options, function(res) {
          res.setEncoding("utf8");
          var responsePayload = "";
          res.on("data", function(chunk) {
            responsePayload += chunk;
          });
          res.on("end", function() {
            if (res.complete && responsePayload.length > 0) {
              try {
                var parsedResponsePayload = JSON.parse(responsePayload);
                var result = _this.buildResponse(parsedResponsePayload);
                resolve(result);
                return;
              } catch (_a) {
                resolve(null);
              }
            }
          });
        });
        req.on("error", function() {
          return resolve(null);
        });
        req.end(requestPayload);
      });
    };
    return Http2;
  }(base.BaseTransport)
);
exports.Http = Http;
//# sourceMappingURL=http.cjs.map
