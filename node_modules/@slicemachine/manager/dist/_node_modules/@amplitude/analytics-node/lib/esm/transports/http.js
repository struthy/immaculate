import { __extends } from "../../../../../tslib/tslib.es6.js";
import * as require$$0 from "http";
import * as require$$1 from "https";
import { BaseTransport } from "../../../../analytics-core/lib/esm/transports/base.js";
var Http = (
  /** @class */
  function(_super) {
    __extends(Http2, _super);
    function Http2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Http2.prototype.send = function(serverUrl, payload) {
      var _this = this;
      var protocol;
      if (serverUrl.startsWith("http://")) {
        protocol = require$$0;
      } else if (serverUrl.startsWith("https://")) {
        protocol = require$$1;
      } else {
        throw new Error("Invalid server url");
      }
      var url = new URL(serverUrl);
      var requestPayload = JSON.stringify(payload);
      var options = {
        headers: {
          "Content-Type": "application/json",
          "Content-Length": Buffer.byteLength(requestPayload)
        },
        hostname: url.hostname,
        method: "POST",
        path: url.pathname,
        port: url.port,
        protocol: url.protocol
      };
      return new Promise(function(resolve) {
        var req = protocol.request(options, function(res) {
          res.setEncoding("utf8");
          var responsePayload = "";
          res.on("data", function(chunk) {
            responsePayload += chunk;
          });
          res.on("end", function() {
            if (res.complete && responsePayload.length > 0) {
              try {
                var parsedResponsePayload = JSON.parse(responsePayload);
                var result = _this.buildResponse(parsedResponsePayload);
                resolve(result);
                return;
              } catch (_a) {
                resolve(null);
              }
            }
          });
        });
        req.on("error", function() {
          return resolve(null);
        });
        req.end(requestPayload);
      });
    };
    return Http2;
  }(BaseTransport)
);
export {
  Http
};
//# sourceMappingURL=http.js.map
