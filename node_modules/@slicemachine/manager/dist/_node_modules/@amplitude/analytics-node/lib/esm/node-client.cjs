"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const tslib_es6 = require("../../../../tslib/tslib.es6.cjs");
const context = require("./plugins/context.cjs");
const config = require("./config.cjs");
const debug = require("../../../analytics-core/lib/esm/utils/debug.cjs");
const returnWrapper = require("../../../analytics-core/lib/esm/utils/return-wrapper.cjs");
const coreClient = require("../../../analytics-core/lib/esm/core-client.cjs");
const destination = require("../../../analytics-core/lib/esm/plugins/destination.cjs");
var AmplitudeNode = (
  /** @class */
  function(_super) {
    tslib_es6.__extends(AmplitudeNode2, _super);
    function AmplitudeNode2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AmplitudeNode2.prototype.init = function(apiKey, options) {
      if (apiKey === void 0) {
        apiKey = "";
      }
      return returnWrapper.returnWrapper(this._init(tslib_es6.__assign(tslib_es6.__assign({}, options), { apiKey })));
    };
    AmplitudeNode2.prototype._init = function(options) {
      return tslib_es6.__awaiter(this, void 0, void 0, function() {
        var nodeOptions;
        return tslib_es6.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (this.initializing) {
                return [
                  2
                  /*return*/
                ];
              }
              this.initializing = true;
              nodeOptions = config.useNodeConfig(options.apiKey, tslib_es6.__assign({}, options));
              return [4, _super.prototype._init.call(this, nodeOptions)];
            case 1:
              _a.sent();
              return [4, this.add(new destination.Destination()).promise];
            case 2:
              _a.sent();
              return [4, this.add(new context.Context()).promise];
            case 3:
              _a.sent();
              this.initializing = false;
              return [4, this.runQueuedFunctions("dispatchQ")];
            case 4:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return AmplitudeNode2;
  }(coreClient.AmplitudeCore)
);
var createInstance = function() {
  var client2 = new AmplitudeNode();
  return {
    init: debug.debugWrapper(client2.init.bind(client2), "init", debug.getClientLogConfig(client2), debug.getClientStates(client2, ["config"])),
    add: debug.debugWrapper(client2.add.bind(client2), "add", debug.getClientLogConfig(client2), debug.getClientStates(client2, ["config.apiKey", "timeline.plugins"])),
    remove: debug.debugWrapper(client2.remove.bind(client2), "remove", debug.getClientLogConfig(client2), debug.getClientStates(client2, ["config.apiKey", "timeline.plugins"])),
    track: debug.debugWrapper(client2.track.bind(client2), "track", debug.getClientLogConfig(client2), debug.getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    logEvent: debug.debugWrapper(client2.logEvent.bind(client2), "logEvent", debug.getClientLogConfig(client2), debug.getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    identify: debug.debugWrapper(client2.identify.bind(client2), "identify", debug.getClientLogConfig(client2), debug.getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    groupIdentify: debug.debugWrapper(client2.groupIdentify.bind(client2), "groupIdentify", debug.getClientLogConfig(client2), debug.getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    setGroup: debug.debugWrapper(client2.setGroup.bind(client2), "setGroup", debug.getClientLogConfig(client2), debug.getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    revenue: debug.debugWrapper(client2.revenue.bind(client2), "revenue", debug.getClientLogConfig(client2), debug.getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    flush: debug.debugWrapper(client2.flush.bind(client2), "flush", debug.getClientLogConfig(client2), debug.getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    setOptOut: debug.debugWrapper(client2.setOptOut.bind(client2), "setOptOut", debug.getClientLogConfig(client2), debug.getClientStates(client2, ["config"]))
  };
};
const client = createInstance();
exports.AmplitudeNode = AmplitudeNode;
exports.createInstance = createInstance;
exports.default = client;
//# sourceMappingURL=node-client.cjs.map
