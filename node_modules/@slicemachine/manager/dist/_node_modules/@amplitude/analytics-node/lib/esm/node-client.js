import { __extends, __assign, __awaiter, __generator } from "../../../../tslib/tslib.es6.js";
import { Context } from "./plugins/context.js";
import { useNodeConfig } from "./config.js";
import { debugWrapper, getClientStates, getClientLogConfig } from "../../../analytics-core/lib/esm/utils/debug.js";
import { returnWrapper } from "../../../analytics-core/lib/esm/utils/return-wrapper.js";
import { AmplitudeCore } from "../../../analytics-core/lib/esm/core-client.js";
import { Destination } from "../../../analytics-core/lib/esm/plugins/destination.js";
var AmplitudeNode = (
  /** @class */
  function(_super) {
    __extends(AmplitudeNode2, _super);
    function AmplitudeNode2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AmplitudeNode2.prototype.init = function(apiKey, options) {
      if (apiKey === void 0) {
        apiKey = "";
      }
      return returnWrapper(this._init(__assign(__assign({}, options), { apiKey })));
    };
    AmplitudeNode2.prototype._init = function(options) {
      return __awaiter(this, void 0, void 0, function() {
        var nodeOptions;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (this.initializing) {
                return [
                  2
                  /*return*/
                ];
              }
              this.initializing = true;
              nodeOptions = useNodeConfig(options.apiKey, __assign({}, options));
              return [4, _super.prototype._init.call(this, nodeOptions)];
            case 1:
              _a.sent();
              return [4, this.add(new Destination()).promise];
            case 2:
              _a.sent();
              return [4, this.add(new Context()).promise];
            case 3:
              _a.sent();
              this.initializing = false;
              return [4, this.runQueuedFunctions("dispatchQ")];
            case 4:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return AmplitudeNode2;
  }(AmplitudeCore)
);
var createInstance = function() {
  var client2 = new AmplitudeNode();
  return {
    init: debugWrapper(client2.init.bind(client2), "init", getClientLogConfig(client2), getClientStates(client2, ["config"])),
    add: debugWrapper(client2.add.bind(client2), "add", getClientLogConfig(client2), getClientStates(client2, ["config.apiKey", "timeline.plugins"])),
    remove: debugWrapper(client2.remove.bind(client2), "remove", getClientLogConfig(client2), getClientStates(client2, ["config.apiKey", "timeline.plugins"])),
    track: debugWrapper(client2.track.bind(client2), "track", getClientLogConfig(client2), getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    logEvent: debugWrapper(client2.logEvent.bind(client2), "logEvent", getClientLogConfig(client2), getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    identify: debugWrapper(client2.identify.bind(client2), "identify", getClientLogConfig(client2), getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    groupIdentify: debugWrapper(client2.groupIdentify.bind(client2), "groupIdentify", getClientLogConfig(client2), getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    setGroup: debugWrapper(client2.setGroup.bind(client2), "setGroup", getClientLogConfig(client2), getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    revenue: debugWrapper(client2.revenue.bind(client2), "revenue", getClientLogConfig(client2), getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    flush: debugWrapper(client2.flush.bind(client2), "flush", getClientLogConfig(client2), getClientStates(client2, ["config.apiKey", "timeline.queue.length"])),
    setOptOut: debugWrapper(client2.setOptOut.bind(client2), "setOptOut", getClientLogConfig(client2), getClientStates(client2, ["config"]))
  };
};
const client = createInstance();
export {
  AmplitudeNode,
  createInstance,
  client as default
};
//# sourceMappingURL=node-client.js.map
