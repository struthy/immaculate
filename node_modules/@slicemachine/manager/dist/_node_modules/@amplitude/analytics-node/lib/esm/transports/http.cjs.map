{"version":3,"file":"http.cjs","sources":["../../../../../../../../../node_modules/@amplitude/analytics-node/lib/esm/transports/http.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { BaseTransport } from '@amplitude/analytics-core';\nimport * as http from 'http';\nimport * as https from 'https';\nvar Http = /** @class */ (function (_super) {\n    __extends(Http, _super);\n    function Http() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Http.prototype.send = function (serverUrl, payload) {\n        var _this = this;\n        var protocol;\n        if (serverUrl.startsWith('http://')) {\n            protocol = http;\n        }\n        else if (serverUrl.startsWith('https://')) {\n            protocol = https;\n        }\n        else {\n            throw new Error('Invalid server url');\n        }\n        var url = new URL(serverUrl);\n        var requestPayload = JSON.stringify(payload);\n        var options = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Content-Length': Buffer.byteLength(requestPayload),\n            },\n            hostname: url.hostname,\n            method: 'POST',\n            path: url.pathname,\n            port: url.port,\n            protocol: url.protocol,\n        };\n        return new Promise(function (resolve) {\n            var req = protocol.request(options, function (res) {\n                res.setEncoding('utf8');\n                var responsePayload = '';\n                res.on('data', function (chunk) {\n                    responsePayload += chunk;\n                });\n                res.on('end', function () {\n                    if (res.complete && responsePayload.length > 0) {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            var parsedResponsePayload = JSON.parse(responsePayload);\n                            var result = _this.buildResponse(parsedResponsePayload);\n                            resolve(result);\n                            return;\n                        }\n                        catch (_a) {\n                            resolve(null);\n                        }\n                    }\n                });\n            });\n            req.on('error', function () { return resolve(null); });\n            req.end(requestPayload);\n        });\n    };\n    return Http;\n}(BaseTransport));\nexport { Http };\n//# sourceMappingURL=http.js.map"],"names":["__extends","Http","http","https","BaseTransport"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAIG,IAAC;AAAA;AAAA,EAAsB,SAAU,QAAQ;AACxCA,wBAAUC,OAAM,MAAM;AACtB,aAASA,QAAO;AACZ,aAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,SAAS,KAAK;AAAA,IAC9D;AACD,IAAAA,MAAK,UAAU,OAAO,SAAU,WAAW,SAAS;AAChD,UAAI,QAAQ;AACZ,UAAI;AACJ,UAAI,UAAU,WAAW,SAAS,GAAG;AACjC,mBAAWC;AAAAA,MACd,WACQ,UAAU,WAAW,UAAU,GAAG;AACvC,mBAAWC;AAAAA,MACd,OACI;AACD,cAAM,IAAI,MAAM,oBAAoB;AAAA,MACvC;AACD,UAAI,MAAM,IAAI,IAAI,SAAS;AAC3B,UAAI,iBAAiB,KAAK,UAAU,OAAO;AAC3C,UAAI,UAAU;AAAA,QACV,SAAS;AAAA,UACL,gBAAgB;AAAA,UAChB,kBAAkB,OAAO,WAAW,cAAc;AAAA,QACrD;AAAA,QACD,UAAU,IAAI;AAAA,QACd,QAAQ;AAAA,QACR,MAAM,IAAI;AAAA,QACV,MAAM,IAAI;AAAA,QACV,UAAU,IAAI;AAAA,MAC1B;AACQ,aAAO,IAAI,QAAQ,SAAU,SAAS;AAClC,YAAI,MAAM,SAAS,QAAQ,SAAS,SAAU,KAAK;AAC/C,cAAI,YAAY,MAAM;AACtB,cAAI,kBAAkB;AACtB,cAAI,GAAG,QAAQ,SAAU,OAAO;AAC5B,+BAAmB;AAAA,UACvC,CAAiB;AACD,cAAI,GAAG,OAAO,WAAY;AACtB,gBAAI,IAAI,YAAY,gBAAgB,SAAS,GAAG;AAC5C,kBAAI;AAEA,oBAAI,wBAAwB,KAAK,MAAM,eAAe;AACtD,oBAAI,SAAS,MAAM,cAAc,qBAAqB;AACtD,wBAAQ,MAAM;AACd;AAAA,cACH,SACM,IAAP;AACI,wBAAQ,IAAI;AAAA,cACf;AAAA,YACJ;AAAA,UACrB,CAAiB;AAAA,QACjB,CAAa;AACD,YAAI,GAAG,SAAS,WAAY;AAAE,iBAAO,QAAQ,IAAI;AAAA,QAAE,CAAE;AACrD,YAAI,IAAI,cAAc;AAAA,MAClC,CAAS;AAAA,IACT;AACI,WAAOF;AAAA,EACX,EAAEG,kBAAa;AAAA;;","x_google_ignoreList":[0]}