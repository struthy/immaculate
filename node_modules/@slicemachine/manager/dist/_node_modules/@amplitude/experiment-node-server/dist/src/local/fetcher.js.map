{"version":3,"file":"fetcher.js","sources":["../../../../../../../../../node_modules/@amplitude/experiment-node-server/dist/src/local/fetcher.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FlagConfigFetcher = void 0;\nconst experiment_core_1 = require(\"@amplitude/experiment-core\");\nconst version_1 = require(\"../../gen/version\");\nconst http_1 = require(\"../transport/http\");\nconst config_1 = require(\"../types/config\");\nconst logger_1 = require(\"../util/logger\");\nconst FLAG_CONFIG_TIMEOUT = 5000;\nclass FlagConfigFetcher {\n    constructor(apiKey, httpClient, serverUrl = config_1.LocalEvaluationDefaults.serverUrl, debug = false) {\n        this.apiKey = apiKey;\n        this.serverUrl = serverUrl;\n        this.flagApi = new experiment_core_1.SdkFlagApi(apiKey, serverUrl, new http_1.WrapperClient(httpClient));\n        this.logger = new logger_1.ConsoleLogger(debug);\n    }\n    /**\n     * Fetch local evaluation mode flag configs from the Experiment API server.\n     * These flag configs can be used to perform local evaluation.\n     *\n     * @returns The local evaluation mode flag configs for the initialized\n     * environment\n     */\n    fetch() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const flags = this.flagApi.getFlags({\n                libraryName: 'experiment-node-server',\n                libraryVersion: version_1.version,\n                evaluationMode: 'local',\n                timeoutMillis: FLAG_CONFIG_TIMEOUT,\n            });\n            if (this.receiver) {\n                this.receiver(JSON.stringify(flags));\n            }\n            return flags;\n        });\n    }\n    setRawReceiver(rawReceiver) {\n        this.receiver = rawReceiver;\n    }\n}\nexports.FlagConfigFetcher = FlagConfigFetcher;\n"],"names":["this","require$$0","require$$1","require$$2","require$$3","require$$4"],"mappings":";;;;;;;;;;;AACA,IAAI,YAAaA,kBAAQA,eAAK,aAAc,SAAU,SAAS,YAAY,GAAG,WAAW;AACrF,WAAS,MAAM,OAAO;AAAE,WAAO,iBAAiB,IAAI,QAAQ,IAAI,EAAE,SAAU,SAAS;AAAE,cAAQ,KAAK;AAAA,IAAE,CAAE;AAAA,EAAI;AAC5G,SAAO,KAAK,MAAM,IAAI,UAAU,SAAU,SAAS,QAAQ;AACvD,aAAS,UAAU,OAAO;AAAE,UAAI;AAAE,aAAK,UAAU,KAAK,KAAK,CAAC;AAAA,MAAE,SAAU,GAAP;AAAY,eAAO,CAAC;AAAA;IAAM;AAC3F,aAAS,SAAS,OAAO;AAAE,UAAI;AAAE,aAAK,UAAU,OAAO,EAAE,KAAK,CAAC;AAAA,MAAI,SAAQ,GAAP;AAAY,eAAO,CAAC;AAAA;IAAM;AAC9F,aAAS,KAAK,QAAQ;AAAE,aAAO,OAAO,QAAQ,OAAO,KAAK,IAAI,MAAM,OAAO,KAAK,EAAE,KAAK,WAAW,QAAQ;AAAA,IAAI;AAC9G,UAAM,YAAY,UAAU,MAAM,SAAS,cAAc,CAAE,CAAA,GAAG,KAAI,CAAE;AAAA,EAC5E,CAAK;AACL;AACA,OAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAI,CAAE;AACnC,QAAA,oBAAG;AAC5B,MAAM,oBAAoBC;AAC1B,MAAM,YAAYC;AAClB,MAAM,SAASC;AACf,MAAM,WAAWC;AACjB,MAAM,WAAWC;AACjB,MAAM,sBAAsB;AAC5B,MAAM,kBAAkB;AAAA,EACpB,YAAY,QAAQ,YAAY,YAAY,SAAS,wBAAwB,WAAW,QAAQ,OAAO;AACnG,SAAK,SAAS;AACd,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,kBAAkB,WAAW,QAAQ,WAAW,IAAI,OAAO,cAAc,UAAU,CAAC;AACvG,SAAK,SAAS,IAAI,SAAS,cAAc,KAAK;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,QAAQ;AACJ,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAChD,YAAM,QAAQ,KAAK,QAAQ,SAAS;AAAA,QAChC,aAAa;AAAA,QACb,gBAAgB,UAAU;AAAA,QAC1B,gBAAgB;AAAA,QAChB,eAAe;AAAA,MAC/B,CAAa;AACD,UAAI,KAAK,UAAU;AACf,aAAK,SAAS,KAAK,UAAU,KAAK,CAAC;AAAA,MACtC;AACD,aAAO;AAAA,IACnB,CAAS;AAAA,EACJ;AAAA,EACD,eAAe,aAAa;AACxB,SAAK,WAAW;AAAA,EACnB;AACL;AACA,QAAA,oBAA4B;","x_google_ignoreList":[0]}