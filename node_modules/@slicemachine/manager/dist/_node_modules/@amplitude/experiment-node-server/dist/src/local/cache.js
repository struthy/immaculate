import { commonjsGlobal } from "../../../../../../_virtual/_commonjsHelpers.js";
import { __exports as cache } from "../../../../../../_virtual/cache.js";
var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(cache, "__esModule", { value: true });
cache.InMemoryFlagConfigCache = void 0;
class InMemoryFlagConfigCache {
  constructor(store, flagConfigs = {}) {
    this.store = store;
    this.cache = flagConfigs;
  }
  getAllCached() {
    return Object.assign({}, this.cache);
  }
  get(flagKey) {
    return __awaiter(this, void 0, void 0, function* () {
      return this.cache[flagKey];
    });
  }
  getAll() {
    return __awaiter(this, void 0, void 0, function* () {
      return Object.assign({}, this.cache);
    });
  }
  put(flagKey, flagConfig) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      this.cache[flagKey] = flagConfig;
      yield (_a = this.store) === null || _a === void 0 ? void 0 : _a.put(flagKey, flagConfig);
    });
  }
  putAll(flagConfigs) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      for (const key in flagConfigs) {
        const flag = flagConfigs[key];
        if (flag) {
          this.cache[key] = flag;
        }
      }
      yield (_a = this.store) === null || _a === void 0 ? void 0 : _a.putAll(flagConfigs);
    });
  }
  delete(flagKey) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      delete this.cache[flagKey];
      yield (_a = this.store) === null || _a === void 0 ? void 0 : _a.delete(flagKey);
    });
  }
  clear() {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      this.cache = {};
      yield (_a = this.store) === null || _a === void 0 ? void 0 : _a.clear();
    });
  }
}
cache.InMemoryFlagConfigCache = InMemoryFlagConfigCache;
export {
  cache as default
};
//# sourceMappingURL=cache.js.map
