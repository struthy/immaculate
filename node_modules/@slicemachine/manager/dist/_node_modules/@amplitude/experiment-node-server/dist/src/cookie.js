import { __exports as cookie } from "../../../../../_virtual/cookie.js";
import "./util/logger.js";
import { __exports as logger } from "../../../../../_virtual/logger.js";
Object.defineProperty(cookie, "__esModule", { value: true });
cookie.AmplitudeCookie = void 0;
const logger_1 = logger;
class AmplitudeCookie {
  /**
   * @param amplitudeApiKey The Amplitude API Key
   * @param newFormat True if the cookie is in the Browser SDK 2.0 format
   * @returns The cookie name that Amplitude sets for the provided
   * Amplitude API Key
   */
  static cookieName(amplitudeApiKey, newFormat = false) {
    if (newFormat) {
      if ((amplitudeApiKey === null || amplitudeApiKey === void 0 ? void 0 : amplitudeApiKey.length) < 10) {
        throw Error("Invalid Amplitude API Key");
      } else {
        return "AMP_" + amplitudeApiKey.substring(0, 10);
      }
    }
    if ((amplitudeApiKey === null || amplitudeApiKey === void 0 ? void 0 : amplitudeApiKey.length) < 6) {
      throw Error("Invalid Amplitude API Key");
    }
    return "amp_" + amplitudeApiKey.substring(0, 6);
  }
  /**
   * @param amplitudeCookie A string from the amplitude cookie
   * @param newFormat True if the cookie is in the Browser SDK 2.0 format
   * @returns a ExperimentUser context containing a device_id and user_id
   * (if available)
   */
  static parse(amplitudeCookie, newFormat = false) {
    if (newFormat) {
      const decoding = Buffer.from(amplitudeCookie, "base64").toString("utf-8");
      try {
        const userSession = JSON.parse(decodeURIComponent(decoding));
        return {
          device_id: userSession.deviceId,
          user_id: userSession.userId
        };
      } catch (e) {
        const logger2 = new logger_1.ConsoleLogger(true);
        logger2.error(`Error parsing the Amplitude cookie: ${e.message}`);
        return {};
      }
    }
    const values = amplitudeCookie.split(".");
    let user_id = void 0;
    if (values[1]) {
      try {
        user_id = Buffer.from(values[1], "base64").toString("utf-8");
      } catch (e) {
        user_id = void 0;
      }
    }
    return {
      device_id: values[0],
      user_id
    };
  }
  /**
   * Generates a cookie string to set for the Amplitude Javascript SDK
   * @param deviceId A device id to set
   * @param newFormat True if the cookie is in the Browser SDK 2.0 format
   * @returns A cookie string to set for the Amplitude Javascript SDK to read
   */
  static generate(deviceId, newFormat = false) {
    if (!newFormat) {
      return deviceId + "..........";
    }
    const userSessionHash = {
      deviceId
    };
    const json_data = JSON.stringify(userSessionHash);
    const encoded_json = encodeURIComponent(json_data);
    const base64Encoded = Buffer.from(encoded_json).toString("base64");
    return base64Encoded;
  }
}
cookie.AmplitudeCookie = AmplitudeCookie;
export {
  cookie as default
};
//# sourceMappingURL=cookie.js.map
