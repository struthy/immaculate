"use strict";
const _commonjsHelpers = require("../../../../../../_virtual/_commonjsHelpers.cjs");
const poller = require("../../../../../../_virtual/poller.cjs");
require("../types/config.cjs");
require("../util/backoff.cjs");
require("../util/logger.cjs");
const config = require("../../../../../../_virtual/config.cjs");
const backoff = require("../../../../../../_virtual/backoff.cjs");
const logger = require("../../../../../../_virtual/logger.cjs");
var __awaiter = _commonjsHelpers.commonjsGlobal && _commonjsHelpers.commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(poller.__exports, "__esModule", { value: true });
poller.__exports.FlagConfigPoller = void 0;
const config_1 = config.__exports;
const backoff_1 = backoff.__exports;
const logger_1 = logger.__exports;
const BACKOFF_POLICY = {
  attempts: 5,
  min: 1,
  max: 1,
  scalar: 1
};
class FlagConfigPoller {
  constructor(fetcher, cache, pollingIntervalMillis = config_1.LocalEvaluationDefaults.flagConfigPollingIntervalMillis, debug = false) {
    this.fetcher = fetcher;
    this.cache = cache;
    this.pollingIntervalMillis = pollingIntervalMillis;
    this.logger = new logger_1.ConsoleLogger(debug);
  }
  /**
   * Fetch initial flag configurations and start polling for updates.
   *
   * You must call this function to begin polling for flag config updates.
   * The promise returned by this function is resolved when the initial call
   * to fetch the flag configuration completes.
   *
   * Calling this function while the poller is already running does nothing.
   */
  start(onChange) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.poller) {
        this.logger.debug("[Experiment] poller - start");
        this.poller = setInterval(() => __awaiter(this, void 0, void 0, function* () {
          try {
            yield this.update(onChange);
          } catch (e) {
            this.logger.debug("[Experiment] flag config update failed", e);
          }
        }), this.pollingIntervalMillis);
        yield (0, backoff_1.doWithBackoff)(() => __awaiter(this, void 0, void 0, function* () {
          yield this.update(onChange);
        }), BACKOFF_POLICY);
      }
    });
  }
  /**
   * Stop polling for flag configurations.
   *
   * Calling this function while the poller is not running will do nothing.
   */
  stop() {
    if (this.poller) {
      this.logger.debug("[Experiment] poller - stop");
      clearTimeout(this.poller);
      this.poller = void 0;
    }
  }
  /**
   * Force a flag config fetch and cache the update with an optional callback
   * which gets called if the flag configs change in any way.
   *
   * @param onChange optional callback which will get called if the flag configs
   * in the cache have changed.
   */
  update(onChange) {
    return __awaiter(this, void 0, void 0, function* () {
      this.logger.debug("[Experiment] updating flag configs");
      const flagConfigs = yield this.fetcher.fetch();
      let changed = false;
      if (onChange) {
        const current = yield this.cache.getAll();
        if (!Object.is(current, flagConfigs)) {
          changed = true;
        }
      }
      yield this.cache.clear();
      yield this.cache.putAll(flagConfigs);
      if (changed) {
        yield onChange(this.cache);
      }
    });
  }
}
poller.__exports.FlagConfigPoller = FlagConfigPoller;
module.exports = poller.__exports;
//# sourceMappingURL=poller.cjs.map
