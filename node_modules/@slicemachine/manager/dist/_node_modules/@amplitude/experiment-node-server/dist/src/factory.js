import { __exports as factory } from "../../../../../_virtual/factory.js";
import "./local/cache.js";
import "./local/client.js";
import "./remote/client.js";
import { __exports as cache } from "../../../../../_virtual/cache.js";
import { __exports as client } from "../../../../../_virtual/client2.js";
import { __exports as client$1 } from "../../../../../_virtual/client.js";
Object.defineProperty(factory, "__esModule", { value: true });
factory.Experiment = void 0;
const cache_1 = cache;
const client_1 = client;
const client_2 = client$1;
const remoteEvaluationInstances = {};
const localEvaluationInstances = {};
const initialize = (apiKey, config) => {
  return initializeRemote(apiKey, config);
};
const initializeRemote = (apiKey, config) => {
  if (!remoteEvaluationInstances[apiKey]) {
    remoteEvaluationInstances[apiKey] = new client_2.RemoteEvaluationClient(apiKey, config);
  }
  return remoteEvaluationInstances[apiKey];
};
const initializeLocal = (apiKey, config) => {
  if (!localEvaluationInstances[apiKey]) {
    localEvaluationInstances[apiKey] = new client_1.LocalEvaluationClient(apiKey, config, new cache_1.InMemoryFlagConfigCache());
  }
  return localEvaluationInstances[apiKey];
};
factory.Experiment = {
  initialize,
  initializeRemote,
  initializeLocal
};
export {
  factory as default
};
//# sourceMappingURL=factory.js.map
