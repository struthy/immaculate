import { commonjsGlobal } from "../../../../../../_virtual/_commonjsHelpers.js";
import { __exports as assignmentService } from "../../../../../../_virtual/assignment-service.js";
import "../util/hash.js";
import { __exports as hash } from "../../../../../../_virtual/hash.js";
(function(exports) {
  var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.toEvent = exports.AmplitudeAssignmentService = exports.FLAG_TYPE_MUTUAL_EXCLUSION_GROUP = exports.DAY_MILLIS = void 0;
  const hash_1 = hash;
  exports.DAY_MILLIS = 24 * 60 * 60 * 1e3;
  exports.FLAG_TYPE_MUTUAL_EXCLUSION_GROUP = "mutual-exclusion-group";
  class AmplitudeAssignmentService {
    constructor(amplitude, assignmentFilter) {
      this.amplitude = amplitude;
      this.assignmentFilter = assignmentFilter;
    }
    track(assignment) {
      return __awaiter(this, void 0, void 0, function* () {
        if (this.assignmentFilter.shouldTrack(assignment)) {
          this.amplitude.logEvent((0, exports.toEvent)(assignment));
        }
      });
    }
  }
  exports.AmplitudeAssignmentService = AmplitudeAssignmentService;
  const toEvent = (assignment) => {
    var _a, _b, _c, _d;
    const event = {
      event_type: "[Experiment] Assignment",
      user_id: assignment.user.user_id,
      device_id: assignment.user.device_id,
      event_properties: {},
      user_properties: {}
    };
    const set = {};
    const unset = {};
    for (const flagKey in assignment.results) {
      const variant = assignment.results[flagKey];
      if (!variant.key) {
        continue;
      }
      const version = (_a = variant.metadata) === null || _a === void 0 ? void 0 : _a.flagVersion;
      const segmentName = (_b = variant.metadata) === null || _b === void 0 ? void 0 : _b.segmentName;
      const flagType = (_c = variant.metadata) === null || _c === void 0 ? void 0 : _c.flagType;
      const isDefault = (_d = variant.metadata) === null || _d === void 0 ? void 0 : _d.default;
      event.event_properties[`${flagKey}.variant`] = variant.key;
      if (version && segmentName) {
        event.event_properties[`${flagKey}.details`] = `v${version} rule:${segmentName}`;
      }
      if (flagType != exports.FLAG_TYPE_MUTUAL_EXCLUSION_GROUP) {
        if (isDefault) {
          unset[`[Experiment] ${flagKey}`] = "-";
        } else {
          set[`[Experiment] ${flagKey}`] = variant.key;
        }
      }
    }
    event.user_properties["$set"] = set;
    event.user_properties["$unset"] = unset;
    event.insert_id = `${event.user_id} ${event.device_id} ${(0, hash_1.hashCode)(assignment.canonicalize())} ${Math.floor(assignment.timestamp / exports.DAY_MILLIS)}`;
    return event;
  };
  exports.toEvent = toEvent;
})(assignmentService);
//# sourceMappingURL=assignment-service.js.map
