"use strict";
const _commonjsHelpers = require("../../../../../../_virtual/_commonjsHelpers.cjs");
const fetcher = require("../../../../../../_virtual/fetcher.cjs");
const experimentCore_esm = require("../../../../../../_virtual/experiment-core.esm.cjs");
require("../../gen/version.cjs");
require("../transport/http.cjs");
require("../types/config.cjs");
require("../util/logger.cjs");
const version = require("../../../../../../_virtual/version.cjs");
const http = require("../../../../../../_virtual/http.cjs");
const config = require("../../../../../../_virtual/config.cjs");
const logger = require("../../../../../../_virtual/logger.cjs");
var __awaiter = _commonjsHelpers.commonjsGlobal && _commonjsHelpers.commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(fetcher.__exports, "__esModule", { value: true });
fetcher.__exports.FlagConfigFetcher = void 0;
const experiment_core_1 = experimentCore_esm;
const version_1 = version.__exports;
const http_1 = http.__exports;
const config_1 = config.__exports;
const logger_1 = logger.__exports;
const FLAG_CONFIG_TIMEOUT = 5e3;
class FlagConfigFetcher {
  constructor(apiKey, httpClient, serverUrl = config_1.LocalEvaluationDefaults.serverUrl, debug = false) {
    this.apiKey = apiKey;
    this.serverUrl = serverUrl;
    this.flagApi = new experiment_core_1.SdkFlagApi(apiKey, serverUrl, new http_1.WrapperClient(httpClient));
    this.logger = new logger_1.ConsoleLogger(debug);
  }
  /**
   * Fetch local evaluation mode flag configs from the Experiment API server.
   * These flag configs can be used to perform local evaluation.
   *
   * @returns The local evaluation mode flag configs for the initialized
   * environment
   */
  fetch() {
    return __awaiter(this, void 0, void 0, function* () {
      const flags = this.flagApi.getFlags({
        libraryName: "experiment-node-server",
        libraryVersion: version_1.version,
        evaluationMode: "local",
        timeoutMillis: FLAG_CONFIG_TIMEOUT
      });
      if (this.receiver) {
        this.receiver(JSON.stringify(flags));
      }
      return flags;
    });
  }
  setRawReceiver(rawReceiver) {
    this.receiver = rawReceiver;
  }
}
fetcher.__exports.FlagConfigFetcher = FlagConfigFetcher;
module.exports = fetcher.__exports;
//# sourceMappingURL=fetcher.cjs.map
