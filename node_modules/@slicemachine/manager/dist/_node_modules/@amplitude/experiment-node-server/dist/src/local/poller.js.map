{"version":3,"file":"poller.js","sources":["../../../../../../../../../node_modules/@amplitude/experiment-node-server/dist/src/local/poller.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FlagConfigPoller = void 0;\nconst config_1 = require(\"../types/config\");\nconst backoff_1 = require(\"../util/backoff\");\nconst logger_1 = require(\"../util/logger\");\nconst BACKOFF_POLICY = {\n    attempts: 5,\n    min: 1,\n    max: 1,\n    scalar: 1,\n};\nclass FlagConfigPoller {\n    constructor(fetcher, cache, pollingIntervalMillis = config_1.LocalEvaluationDefaults.flagConfigPollingIntervalMillis, debug = false) {\n        this.fetcher = fetcher;\n        this.cache = cache;\n        this.pollingIntervalMillis = pollingIntervalMillis;\n        this.logger = new logger_1.ConsoleLogger(debug);\n    }\n    /**\n     * Fetch initial flag configurations and start polling for updates.\n     *\n     * You must call this function to begin polling for flag config updates.\n     * The promise returned by this function is resolved when the initial call\n     * to fetch the flag configuration completes.\n     *\n     * Calling this function while the poller is already running does nothing.\n     */\n    start(onChange) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.poller) {\n                this.logger.debug('[Experiment] poller - start');\n                this.poller = setInterval(() => __awaiter(this, void 0, void 0, function* () {\n                    try {\n                        yield this.update(onChange);\n                    }\n                    catch (e) {\n                        this.logger.debug('[Experiment] flag config update failed', e);\n                    }\n                }), this.pollingIntervalMillis);\n                // Fetch initial flag configs and await the result.\n                yield (0, backoff_1.doWithBackoff)(() => __awaiter(this, void 0, void 0, function* () {\n                    yield this.update(onChange);\n                }), BACKOFF_POLICY);\n            }\n        });\n    }\n    /**\n     * Stop polling for flag configurations.\n     *\n     * Calling this function while the poller is not running will do nothing.\n     */\n    stop() {\n        if (this.poller) {\n            this.logger.debug('[Experiment] poller - stop');\n            clearTimeout(this.poller);\n            this.poller = undefined;\n        }\n    }\n    /**\n     * Force a flag config fetch and cache the update with an optional callback\n     * which gets called if the flag configs change in any way.\n     *\n     * @param onChange optional callback which will get called if the flag configs\n     * in the cache have changed.\n     */\n    update(onChange) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.debug('[Experiment] updating flag configs');\n            const flagConfigs = yield this.fetcher.fetch();\n            let changed = false;\n            if (onChange) {\n                const current = yield this.cache.getAll();\n                if (!Object.is(current, flagConfigs)) {\n                    changed = true;\n                }\n            }\n            yield this.cache.clear();\n            yield this.cache.putAll(flagConfigs);\n            if (changed) {\n                yield onChange(this.cache);\n            }\n        });\n    }\n}\nexports.FlagConfigPoller = FlagConfigPoller;\n"],"names":["this","require$$0","require$$1","require$$2"],"mappings":"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","x_google_ignoreList":[0]}