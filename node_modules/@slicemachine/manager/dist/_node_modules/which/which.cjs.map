{"version":3,"file":"which.cjs","sources":["../../../../../node_modules/which/which.js"],"sourcesContent":["const isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nconst path = require('path')\nconst COLON = isWindows ? ';' : ':'\nconst isexe = require('isexe')\n\nconst getNotFoundError = (cmd) =>\n  Object.assign(new Error(`not found: ${cmd}`), { code: 'ENOENT' })\n\nconst getPathInfo = (cmd, opt) => {\n  const colon = opt.colon || COLON\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  const pathEnv = cmd.match(/\\//) || isWindows && cmd.match(/\\\\/) ? ['']\n    : (\n      [\n        // windows always checks the cwd first\n        ...(isWindows ? [process.cwd()] : []),\n        ...(opt.path || process.env.PATH ||\n          /* istanbul ignore next: very unusual */ '').split(colon),\n      ]\n    )\n  const pathExtExe = isWindows\n    ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'\n    : ''\n  const pathExt = isWindows ? pathExtExe.split(colon) : ['']\n\n  if (isWindows) {\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  return {\n    pathEnv,\n    pathExt,\n    pathExtExe,\n  }\n}\n\nconst which = (cmd, opt, cb) => {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n  if (!opt)\n    opt = {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  const step = i => new Promise((resolve, reject) => {\n    if (i === pathEnv.length)\n      return opt.all && found.length ? resolve(found)\n        : reject(getNotFoundError(cmd))\n\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    resolve(subStep(p, i, 0))\n  })\n\n  const subStep = (p, i, ii) => new Promise((resolve, reject) => {\n    if (ii === pathExt.length)\n      return resolve(step(i + 1))\n    const ext = pathExt[ii]\n    isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {\n      if (!er && is) {\n        if (opt.all)\n          found.push(p + ext)\n        else\n          return resolve(p + ext)\n      }\n      return resolve(subStep(p, i, ii + 1))\n    })\n  })\n\n  return cb ? step(0).then(res => cb(null, res), cb) : step(0)\n}\n\nconst whichSync = (cmd, opt) => {\n  opt = opt || {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  for (let i = 0; i < pathEnv.length; i ++) {\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    for (let j = 0; j < pathExt.length; j ++) {\n      const cur = p + pathExt[j]\n      try {\n        const is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  if (opt.nothrow)\n    return null\n\n  throw getNotFoundError(cmd)\n}\n\nmodule.exports = which\nwhich.sync = whichSync\n"],"names":["require$$1"],"mappings":"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","x_google_ignoreList":[0]}