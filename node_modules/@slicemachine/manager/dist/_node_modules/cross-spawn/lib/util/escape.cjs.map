{"version":3,"file":"escape.cjs","sources":["../../../../../../../node_modules/cross-spawn/lib/util/escape.js"],"sourcesContent":["'use strict';\n\n// See http://www.robvanderwoude.com/escapechars.php\nconst metaCharsRegExp = /([()\\][%!^\"`<>&|;, *?])/g;\n\nfunction escapeCommand(arg) {\n    // Escape meta chars\n    arg = arg.replace(metaCharsRegExp, '^$1');\n\n    return arg;\n}\n\nfunction escapeArgument(arg, doubleEscapeMetaChars) {\n    // Convert to string\n    arg = `${arg}`;\n\n    // Algorithm below is based on https://qntm.org/cmd\n\n    // Sequence of backslashes followed by a double quote:\n    // double up all the backslashes and escape the double quote\n    arg = arg.replace(/(\\\\*)\"/g, '$1$1\\\\\"');\n\n    // Sequence of backslashes followed by the end of the string\n    // (which will become a double quote later):\n    // double up all the backslashes\n    arg = arg.replace(/(\\\\*)$/, '$1$1');\n\n    // All other backslashes occur literally\n\n    // Quote the whole thing:\n    arg = `\"${arg}\"`;\n\n    // Escape meta chars\n    arg = arg.replace(metaCharsRegExp, '^$1');\n\n    // Double escape meta chars if necessary\n    if (doubleEscapeMetaChars) {\n        arg = arg.replace(metaCharsRegExp, '^$1');\n    }\n\n    return arg;\n}\n\nmodule.exports.command = escapeCommand;\nmodule.exports.argument = escapeArgument;\n"],"names":["_escape"],"mappings":";;AAGA,MAAM,kBAAkB;AAExB,SAAS,cAAc,KAAK;AAExB,QAAM,IAAI,QAAQ,iBAAiB,KAAK;AAExC,SAAO;AACX;AAEA,SAAS,eAAe,KAAK,uBAAuB;AAEhD,QAAM,GAAG;AAMT,QAAM,IAAI,QAAQ,WAAW,SAAS;AAKtC,QAAM,IAAI,QAAQ,UAAU,MAAM;AAKlC,QAAM,IAAI;AAGV,QAAM,IAAI,QAAQ,iBAAiB,KAAK;AAGxC,MAAI,uBAAuB;AACvB,UAAM,IAAI,QAAQ,iBAAiB,KAAK;AAAA,EAC3C;AAED,SAAO;AACX;AAEsBA,OAAA,UAAA,UAAG;AACzBA,OAAA,UAAA,WAA0B;;","x_google_ignoreList":[0]}