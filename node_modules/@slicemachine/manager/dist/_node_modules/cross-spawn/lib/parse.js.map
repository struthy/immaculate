{"version":3,"file":"parse.js","sources":["../../../../../../node_modules/cross-spawn/lib/parse.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\nconst resolveCommand = require('./util/resolveCommand');\nconst escape = require('./util/escape');\nconst readShebang = require('./util/readShebang');\n\nconst isWin = process.platform === 'win32';\nconst isExecutableRegExp = /\\.(?:com|exe)$/i;\nconst isCmdShimRegExp = /node_modules[\\\\/].bin[\\\\/][^\\\\/]+\\.cmd$/i;\n\nfunction detectShebang(parsed) {\n    parsed.file = resolveCommand(parsed);\n\n    const shebang = parsed.file && readShebang(parsed.file);\n\n    if (shebang) {\n        parsed.args.unshift(parsed.file);\n        parsed.command = shebang;\n\n        return resolveCommand(parsed);\n    }\n\n    return parsed.file;\n}\n\nfunction parseNonShell(parsed) {\n    if (!isWin) {\n        return parsed;\n    }\n\n    // Detect & add support for shebangs\n    const commandFile = detectShebang(parsed);\n\n    // We don't need a shell if the command filename is an executable\n    const needsShell = !isExecutableRegExp.test(commandFile);\n\n    // If a shell is required, use cmd.exe and take care of escaping everything correctly\n    // Note that `forceShell` is an hidden option used only in tests\n    if (parsed.options.forceShell || needsShell) {\n        // Need to double escape meta chars if the command is a cmd-shim located in `node_modules/.bin/`\n        // The cmd-shim simply calls execute the package bin file with NodeJS, proxying any argument\n        // Because the escape of metachars with ^ gets interpreted when the cmd.exe is first called,\n        // we need to double escape them\n        const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);\n\n        // Normalize posix paths into OS compatible paths (e.g.: foo/bar -> foo\\bar)\n        // This is necessary otherwise it will always fail with ENOENT in those cases\n        parsed.command = path.normalize(parsed.command);\n\n        // Escape command & arguments\n        parsed.command = escape.command(parsed.command);\n        parsed.args = parsed.args.map((arg) => escape.argument(arg, needsDoubleEscapeMetaChars));\n\n        const shellCommand = [parsed.command].concat(parsed.args).join(' ');\n\n        parsed.args = ['/d', '/s', '/c', `\"${shellCommand}\"`];\n        parsed.command = process.env.comspec || 'cmd.exe';\n        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped\n    }\n\n    return parsed;\n}\n\nfunction parse(command, args, options) {\n    // Normalize arguments, similar to nodejs\n    if (args && !Array.isArray(args)) {\n        options = args;\n        args = null;\n    }\n\n    args = args ? args.slice(0) : []; // Clone array to avoid changing the original\n    options = Object.assign({}, options); // Clone object to avoid changing the original\n\n    // Build our parsed object\n    const parsed = {\n        command,\n        args,\n        options,\n        file: undefined,\n        original: {\n            command,\n            args,\n        },\n    };\n\n    // Delegate further parsing to shell or non-shell\n    return options.shell ? parsed : parseNonShell(parsed);\n}\n\nmodule.exports = parse;\n"],"names":["require$$1","require$$2","require$$3"],"mappings":";;;;;AAEA,MAAM,OAAO;AACb,MAAM,iBAAiBA;AACvB,MAAM,SAASC;AACf,MAAM,cAAcC;AAEpB,MAAM,QAAQ,QAAQ,aAAa;AACnC,MAAM,qBAAqB;AAC3B,MAAM,kBAAkB;AAExB,SAAS,cAAc,QAAQ;AAC3B,SAAO,OAAO,eAAe,MAAM;AAEnC,QAAM,UAAU,OAAO,QAAQ,YAAY,OAAO,IAAI;AAEtD,MAAI,SAAS;AACT,WAAO,KAAK,QAAQ,OAAO,IAAI;AAC/B,WAAO,UAAU;AAEjB,WAAO,eAAe,MAAM;AAAA,EAC/B;AAED,SAAO,OAAO;AAClB;AAEA,SAAS,cAAc,QAAQ;AAC3B,MAAI,CAAC,OAAO;AACR,WAAO;AAAA,EACV;AAGD,QAAM,cAAc,cAAc,MAAM;AAGxC,QAAM,aAAa,CAAC,mBAAmB,KAAK,WAAW;AAIvD,MAAI,OAAO,QAAQ,cAAc,YAAY;AAKzC,UAAM,6BAA6B,gBAAgB,KAAK,WAAW;AAInE,WAAO,UAAU,KAAK,UAAU,OAAO,OAAO;AAG9C,WAAO,UAAU,OAAO,QAAQ,OAAO,OAAO;AAC9C,WAAO,OAAO,OAAO,KAAK,IAAI,CAAC,QAAQ,OAAO,SAAS,KAAK,0BAA0B,CAAC;AAEvF,UAAM,eAAe,CAAC,OAAO,OAAO,EAAE,OAAO,OAAO,IAAI,EAAE,KAAK,GAAG;AAElE,WAAO,OAAO,CAAC,MAAM,MAAM,MAAM,IAAI,eAAe;AACpD,WAAO,UAAU,QAAQ,IAAI,WAAW;AACxC,WAAO,QAAQ,2BAA2B;AAAA,EAC7C;AAED,SAAO;AACX;AAEA,SAAS,MAAM,SAAS,MAAM,SAAS;AAEnC,MAAI,QAAQ,CAAC,MAAM,QAAQ,IAAI,GAAG;AAC9B,cAAU;AACV,WAAO;AAAA,EACV;AAED,SAAO,OAAO,KAAK,MAAM,CAAC,IAAI,CAAA;AAC9B,YAAU,OAAO,OAAO,CAAE,GAAE,OAAO;AAGnC,QAAM,SAAS;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAM;AAAA,IACN,UAAU;AAAA,MACN;AAAA,MACA;AAAA,IACH;AAAA,EACT;AAGI,SAAO,QAAQ,QAAQ,SAAS,cAAc,MAAM;AACxD;AAEA,IAAA,UAAiB;","x_google_ignoreList":[0]}