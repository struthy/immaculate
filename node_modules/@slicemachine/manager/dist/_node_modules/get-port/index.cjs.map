{"version":3,"file":"index.cjs","sources":["../../../../../node_modules/get-port/index.js"],"sourcesContent":["import net from 'node:net';\nimport os from 'node:os';\n\nclass Locked extends Error {\n\tconstructor(port) {\n\t\tsuper(`${port} is locked`);\n\t}\n}\n\nconst lockedPorts = {\n\told: new Set(),\n\tyoung: new Set(),\n};\n\n// On this interval, the old locked ports are discarded,\n// the young locked ports are moved to old locked ports,\n// and a new young set for locked ports are created.\nconst releaseOldLockedPortsIntervalMs = 1000 * 15;\n\nconst minPort = 1024;\nconst maxPort = 65_535;\n\n// Lazily create interval on first use\nlet interval;\n\nconst getLocalHosts = () => {\n\tconst interfaces = os.networkInterfaces();\n\n\t// Add undefined value for createServer function to use default host,\n\t// and default IPv4 host in case createServer defaults to IPv6.\n\tconst results = new Set([undefined, '0.0.0.0']);\n\n\tfor (const _interface of Object.values(interfaces)) {\n\t\tfor (const config of _interface) {\n\t\t\tresults.add(config.address);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nconst checkAvailablePort = options =>\n\tnew Promise((resolve, reject) => {\n\t\tconst server = net.createServer();\n\t\tserver.unref();\n\t\tserver.on('error', reject);\n\n\t\tserver.listen(options, () => {\n\t\t\tconst {port} = server.address();\n\t\t\tserver.close(() => {\n\t\t\t\tresolve(port);\n\t\t\t});\n\t\t});\n\t});\n\nconst getAvailablePort = async (options, hosts) => {\n\tif (options.host || options.port === 0) {\n\t\treturn checkAvailablePort(options);\n\t}\n\n\tfor (const host of hosts) {\n\t\ttry {\n\t\t\tawait checkAvailablePort({port: options.port, host}); // eslint-disable-line no-await-in-loop\n\t\t} catch (error) {\n\t\t\tif (!['EADDRNOTAVAIL', 'EINVAL'].includes(error.code)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn options.port;\n};\n\nconst portCheckSequence = function * (ports) {\n\tif (ports) {\n\t\tyield * ports;\n\t}\n\n\tyield 0; // Fall back to 0 if anything else failed\n};\n\nexport default async function getPorts(options) {\n\tlet ports;\n\tlet exclude = new Set();\n\n\tif (options) {\n\t\tif (options.port) {\n\t\t\tports = typeof options.port === 'number' ? [options.port] : options.port;\n\t\t}\n\n\t\tif (options.exclude) {\n\t\t\tconst excludeIterable = options.exclude;\n\n\t\t\tif (typeof excludeIterable[Symbol.iterator] !== 'function') {\n\t\t\t\tthrow new TypeError('The `exclude` option must be an iterable.');\n\t\t\t}\n\n\t\t\tfor (const element of excludeIterable) {\n\t\t\t\tif (typeof element !== 'number') {\n\t\t\t\t\tthrow new TypeError('Each item in the `exclude` option must be a number corresponding to the port you want excluded.');\n\t\t\t\t}\n\n\t\t\t\tif (!Number.isSafeInteger(element)) {\n\t\t\t\t\tthrow new TypeError(`Number ${element} in the exclude option is not a safe integer and can't be used`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\texclude = new Set(excludeIterable);\n\t\t}\n\t}\n\n\tif (interval === undefined) {\n\t\tinterval = setInterval(() => {\n\t\t\tlockedPorts.old = lockedPorts.young;\n\t\t\tlockedPorts.young = new Set();\n\t\t}, releaseOldLockedPortsIntervalMs);\n\n\t\t// Does not exist in some environments (Electron, Jest jsdom env, browser, etc).\n\t\tif (interval.unref) {\n\t\t\tinterval.unref();\n\t\t}\n\t}\n\n\tconst hosts = getLocalHosts();\n\n\tfor (const port of portCheckSequence(ports)) {\n\t\ttry {\n\t\t\tif (exclude.has(port)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet availablePort = await getAvailablePort({...options, port}, hosts); // eslint-disable-line no-await-in-loop\n\t\t\twhile (lockedPorts.old.has(availablePort) || lockedPorts.young.has(availablePort)) {\n\t\t\t\tif (port !== 0) {\n\t\t\t\t\tthrow new Locked(port);\n\t\t\t\t}\n\n\t\t\t\tavailablePort = await getAvailablePort({...options, port}, hosts); // eslint-disable-line no-await-in-loop\n\t\t\t}\n\n\t\t\tlockedPorts.young.add(availablePort);\n\n\t\t\treturn availablePort;\n\t\t} catch (error) {\n\t\t\tif (!['EADDRINUSE', 'EACCES'].includes(error.code) && !(error instanceof Locked)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow new Error('No available ports found');\n}\n\nexport function portNumbers(from, to) {\n\tif (!Number.isInteger(from) || !Number.isInteger(to)) {\n\t\tthrow new TypeError('`from` and `to` must be integer numbers');\n\t}\n\n\tif (from < minPort || from > maxPort) {\n\t\tthrow new RangeError(`'from' must be between ${minPort} and ${maxPort}`);\n\t}\n\n\tif (to < minPort || to > maxPort) {\n\t\tthrow new RangeError(`'to' must be between ${minPort} and ${maxPort}`);\n\t}\n\n\tif (from > to) {\n\t\tthrow new RangeError('`to` must be greater than or equal to `from`');\n\t}\n\n\tconst generator = function * (from, to) {\n\t\tfor (let port = from; port <= to; port++) {\n\t\t\tyield port;\n\t\t}\n\t};\n\n\treturn generator(from, to);\n}\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}