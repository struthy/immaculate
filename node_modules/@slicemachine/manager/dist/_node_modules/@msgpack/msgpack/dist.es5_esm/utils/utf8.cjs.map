{"version":3,"file":"utf8.cjs","sources":["../../../../../../../../node_modules/@msgpack/msgpack/dist.es5+esm/utils/utf8.mjs"],"sourcesContent":["var _a, _b, _c;\n/* eslint-disable @typescript-eslint/no-unnecessary-condition */\nimport { UINT32_MAX } from \"./int.mjs\";\nvar TEXT_ENCODING_AVAILABLE = (typeof process === \"undefined\" || ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a[\"TEXT_ENCODING\"]) !== \"never\") &&\n    typeof TextEncoder !== \"undefined\" &&\n    typeof TextDecoder !== \"undefined\";\nexport function utf8Count(str) {\n    var strLength = str.length;\n    var byteLength = 0;\n    var pos = 0;\n    while (pos < strLength) {\n        var value = str.charCodeAt(pos++);\n        if ((value & 0xffffff80) === 0) {\n            // 1-byte\n            byteLength++;\n            continue;\n        }\n        else if ((value & 0xfffff800) === 0) {\n            // 2-bytes\n            byteLength += 2;\n        }\n        else {\n            // handle surrogate pair\n            if (value >= 0xd800 && value <= 0xdbff) {\n                // high surrogate\n                if (pos < strLength) {\n                    var extra = str.charCodeAt(pos);\n                    if ((extra & 0xfc00) === 0xdc00) {\n                        ++pos;\n                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    }\n                }\n            }\n            if ((value & 0xffff0000) === 0) {\n                // 3-byte\n                byteLength += 3;\n            }\n            else {\n                // 4-byte\n                byteLength += 4;\n            }\n        }\n    }\n    return byteLength;\n}\nexport function utf8EncodeJs(str, output, outputOffset) {\n    var strLength = str.length;\n    var offset = outputOffset;\n    var pos = 0;\n    while (pos < strLength) {\n        var value = str.charCodeAt(pos++);\n        if ((value & 0xffffff80) === 0) {\n            // 1-byte\n            output[offset++] = value;\n            continue;\n        }\n        else if ((value & 0xfffff800) === 0) {\n            // 2-bytes\n            output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\n        }\n        else {\n            // handle surrogate pair\n            if (value >= 0xd800 && value <= 0xdbff) {\n                // high surrogate\n                if (pos < strLength) {\n                    var extra = str.charCodeAt(pos);\n                    if ((extra & 0xfc00) === 0xdc00) {\n                        ++pos;\n                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    }\n                }\n            }\n            if ((value & 0xffff0000) === 0) {\n                // 3-byte\n                output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\n                output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n            }\n            else {\n                // 4-byte\n                output[offset++] = ((value >> 18) & 0x07) | 0xf0;\n                output[offset++] = ((value >> 12) & 0x3f) | 0x80;\n                output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n            }\n        }\n        output[offset++] = (value & 0x3f) | 0x80;\n    }\n}\nvar sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexport var TEXT_ENCODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n    ? UINT32_MAX\n    : typeof process !== \"undefined\" && ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b[\"TEXT_ENCODING\"]) !== \"force\"\n        ? 200\n        : 0;\nfunction utf8EncodeTEencode(str, output, outputOffset) {\n    output.set(sharedTextEncoder.encode(str), outputOffset);\n}\nfunction utf8EncodeTEencodeInto(str, output, outputOffset) {\n    sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));\n}\nexport var utf8EncodeTE = (sharedTextEncoder === null || sharedTextEncoder === void 0 ? void 0 : sharedTextEncoder.encodeInto) ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\nvar CHUNK_SIZE = 4096;\nexport function utf8DecodeJs(bytes, inputOffset, byteLength) {\n    var offset = inputOffset;\n    var end = offset + byteLength;\n    var units = [];\n    var result = \"\";\n    while (offset < end) {\n        var byte1 = bytes[offset++];\n        if ((byte1 & 0x80) === 0) {\n            // 1 byte\n            units.push(byte1);\n        }\n        else if ((byte1 & 0xe0) === 0xc0) {\n            // 2 bytes\n            var byte2 = bytes[offset++] & 0x3f;\n            units.push(((byte1 & 0x1f) << 6) | byte2);\n        }\n        else if ((byte1 & 0xf0) === 0xe0) {\n            // 3 bytes\n            var byte2 = bytes[offset++] & 0x3f;\n            var byte3 = bytes[offset++] & 0x3f;\n            units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n        }\n        else if ((byte1 & 0xf8) === 0xf0) {\n            // 4 bytes\n            var byte2 = bytes[offset++] & 0x3f;\n            var byte3 = bytes[offset++] & 0x3f;\n            var byte4 = bytes[offset++] & 0x3f;\n            var unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n            if (unit > 0xffff) {\n                unit -= 0x10000;\n                units.push(((unit >>> 10) & 0x3ff) | 0xd800);\n                unit = 0xdc00 | (unit & 0x3ff);\n            }\n            units.push(unit);\n        }\n        else {\n            units.push(byte1);\n        }\n        if (units.length >= CHUNK_SIZE) {\n            result += String.fromCharCode.apply(String, units);\n            units.length = 0;\n        }\n    }\n    if (units.length > 0) {\n        result += String.fromCharCode.apply(String, units);\n    }\n    return result;\n}\nvar sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexport var TEXT_DECODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n    ? UINT32_MAX\n    : typeof process !== \"undefined\" && ((_c = process === null || process === void 0 ? void 0 : process.env) === null || _c === void 0 ? void 0 : _c[\"TEXT_DECODER\"]) !== \"force\"\n        ? 200\n        : 0;\nexport function utf8DecodeTD(bytes, inputOffset, byteLength) {\n    var stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n    return sharedTextDecoder.decode(stringBytes);\n}\n//# sourceMappingURL=utf8.mjs.map"],"names":["UINT32_MAX"],"mappings":";;;AAAA,IAAI,IAAI,IAAI;AAGZ,IAAI,2BAA2B,OAAO,YAAY,iBAAiB,KAAK,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,SAAS,QAAQ,OAAO,SAAS,SAAS,GAAG,eAAe,OAAO,YACjM,OAAO,gBAAgB,eACvB,OAAO,gBAAgB;AACpB,SAAS,UAAU,KAAK;AAC3B,MAAI,YAAY,IAAI;AACpB,MAAI,aAAa;AACjB,MAAI,MAAM;AACV,SAAO,MAAM,WAAW;AACpB,QAAI,QAAQ,IAAI,WAAW,KAAK;AAChC,SAAK,QAAQ,gBAAgB,GAAG;AAE5B;AACA;AAAA,IACH,YACS,QAAQ,gBAAgB,GAAG;AAEjC,oBAAc;AAAA,IACjB,OACI;AAED,UAAI,SAAS,SAAU,SAAS,OAAQ;AAEpC,YAAI,MAAM,WAAW;AACjB,cAAI,QAAQ,IAAI,WAAW,GAAG;AAC9B,eAAK,QAAQ,WAAY,OAAQ;AAC7B,cAAE;AACF,sBAAU,QAAQ,SAAU,OAAO,QAAQ,QAAS;AAAA,UACvD;AAAA,QACJ;AAAA,MACJ;AACD,WAAK,QAAQ,gBAAgB,GAAG;AAE5B,sBAAc;AAAA,MACjB,OACI;AAED,sBAAc;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AACD,SAAO;AACX;AACO,SAAS,aAAa,KAAK,QAAQ,cAAc;AACpD,MAAI,YAAY,IAAI;AACpB,MAAI,SAAS;AACb,MAAI,MAAM;AACV,SAAO,MAAM,WAAW;AACpB,QAAI,QAAQ,IAAI,WAAW,KAAK;AAChC,SAAK,QAAQ,gBAAgB,GAAG;AAE5B,aAAO,QAAQ,IAAI;AACnB;AAAA,IACH,YACS,QAAQ,gBAAgB,GAAG;AAEjC,aAAO,QAAQ,IAAM,SAAS,IAAK,KAAQ;AAAA,IAC9C,OACI;AAED,UAAI,SAAS,SAAU,SAAS,OAAQ;AAEpC,YAAI,MAAM,WAAW;AACjB,cAAI,QAAQ,IAAI,WAAW,GAAG;AAC9B,eAAK,QAAQ,WAAY,OAAQ;AAC7B,cAAE;AACF,sBAAU,QAAQ,SAAU,OAAO,QAAQ,QAAS;AAAA,UACvD;AAAA,QACJ;AAAA,MACJ;AACD,WAAK,QAAQ,gBAAgB,GAAG;AAE5B,eAAO,QAAQ,IAAM,SAAS,KAAM,KAAQ;AAC5C,eAAO,QAAQ,IAAM,SAAS,IAAK,KAAQ;AAAA,MAC9C,OACI;AAED,eAAO,QAAQ,IAAM,SAAS,KAAM,IAAQ;AAC5C,eAAO,QAAQ,IAAM,SAAS,KAAM,KAAQ;AAC5C,eAAO,QAAQ,IAAM,SAAS,IAAK,KAAQ;AAAA,MAC9C;AAAA,IACJ;AACD,WAAO,QAAQ,IAAK,QAAQ,KAAQ;AAAA,EACvC;AACL;AACA,IAAI,oBAAoB,0BAA0B,IAAI,YAAW,IAAK;AAC5D,IAAC,yBAAyB,CAAC,0BAC/BA,IAAU,aACV,OAAO,YAAY,iBAAiB,KAAK,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,SAAS,QAAQ,OAAO,SAAS,SAAS,GAAG,eAAe,OAAO,UAClK,MACA;AACV,SAAS,mBAAmB,KAAK,QAAQ,cAAc;AACnD,SAAO,IAAI,kBAAkB,OAAO,GAAG,GAAG,YAAY;AAC1D;AACA,SAAS,uBAAuB,KAAK,QAAQ,cAAc;AACvD,oBAAkB,WAAW,KAAK,OAAO,SAAS,YAAY,CAAC;AACnE;AACU,IAAC,gBAAgB,sBAAsB,QAAQ,sBAAsB,SAAS,SAAS,kBAAkB,cAAc,yBAAyB;AAC1J,IAAI,aAAa;AACV,SAAS,aAAa,OAAO,aAAa,YAAY;AACzD,MAAI,SAAS;AACb,MAAI,MAAM,SAAS;AACnB,MAAI,QAAQ,CAAA;AACZ,MAAI,SAAS;AACb,SAAO,SAAS,KAAK;AACjB,QAAI,QAAQ,MAAM,QAAQ;AAC1B,SAAK,QAAQ,SAAU,GAAG;AAEtB,YAAM,KAAK,KAAK;AAAA,IACnB,YACS,QAAQ,SAAU,KAAM;AAE9B,UAAI,QAAQ,MAAM,QAAQ,IAAI;AAC9B,YAAM,MAAO,QAAQ,OAAS,IAAK,KAAK;AAAA,IAC3C,YACS,QAAQ,SAAU,KAAM;AAE9B,UAAI,QAAQ,MAAM,QAAQ,IAAI;AAC9B,UAAI,QAAQ,MAAM,QAAQ,IAAI;AAC9B,YAAM,MAAO,QAAQ,OAAS,KAAO,SAAS,IAAK,KAAK;AAAA,IAC3D,YACS,QAAQ,SAAU,KAAM;AAE9B,UAAI,QAAQ,MAAM,QAAQ,IAAI;AAC9B,UAAI,QAAQ,MAAM,QAAQ,IAAI;AAC9B,UAAI,QAAQ,MAAM,QAAQ,IAAI;AAC9B,UAAI,QAAS,QAAQ,MAAS,KAAS,SAAS,KAAS,SAAS,IAAQ;AAC1E,UAAI,OAAO,OAAQ;AACf,gBAAQ;AACR,cAAM,KAAO,SAAS,KAAM,OAAS,KAAM;AAC3C,eAAO,QAAU,OAAO;AAAA,MAC3B;AACD,YAAM,KAAK,IAAI;AAAA,IAClB,OACI;AACD,YAAM,KAAK,KAAK;AAAA,IACnB;AACD,QAAI,MAAM,UAAU,YAAY;AAC5B,gBAAU,OAAO,aAAa,MAAM,QAAQ,KAAK;AACjD,YAAM,SAAS;AAAA,IAClB;AAAA,EACJ;AACD,MAAI,MAAM,SAAS,GAAG;AAClB,cAAU,OAAO,aAAa,MAAM,QAAQ,KAAK;AAAA,EACpD;AACD,SAAO;AACX;AACA,IAAI,oBAAoB,0BAA0B,IAAI,YAAW,IAAK;AAC5D,IAAC,yBAAyB,CAAC,0BAC/BA,IAAU,aACV,OAAO,YAAY,iBAAiB,KAAK,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,SAAS,QAAQ,OAAO,SAAS,SAAS,GAAG,cAAc,OAAO,UACjK,MACA;AACH,SAAS,aAAa,OAAO,aAAa,YAAY;AACzD,MAAI,cAAc,MAAM,SAAS,aAAa,cAAc,UAAU;AACtE,SAAO,kBAAkB,OAAO,WAAW;AAC/C;;;;;;;;","x_google_ignoreList":[0]}