"use strict";
const _commonjsHelpers = require("../../_virtual/_commonjsHelpers.cjs");
const index = require("../../_virtual/index5.cjs");
const require$$0$1 = require("buffer");
const require$$0 = require("stream");
const require$$2 = require("util");
const bufferStream$1 = require("./buffer-stream.cjs");
const { constants: BufferConstants } = require$$0$1;
const stream = require$$0;
const { promisify } = require$$2;
const bufferStream = bufferStream$1.bufferStream;
const streamPipelinePromisified = promisify(stream.pipeline);
class MaxBufferError extends Error {
  constructor() {
    super("maxBuffer exceeded");
    this.name = "MaxBufferError";
  }
}
async function getStream(inputStream, options) {
  if (!inputStream) {
    throw new Error("Expected a stream");
  }
  options = {
    maxBuffer: Infinity,
    ...options
  };
  const { maxBuffer } = options;
  const stream2 = bufferStream(options);
  await new Promise((resolve, reject) => {
    const rejectPromise = (error) => {
      if (error && stream2.getBufferedLength() <= BufferConstants.MAX_LENGTH) {
        error.bufferedData = stream2.getBufferedValue();
      }
      reject(error);
    };
    (async () => {
      try {
        await streamPipelinePromisified(inputStream, stream2);
        resolve();
      } catch (error) {
        rejectPromise(error);
      }
    })();
    stream2.on("data", () => {
      if (stream2.getBufferedLength() > maxBuffer) {
        rejectPromise(new MaxBufferError());
      }
    });
  });
  return stream2.getBufferedValue();
}
index.__module.exports = getStream;
index.__module.exports.buffer = (stream2, options) => getStream(stream2, { ...options, encoding: "buffer" });
index.__module.exports.array = (stream2, options) => getStream(stream2, { ...options, array: true });
index.__module.exports.MaxBufferError = MaxBufferError;
var getStreamExports = index.__module.exports;
const getStream$1 = /* @__PURE__ */ _commonjsHelpers.getDefaultExportFromCjs(getStreamExports);
module.exports = getStream$1;
//# sourceMappingURL=index.cjs.map
