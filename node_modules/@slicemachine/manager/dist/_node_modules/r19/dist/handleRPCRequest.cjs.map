{"version":3,"file":"handleRPCRequest.cjs","sources":["../../../../../../node_modules/r19/dist/handleRPCRequest.js"],"sourcesContent":["import { Buffer } from \"node:buffer\";\nimport { decode, encode } from \"@msgpack/msgpack\";\nimport { isErrorLike } from \"./lib/isErrorLike.js\";\nimport { isR19ErrorLike } from \"./lib/isR19ErrorLike.js\";\nimport { replaceLeaves } from \"./lib/replaceLeaves.js\";\nimport { R19Error } from \"./R19Error.js\";\nconst findProcedure = (procedures, path) => {\n  path = [...path];\n  let proceduresPointer = procedures;\n  while (path.length > 0) {\n    const pathSegment = path.shift();\n    if (pathSegment) {\n      proceduresPointer = proceduresPointer[pathSegment];\n      if (typeof proceduresPointer === \"function\") {\n        return proceduresPointer;\n      } else if (proceduresPointer === void 0) {\n        return;\n      }\n    }\n  }\n};\nconst handleRPCRequest = async (args) => {\n  var _a, _b, _c;\n  if (!args.body) {\n    throw new Error(\"Invalid request body. Only requests from an r19 client are accepted.\");\n  }\n  const clientArgs = decode(Buffer.from(args.body));\n  const procedure = findProcedure(args.procedures, clientArgs.procedurePath);\n  const headers = {\n    \"Content-Type\": \"application/msgpack\"\n  };\n  if (!procedure) {\n    const error = new R19Error(`Invalid procedure name: ${clientArgs.procedurePath.join(\".\")}`, {\n      procedurePath: clientArgs.procedurePath,\n      procedureArgs: clientArgs.procedureArgs\n    });\n    const body = encode({\n      error\n    }, { ignoreUndefined: true });\n    (_a = args.onError) == null ? void 0 : _a.call(args, { error, ...clientArgs });\n    return {\n      body,\n      headers,\n      statusCode: 500\n    };\n  }\n  let res;\n  try {\n    const procedureArgs = await replaceLeaves(clientArgs.procedureArgs, async (value) => {\n      if (value instanceof ArrayBuffer) {\n        return Buffer.from(value);\n      }\n      return value;\n    });\n    res = await procedure(...procedureArgs);\n    res = await replaceLeaves(res, async (value) => {\n      if (isErrorLike(value)) {\n        return {\n          name: value.name,\n          message: value.message,\n          stack: process.env.NODE_ENV === \"development\" ? value.stack : void 0\n        };\n      }\n      if (typeof value === \"function\") {\n        throw new R19Error(\"r19 does not support function return values.\", {\n          procedurePath: clientArgs.procedurePath,\n          procedureArgs: clientArgs.procedureArgs\n        });\n      }\n      return value;\n    });\n  } catch (error) {\n    if (isErrorLike(error)) {\n      const body = encode({\n        error: isR19ErrorLike(error) ? error : {\n          name: error.name,\n          message: error.message,\n          stack: process.env.NODE_ENV === \"development\" ? error.stack : void 0\n        }\n      }, { ignoreUndefined: true });\n      (_b = args.onError) == null ? void 0 : _b.call(args, { error, ...clientArgs });\n      return {\n        body,\n        headers,\n        statusCode: 500\n      };\n    }\n    throw error;\n  }\n  try {\n    const body = encode({\n      data: res\n    }, { ignoreUndefined: true });\n    return {\n      body,\n      headers\n    };\n  } catch (error) {\n    if (error instanceof Error) {\n      const rpcError = new R19Error(\"Unable to serialize server response. Check the server log for details.\", {\n        procedurePath: clientArgs.procedurePath,\n        procedureArgs: clientArgs.procedureArgs,\n        cause: error\n      });\n      console.error(rpcError);\n      const body = encode(rpcError);\n      (_c = args.onError) == null ? void 0 : _c.call(args, { error, ...clientArgs });\n      return {\n        body,\n        headers,\n        statusCode: 500\n      };\n    }\n    throw error;\n  }\n};\nexport {\n  handleRPCRequest\n};\n//# sourceMappingURL=handleRPCRequest.js.map\n"],"names":["decode","Buffer","R19Error","encode","replaceLeaves","isErrorLike","isR19ErrorLike"],"mappings":"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","x_google_ignoreList":[0]}