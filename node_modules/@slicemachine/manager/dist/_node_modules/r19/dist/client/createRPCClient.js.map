{"version":3,"file":"createRPCClient.js","sources":["../../../../../../../node_modules/r19/dist/client/createRPCClient.js"],"sourcesContent":["import { encode, decode } from \"@msgpack/msgpack\";\nimport { isErrorLike } from \"../lib/isErrorLike.js\";\nimport { isR19ErrorLike } from \"../lib/isR19ErrorLike.js\";\nimport { replaceLeaves } from \"../lib/replaceLeaves.js\";\nimport { R19Error } from \"../R19Error.js\";\nconst createArbitrarilyNestedFunction = (handler, path = []) => {\n  return new Proxy(() => void 0, {\n    apply(_target, _this, args) {\n      return handler(path, args);\n    },\n    get(_target, property) {\n      return createArbitrarilyNestedFunction(handler, [\n        ...path,\n        property.toString()\n      ]);\n    }\n  });\n};\nconst createRPCClient = (args) => {\n  const resolvedFetch = args.fetch || globalThis.fetch.bind(globalThis);\n  return createArbitrarilyNestedFunction(async (procedurePath, procedureArgs) => {\n    const preparedProcedureArgs = await replaceLeaves(procedureArgs, async (value) => {\n      if (value instanceof Blob) {\n        return new Uint8Array(await value.arrayBuffer());\n      }\n      if (typeof value === \"function\") {\n        throw new R19Error(\"r19 does not support function arguments.\", {\n          procedurePath,\n          procedureArgs\n        });\n      }\n      return value;\n    });\n    const body = encode({\n      procedurePath,\n      procedureArgs: preparedProcedureArgs\n    }, { ignoreUndefined: true });\n    const res = await resolvedFetch(args.serverURL, {\n      method: \"POST\",\n      body,\n      headers: {\n        \"Content-Type\": \"application/msgpack\"\n      }\n    });\n    const arrayBuffer = await res.arrayBuffer();\n    const resObject = decode(new Uint8Array(arrayBuffer));\n    if (\"error\" in resObject) {\n      const resError = resObject.error;\n      if (isR19ErrorLike(resError)) {\n        const error = new R19Error(resError.message, {\n          procedurePath,\n          procedureArgs\n        });\n        error.stack = resError.stack;\n        throw error;\n      } else if (isErrorLike(resError)) {\n        const error = new Error(resError.message);\n        error.name = resError.name;\n        error.stack = resError.stack;\n        throw error;\n      } else {\n        throw new R19Error(\"An unexpected response was received from the RPC server.\", {\n          procedurePath,\n          procedureArgs,\n          cause: resObject\n        });\n      }\n    } else {\n      return replaceLeaves(resObject.data, async (value) => {\n        if (value instanceof Uint8Array) {\n          return new Blob([value]);\n        }\n        return value;\n      });\n    }\n  });\n};\nexport {\n  createRPCClient\n};\n//# sourceMappingURL=createRPCClient.js.map\n"],"names":[],"mappings":";;;;;;AAKA,MAAM,kCAAkC,CAAC,SAAS,OAAO,OAAO;AAC9D,SAAO,IAAI,MAAM,MAAM,QAAQ;AAAA,IAC7B,MAAM,SAAS,OAAO,MAAM;AAC1B,aAAO,QAAQ,MAAM,IAAI;AAAA,IAC1B;AAAA,IACD,IAAI,SAAS,UAAU;AACrB,aAAO,gCAAgC,SAAS;AAAA,QAC9C,GAAG;AAAA,QACH,SAAS,SAAU;AAAA,MAC3B,CAAO;AAAA,IACF;AAAA,EACL,CAAG;AACH;AACK,MAAC,kBAAkB,CAAC,SAAS;AAChC,QAAM,gBAAgB,KAAK,SAAS,WAAW,MAAM,KAAK,UAAU;AACpE,SAAO,gCAAgC,OAAO,eAAe,kBAAkB;AAC7E,UAAM,wBAAwB,MAAM,cAAc,eAAe,OAAO,UAAU;AAChF,UAAI,iBAAiB,MAAM;AACzB,eAAO,IAAI,WAAW,MAAM,MAAM,YAAa,CAAA;AAAA,MAChD;AACD,UAAI,OAAO,UAAU,YAAY;AAC/B,cAAM,IAAI,SAAS,4CAA4C;AAAA,UAC7D;AAAA,UACA;AAAA,QACV,CAAS;AAAA,MACF;AACD,aAAO;AAAA,IACb,CAAK;AACD,UAAM,OAAO,OAAO;AAAA,MAClB;AAAA,MACA,eAAe;AAAA,IACrB,GAAO,EAAE,iBAAiB,KAAI,CAAE;AAC5B,UAAM,MAAM,MAAM,cAAc,KAAK,WAAW;AAAA,MAC9C,QAAQ;AAAA,MACR;AAAA,MACA,SAAS;AAAA,QACP,gBAAgB;AAAA,MACjB;AAAA,IACP,CAAK;AACD,UAAM,cAAc,MAAM,IAAI;AAC9B,UAAM,YAAY,OAAO,IAAI,WAAW,WAAW,CAAC;AACpD,QAAI,WAAW,WAAW;AACxB,YAAM,WAAW,UAAU;AAC3B,UAAI,eAAe,QAAQ,GAAG;AAC5B,cAAM,QAAQ,IAAI,SAAS,SAAS,SAAS;AAAA,UAC3C;AAAA,UACA;AAAA,QACV,CAAS;AACD,cAAM,QAAQ,SAAS;AACvB,cAAM;AAAA,MACd,WAAiB,YAAY,QAAQ,GAAG;AAChC,cAAM,QAAQ,IAAI,MAAM,SAAS,OAAO;AACxC,cAAM,OAAO,SAAS;AACtB,cAAM,QAAQ,SAAS;AACvB,cAAM;AAAA,MACd,OAAa;AACL,cAAM,IAAI,SAAS,4DAA4D;AAAA,UAC7E;AAAA,UACA;AAAA,UACA,OAAO;AAAA,QACjB,CAAS;AAAA,MACF;AAAA,IACP,OAAW;AACL,aAAO,cAAc,UAAU,MAAM,OAAO,UAAU;AACpD,YAAI,iBAAiB,YAAY;AAC/B,iBAAO,IAAI,KAAK,CAAC,KAAK,CAAC;AAAA,QACxB;AACD,eAAO;AAAA,MACf,CAAO;AAAA,IACF;AAAA,EACL,CAAG;AACH;","x_google_ignoreList":[0]}