"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const t = require("io-ts");
const fetch = require("./fetch.cjs");
const decode = require("./decode.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const t__namespace = /* @__PURE__ */ _interopNamespaceDefault(t);
const NPM_REGISTRY_ABBREVIATED_METADATA_ACCEPT_HEADER = "application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*";
const NPMRegistryPackageMetadataCodec = t__namespace.type({
  versions: t__namespace.UnknownRecord
});
const fetchNPMPackageVersions = async (args) => {
  const res = await fetch.default(`https://registry.npmjs.org/${args.packageName}`, {
    headers: {
      Accept: NPM_REGISTRY_ABBREVIATED_METADATA_ACCEPT_HEADER
    }
  });
  const json = await res.json();
  const { value, error } = decode.decode(NPMRegistryPackageMetadataCodec, json);
  if (error) {
    throw new Error(`Invalid NPM registry response.`, { cause: error });
  }
  return Object.keys(value.versions);
};
exports.fetchNPMPackageVersions = fetchNPMPackageVersions;
//# sourceMappingURL=fetchNPMPackageVersions.cjs.map
