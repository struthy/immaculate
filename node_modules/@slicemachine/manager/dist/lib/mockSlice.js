import { SharedSliceMock } from "@prismicio/mocks";
const mockSlice = (args) => {
  const { model, mocks, diff } = args;
  return model.variations.map((variation) => {
    const variationMock = mocks == null ? void 0 : mocks.find((m) => m.variation === variation.id);
    const mockConfig = {
      type: "SharedSlice",
      variation: variation.id
    };
    if (!variationMock) {
      return SharedSliceMock.generate(model, mockConfig);
    }
    if (!diff) {
      return variationMock;
    }
    if (Object.keys(variation.items || {}).length && variationMock.items.length === 0) {
      variationMock.items.push({ __TYPE__: "GroupItemContent", value: [] });
    }
    const patched = SharedSliceMock.patch(diff, variationMock, mockConfig);
    if (!patched.ok) {
      return variationMock;
    }
    if (!patched.result) {
      return SharedSliceMock.generate(model, mockConfig);
    }
    return patched.result;
  });
};
export {
  mockSlice
};
//# sourceMappingURL=mockSlice.js.map
