{"version":3,"file":"fetchNPMPackageVersions.cjs","sources":["../../../src/lib/fetchNPMPackageVersions.ts"],"sourcesContent":["import * as t from \"io-ts\";\nimport fetch from \"./fetch\";\n\nimport { decode } from \"./decode\";\n\n/**\n * The Accept header value used when only metadata required for package\n * installation is needed. The response includes all versions and some of their\n * metadata.\n *\n * @see https://github.com/npm/registry/blob/cfe04736f34db9274a780184d1cdb2fb3e4ead2a/docs/responses/package-metadata.md#package-metadata\n */\nconst NPM_REGISTRY_ABBREVIATED_METADATA_ACCEPT_HEADER =\n\t\"application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*\";\n\n/**\n * A minimally defined codec for NPM registry package metadata. Only data needed\n * for version detection is defined.\n */\nconst NPMRegistryPackageMetadataCodec = t.type({\n\tversions: t.UnknownRecord,\n});\n\ntype FetchNPMPackageVersionsArgs = {\n\tpackageName: string;\n};\n\nexport const fetchNPMPackageVersions = async (\n\targs: FetchNPMPackageVersionsArgs,\n): Promise<string[]> => {\n\tconst res = await fetch(`https://registry.npmjs.org/${args.packageName}`, {\n\t\theaders: {\n\t\t\tAccept: NPM_REGISTRY_ABBREVIATED_METADATA_ACCEPT_HEADER,\n\t\t},\n\t});\n\n\tconst json = await res.json();\n\n\tconst { value, error } = decode(NPMRegistryPackageMetadataCodec, json);\n\n\tif (error) {\n\t\tthrow new Error(`Invalid NPM registry response.`, { cause: error });\n\t}\n\n\treturn Object.keys(value.versions);\n};\n"],"names":["t","fetch","decode"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAYA,MAAM,kDACL;AAMD,MAAM,kCAAkCA,aAAE,KAAK;AAAA,EAC9C,UAAUA,aAAE;AACZ,CAAA;AAMY,MAAA,0BAA0B,OACtC,SACsB;AACtB,QAAM,MAAM,MAAMC,cAAM,8BAA8B,KAAK,eAAe;AAAA,IACzE,SAAS;AAAA,MACR,QAAQ;AAAA,IACR;AAAA,EAAA,CACD;AAEK,QAAA,OAAO,MAAM,IAAI;AAEvB,QAAM,EAAE,OAAO,MAAA,IAAUC,OAAAA,OAAO,iCAAiC,IAAI;AAErE,MAAI,OAAO;AACV,UAAM,IAAI,MAAM,kCAAkC,EAAE,OAAO,OAAO;AAAA,EAClE;AAEM,SAAA,OAAO,KAAK,MAAM,QAAQ;AAClC;;"}