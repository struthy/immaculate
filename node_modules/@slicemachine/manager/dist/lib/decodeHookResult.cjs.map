{"version":3,"file":"decodeHookResult.cjs","sources":["../../../src/lib/decodeHookResult.ts"],"sourcesContent":["import * as t from \"io-ts\";\nimport { CallHookReturnType, HookError } from \"@slicemachine/plugin-kit\";\n\nimport { DecodeError } from \"./DecodeError\";\nimport { decode } from \"./decode\";\n\nexport const decodeHookResult = <\n\tA,\n\tO,\n\tI,\n\tTHookResult extends Awaited<CallHookReturnType>,\n>(\n\tcodec: t.Type<A, O, I>,\n\thookResult: THookResult,\n): {\n\tdata: A[];\n\terrors: (HookError | DecodeError<I>)[];\n} => {\n\tconst data: A[] = [];\n\tconst errors: DecodeError<I>[] = [];\n\n\tfor (const dataElement of hookResult.data) {\n\t\tconst { value, error } = decode(codec, dataElement);\n\n\t\tif (error) {\n\t\t\terrors.push(error);\n\t\t} else {\n\t\t\tdata.push(value);\n\t\t}\n\t}\n\n\treturn {\n\t\tdata,\n\t\terrors: [...errors, ...hookResult.errors],\n\t};\n};\n"],"names":["decode"],"mappings":";;;AAMa,MAAA,mBAAmB,CAM/B,OACA,eAIG;AACH,QAAM,OAAY,CAAA;AAClB,QAAM,SAA2B,CAAA;AAEtB,aAAA,eAAe,WAAW,MAAM;AAC1C,UAAM,EAAE,OAAO,MAAA,IAAUA,OAAAA,OAAO,OAAO,WAAW;AAElD,QAAI,OAAO;AACV,aAAO,KAAK,KAAK;AAAA,IAAA,OACX;AACN,WAAK,KAAK,KAAK;AAAA,IACf;AAAA,EACD;AAEM,SAAA;AAAA,IACN;AAAA,IACA,QAAQ,CAAC,GAAG,QAAQ,GAAG,WAAW,MAAM;AAAA,EAAA;AAE1C;;"}