"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const path = require("node:path");
const t = require("io-ts");
const rc9 = require("rc9");
const decode = require("./decode.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const path__namespace = /* @__PURE__ */ _interopNamespaceDefault(path);
const t__namespace = /* @__PURE__ */ _interopNamespaceDefault(t);
const rc9__namespace = /* @__PURE__ */ _interopNamespaceDefault(rc9);
const PRISMICRC = ".prismicrc";
const Prismicrc = t__namespace.partial({
  telemetry: t__namespace.boolean
});
const readRawPrismicrc = (dir) => {
  const rawPrismicrc = dir ? rc9__namespace.read({ dir, name: PRISMICRC }) : rc9__namespace.readUser(PRISMICRC);
  const { value: prismicrc, error } = decode.decode(Prismicrc, rawPrismicrc);
  if (error) {
    throw new Error(`Failed to parse ${dir ? path__namespace.resolve(dir, PRISMICRC) : `~/${PRISMICRC}`}: ${error.errors.join(", ")}`);
  }
  return prismicrc;
};
const readPrismicrc = (dir) => {
  const userPrismicrc = readRawPrismicrc();
  const projectPrismicrc = readRawPrismicrc(dir);
  return {
    ...userPrismicrc,
    ...projectPrismicrc
  };
};
exports.readPrismicrc = readPrismicrc;
exports.readRawPrismicrc = readRawPrismicrc;
//# sourceMappingURL=prismicrc.cjs.map
