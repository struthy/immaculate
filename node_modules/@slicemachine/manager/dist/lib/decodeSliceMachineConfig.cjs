"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const t = require("io-ts");
const decode = require("./decode.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const t__namespace = /* @__PURE__ */ _interopNamespaceDefault(t);
const SliceMachineConfigPluginRegistrationCodec = t__namespace.union([
  t__namespace.string,
  t__namespace.intersection([
    t__namespace.type({
      resolve: t__namespace.string
    }),
    t__namespace.partial({
      options: t__namespace.UnknownRecord
    })
  ])
]);
const SliceMachineConfigCodec = t__namespace.intersection([
  t__namespace.type({
    repositoryName: t__namespace.string,
    adapter: SliceMachineConfigPluginRegistrationCodec
  }),
  t__namespace.partial({
    apiEndpoint: t__namespace.string,
    libraries: t__namespace.array(t__namespace.string),
    localSliceSimulatorURL: t__namespace.string,
    plugins: t__namespace.array(SliceMachineConfigPluginRegistrationCodec),
    labs: t__namespace.partial({ legacySliceUpgrader: t__namespace.boolean })
  })
]);
const decodeSliceMachineConfig = (input) => {
  return decode.decode(SliceMachineConfigCodec, input);
};
exports.decodeSliceMachineConfig = decodeSliceMachineConfig;
//# sourceMappingURL=decodeSliceMachineConfig.cjs.map
