{"version":3,"file":"mockSlice.js","sources":["../../../src/lib/mockSlice.ts"],"sourcesContent":["import { SharedSliceMock } from \"@prismicio/mocks\";\n\nimport { SharedSliceContent } from \"@prismicio/types-internal/lib/content\";\nimport {\n\tSharedSlice,\n\tSliceDiff,\n} from \"@prismicio/types-internal/lib/customtypes\";\n\ntype mockSliceArgs = {\n\tmodel: SharedSlice;\n\tmocks?: SharedSliceContent[];\n\tdiff?: SliceDiff;\n};\n\nexport const mockSlice = (args: mockSliceArgs): SharedSliceContent[] => {\n\tconst { model, mocks, diff } = args;\n\n\treturn model.variations.map((variation) => {\n\t\tconst variationMock = mocks?.find((m) => m.variation === variation.id);\n\n\t\tconst mockConfig = {\n\t\t\ttype: \"SharedSlice\",\n\t\t\tvariation: variation.id,\n\t\t} as const;\n\n\t\tif (!variationMock) {\n\t\t\treturn SharedSliceMock.generate(model, mockConfig);\n\t\t}\n\t\tif (!diff) {\n\t\t\treturn variationMock;\n\t\t}\n\n\t\t// Enforce at least one item to be created if none are present and variation has item fields\n\t\tif (\n\t\t\tObject.keys(variation.items || {}).length &&\n\t\t\tvariationMock.items.length === 0\n\t\t) {\n\t\t\tvariationMock.items.push({ __TYPE__: \"GroupItemContent\", value: [] });\n\t\t}\n\t\tconst patched = SharedSliceMock.patch(diff, variationMock, mockConfig);\n\t\tif (!patched.ok) {\n\t\t\treturn variationMock;\n\t\t}\n\t\tif (!patched.result) {\n\t\t\treturn SharedSliceMock.generate(model, mockConfig);\n\t\t}\n\n\t\treturn patched.result;\n\t});\n};\n"],"names":[],"mappings":";AAca,MAAA,YAAY,CAAC,SAA6C;AACtE,QAAM,EAAE,OAAO,OAAO,KAAA,IAAS;AAE/B,SAAO,MAAM,WAAW,IAAI,CAAC,cAAa;AACnC,UAAA,gBAAgB,+BAAO,KAAK,CAAC,MAAM,EAAE,cAAc,UAAU;AAEnE,UAAM,aAAa;AAAA,MAClB,MAAM;AAAA,MACN,WAAW,UAAU;AAAA,IAAA;AAGtB,QAAI,CAAC,eAAe;AACZ,aAAA,gBAAgB,SAAS,OAAO,UAAU;AAAA,IACjD;AACD,QAAI,CAAC,MAAM;AACH,aAAA;AAAA,IACP;AAIA,QAAA,OAAO,KAAK,UAAU,SAAS,CAAA,CAAE,EAAE,UACnC,cAAc,MAAM,WAAW,GAC9B;AACa,oBAAA,MAAM,KAAK,EAAE,UAAU,oBAAoB,OAAO,IAAI;AAAA,IACpE;AACD,UAAM,UAAU,gBAAgB,MAAM,MAAM,eAAe,UAAU;AACjE,QAAA,CAAC,QAAQ,IAAI;AACT,aAAA;AAAA,IACP;AACG,QAAA,CAAC,QAAQ,QAAQ;AACb,aAAA,gBAAgB,SAAS,OAAO,UAAU;AAAA,IACjD;AAED,WAAO,QAAQ;AAAA,EAAA,CACf;AACF;"}