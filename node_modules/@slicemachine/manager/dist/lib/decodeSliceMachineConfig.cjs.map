{"version":3,"file":"decodeSliceMachineConfig.cjs","sources":["../../../src/lib/decodeSliceMachineConfig.ts"],"sourcesContent":["import * as t from \"io-ts\";\n\nimport { SliceMachineConfig } from \"../types\";\n\nimport { decode, DecodeReturnType } from \"./decode\";\n\nconst SliceMachineConfigPluginRegistrationCodec = t.union([\n\tt.string,\n\tt.intersection([\n\t\tt.type({\n\t\t\tresolve: t.string,\n\t\t}),\n\t\tt.partial({\n\t\t\toptions: t.UnknownRecord,\n\t\t}),\n\t]),\n]);\n\nconst SliceMachineConfigCodec = t.intersection([\n\tt.type({\n\t\trepositoryName: t.string,\n\t\tadapter: SliceMachineConfigPluginRegistrationCodec,\n\t}),\n\tt.partial({\n\t\tapiEndpoint: t.string,\n\t\tlibraries: t.array(t.string),\n\t\tlocalSliceSimulatorURL: t.string,\n\t\tplugins: t.array(SliceMachineConfigPluginRegistrationCodec),\n\t\tlabs: t.partial({ legacySliceUpgrader: t.boolean }),\n\t}),\n]);\n\n// TODO: Maybe rename \"decode\" to \"validate\". \"decode\" exposes the `io-ts`\n// internals.\nexport const decodeSliceMachineConfig = (\n\tinput: unknown,\n): DecodeReturnType<SliceMachineConfig, SliceMachineConfig, unknown> => {\n\treturn decode(SliceMachineConfigCodec, input);\n};\n"],"names":["t","decode"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAMA,MAAM,4CAA4CA,aAAE,MAAM;AAAA,EACzDA,aAAE;AAAA,EACFA,aAAE,aAAa;AAAA,IACdA,aAAE,KAAK;AAAA,MACN,SAASA,aAAE;AAAA,IAAA,CACX;AAAA,IACDA,aAAE,QAAQ;AAAA,MACT,SAASA,aAAE;AAAA,IAAA,CACX;AAAA,EAAA,CACD;AACD,CAAA;AAED,MAAM,0BAA0BA,aAAE,aAAa;AAAA,EAC9CA,aAAE,KAAK;AAAA,IACN,gBAAgBA,aAAE;AAAA,IAClB,SAAS;AAAA,EAAA,CACT;AAAA,EACDA,aAAE,QAAQ;AAAA,IACT,aAAaA,aAAE;AAAA,IACf,WAAWA,aAAE,MAAMA,aAAE,MAAM;AAAA,IAC3B,wBAAwBA,aAAE;AAAA,IAC1B,SAASA,aAAE,MAAM,yCAAyC;AAAA,IAC1D,MAAMA,aAAE,QAAQ,EAAE,qBAAqBA,aAAE,SAAS;AAAA,EAAA,CAClD;AACD,CAAA;AAIY,MAAA,2BAA2B,CACvC,UACsE;AAC/D,SAAAC,OAAA,OAAO,yBAAyB,KAAK;AAC7C;;"}