"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
class SliceMachineError extends Error {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "SMSliceMachineError");
  }
}
class UnauthorizedError extends SliceMachineError {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "SMUnauthorizedError");
  }
}
class UnauthenticatedError extends SliceMachineError {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "SMUnauthenticatedError");
    __publicField(this, "message", "Authenticate before trying again.");
  }
}
class NotFoundError extends SliceMachineError {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "SMNotFoundError");
  }
}
class UnexpectedDataError extends SliceMachineError {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "SMUnexpectedDataError");
  }
}
class InternalError extends SliceMachineError {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "SMInternalError");
  }
}
class PluginError extends SliceMachineError {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "SMPluginError");
  }
}
class PluginHookResultError extends SliceMachineError {
  constructor(errors) {
    super(`${errors.length} error${errors.length === 1 ? "" : "s"} were returned by one or more plugins.`, {
      cause: errors
    });
    __publicField(this, "name", "SMPluginHookResultError");
  }
}
class InvalidActiveEnvironmentError extends SliceMachineError {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "SMInvalidActiveEnvironmentError");
  }
}
class UnsupportedError extends SliceMachineError {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "SMUnsupportedError");
  }
}
const isSliceMachineError = (error, name) => {
  const isErrorInstance = error instanceof Error;
  return name === void 0 ? isErrorInstance && error.name.startsWith("SM") : isErrorInstance && error.name === name;
};
const isUnauthorizedError = (error) => {
  return isSliceMachineError(error, "SMUnauthorizedError");
};
const isUnauthenticatedError = (error) => {
  return isSliceMachineError(error, "SMUnauthenticatedError");
};
const isNotFoundError = (error) => {
  return isSliceMachineError(error, "SMNotFoundError");
};
const isUnexpectedDataError = (error) => {
  return isSliceMachineError(error, "SMUnexpectedDataError");
};
const isInternalError = (error) => {
  return isSliceMachineError(error, "SMInternalError");
};
const isPluginError = (error) => {
  return isSliceMachineError(error, "SMPluginError");
};
const isInvalidActiveEnvironmentError = (error) => {
  return isSliceMachineError(error, "SMInvalidActiveEnvironmentError");
};
const isUnsupportedError = (error) => {
  return isSliceMachineError(error, "SMUnsupportedError");
};
exports.InternalError = InternalError;
exports.InvalidActiveEnvironmentError = InvalidActiveEnvironmentError;
exports.NotFoundError = NotFoundError;
exports.PluginError = PluginError;
exports.PluginHookResultError = PluginHookResultError;
exports.SliceMachineError = SliceMachineError;
exports.UnauthenticatedError = UnauthenticatedError;
exports.UnauthorizedError = UnauthorizedError;
exports.UnexpectedDataError = UnexpectedDataError;
exports.UnsupportedError = UnsupportedError;
exports.isInternalError = isInternalError;
exports.isInvalidActiveEnvironmentError = isInvalidActiveEnvironmentError;
exports.isNotFoundError = isNotFoundError;
exports.isPluginError = isPluginError;
exports.isSliceMachineError = isSliceMachineError;
exports.isUnauthenticatedError = isUnauthenticatedError;
exports.isUnauthorizedError = isUnauthorizedError;
exports.isUnexpectedDataError = isUnexpectedDataError;
exports.isUnsupportedError = isUnsupportedError;
//# sourceMappingURL=errors.cjs.map
