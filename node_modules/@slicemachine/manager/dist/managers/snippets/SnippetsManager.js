import * as t from "io-ts";
import { assertPluginsInitialized } from "../../lib/assertPluginsInitialized.js";
import { decodeHookResult } from "../../lib/decodeHookResult.js";
import { BaseManager } from "../BaseManager.js";
const snippetCodec = t.type({
  label: t.string,
  language: t.string,
  code: t.string
});
class SnippetsManager extends BaseManager {
  async readSnippets(args) {
    assertPluginsInitialized(this.sliceMachinePluginRunner);
    const hookResult = await this.sliceMachinePluginRunner.callHook("snippet:read", args);
    const { data, errors } = decodeHookResult(t.union([snippetCodec, t.array(snippetCodec)]), hookResult);
    return {
      snippets: data.flat(),
      errors
    };
  }
}
export {
  SnippetsManager
};
//# sourceMappingURL=SnippetsManager.js.map
