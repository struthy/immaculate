{"version":3,"file":"SnippetsManager.cjs","sources":["../../../../src/managers/snippets/SnippetsManager.ts"],"sourcesContent":["import * as t from \"io-ts\";\nimport {\n\tHookError,\n\tSnippet,\n\tSnippetReadHookData,\n} from \"@slicemachine/plugin-kit\";\n\nimport { DecodeError } from \"../../lib/DecodeError\";\nimport { assertPluginsInitialized } from \"../../lib/assertPluginsInitialized\";\nimport { decodeHookResult } from \"../../lib/decodeHookResult\";\n\nimport { BaseManager } from \"../BaseManager\";\n\nconst snippetCodec = t.type({\n\tlabel: t.string,\n\tlanguage: t.string,\n\tcode: t.string,\n});\n\ntype SnippetsMangerUpdateSliceReturnType = {\n\tsnippets: Snippet[];\n\terrors: (DecodeError | HookError)[];\n};\n\nexport class SnippetsManager extends BaseManager {\n\tasync readSnippets(\n\t\targs: SnippetReadHookData,\n\t): Promise<SnippetsMangerUpdateSliceReturnType> {\n\t\tassertPluginsInitialized(this.sliceMachinePluginRunner);\n\n\t\tconst hookResult = await this.sliceMachinePluginRunner.callHook(\n\t\t\t\"snippet:read\",\n\t\t\targs,\n\t\t);\n\t\tconst { data, errors } = decodeHookResult(\n\t\t\tt.union([snippetCodec, t.array(snippetCodec)]),\n\t\t\thookResult,\n\t\t);\n\n\t\treturn {\n\t\t\tsnippets: data.flat(),\n\t\t\terrors,\n\t\t};\n\t}\n}\n"],"names":["t","BaseManager","assertPluginsInitialized","decodeHookResult"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAaA,MAAM,eAAeA,aAAE,KAAK;AAAA,EAC3B,OAAOA,aAAE;AAAA,EACT,UAAUA,aAAE;AAAA,EACZ,MAAMA,aAAE;AACR,CAAA;AAOK,MAAO,wBAAwBC,YAAAA,YAAW;AAAA,EAC/C,MAAM,aACL,MAAyB;AAEzBC,sDAAyB,KAAK,wBAAwB;AAEtD,UAAM,aAAa,MAAM,KAAK,yBAAyB,SACtD,gBACA,IAAI;AAEL,UAAM,EAAE,MAAM,OAAM,IAAKC,kCACxBH,aAAE,MAAM,CAAC,cAAcA,aAAE,MAAM,YAAY,CAAC,CAAC,GAC7C,UAAU;AAGJ,WAAA;AAAA,MACN,UAAU,KAAK,KAAM;AAAA,MACrB;AAAA,IAAA;AAAA,EAEF;AACA;;"}