var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class BaseManager {
  constructor(sliceMachineManager) {
    __publicField(this, "_sliceMachineManager");
    this._sliceMachineManager = sliceMachineManager;
  }
  get prismicAuthManager() {
    return this._sliceMachineManager.getPrismicAuthManager();
  }
  get sliceMachinePluginRunner() {
    return this._sliceMachineManager.getSliceMachinePluginRunner();
  }
  set sliceMachinePluginRunner(sliceMachinePluginRunner) {
    this._sliceMachineManager._sliceMachinePluginRunner = sliceMachinePluginRunner;
  }
  get cwd() {
    return this._sliceMachineManager.cwd;
  }
  // Protected instance prevents circular intellisense
  // e.g. sliceMachineManager.user.user.user
  get user() {
    return this._sliceMachineManager.user;
  }
  get prismicRepository() {
    return this._sliceMachineManager.prismicRepository;
  }
  get plugins() {
    return this._sliceMachineManager.plugins;
  }
  get project() {
    return this._sliceMachineManager.project;
  }
  get customTypes() {
    return this._sliceMachineManager.customTypes;
  }
  get slices() {
    return this._sliceMachineManager.slices;
  }
  get snippets() {
    return this._sliceMachineManager.snippets;
  }
  get screenshots() {
    return this._sliceMachineManager.screenshots;
  }
  get simulator() {
    return this._sliceMachineManager.simulator;
  }
  get documentation() {
    return this._sliceMachineManager.documentation;
  }
  get sliceTemplateLibrary() {
    return this._sliceMachineManager.sliceTemplateLibrary;
  }
  get versions() {
    return this._sliceMachineManager.versions;
  }
  get telemetry() {
    return this._sliceMachineManager.telemetry;
  }
}
export {
  BaseManager
};
//# sourceMappingURL=BaseManager.js.map
