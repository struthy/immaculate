"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const t = require("io-ts");
const BaseManager = require("../BaseManager.cjs");
const assertPluginsInitialized = require("../../lib/assertPluginsInitialized.cjs");
const decodeHookResult = require("../../lib/decodeHookResult.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const t__namespace = /* @__PURE__ */ _interopNamespaceDefault(t);
const documentationCodec = t__namespace.intersection([
  t__namespace.type({ content: t__namespace.string }),
  t__namespace.partial({
    label: t__namespace.string
  })
]);
class DocumentationManager extends BaseManager.BaseManager {
  async read(args) {
    assertPluginsInitialized.assertPluginsInitialized(this.sliceMachinePluginRunner);
    const hookResult = await this.sliceMachinePluginRunner.callHook("documentation:read", args);
    const { data, errors } = decodeHookResult.decodeHookResult(t__namespace.array(documentationCodec), hookResult);
    return {
      documentation: data.flat(),
      errors
    };
  }
}
exports.DocumentationManager = DocumentationManager;
//# sourceMappingURL=DocumentationManager.cjs.map
