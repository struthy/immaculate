import { SliceMachinePluginRunner } from "@slicemachine/plugin-kit";
import { PrismicAuthManager } from "../auth/PrismicAuthManager";
import { SliceMachineManager } from "./SliceMachineManager";
import { UserManager } from "./user/UserManager";
import { PrismicRepositoryManager } from "./prismicRepository/PrismicRepositoryManager";
import { PluginsManager } from "./plugins/PluginsManager";
import { ProjectManager } from "./project/ProjectManager";
import { CustomTypesManager } from "./customTypes/CustomTypesManager";
import { SlicesManager } from "./slices/SlicesManager";
import { SnippetsManager } from "./snippets/SnippetsManager";
import { ScreenshotsManager } from "./screenshots/ScreenshotsManager";
import { SimulatorManager } from "./simulator/SimulatorManager";
import { VersionsManager } from "./versions/VersionsManager";
import { TelemetryManager } from "./telemetry/TelemetryManager";
import { DocumentationManager } from "./documentation/DocumentationManager";
import { SliceTemplateLibraryManager } from "./sliceTemplateLibrary/SliceTemplateLibraryManager";
export declare abstract class BaseManager {
    private _sliceMachineManager;
    constructor(sliceMachineManager: SliceMachineManager);
    protected get prismicAuthManager(): PrismicAuthManager;
    protected get sliceMachinePluginRunner(): SliceMachinePluginRunner | undefined;
    protected set sliceMachinePluginRunner(sliceMachinePluginRunner: SliceMachinePluginRunner | undefined);
    protected get cwd(): string;
    protected get user(): UserManager;
    protected get prismicRepository(): PrismicRepositoryManager;
    protected get plugins(): PluginsManager;
    protected get project(): ProjectManager;
    protected get customTypes(): CustomTypesManager;
    protected get slices(): SlicesManager;
    protected get snippets(): SnippetsManager;
    protected get screenshots(): ScreenshotsManager;
    protected get simulator(): SimulatorManager;
    protected get documentation(): DocumentationManager;
    protected get sliceTemplateLibrary(): SliceTemplateLibraryManager;
    protected get versions(): VersionsManager;
    protected get telemetry(): TelemetryManager;
}
