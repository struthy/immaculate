import { GitProvider } from "../../constants/GIT_PROVIDER";
import { BaseManager } from "../BaseManager";
import { GitOwner, GitRepo, GitRepoSpecifier } from "./types";
type GitManagerCreateGitHubAuthStateReturnType = {
    key: string;
    expiresAt: Date;
};
type GitManagerFetchOwnersReturnType = GitOwner[];
type GitManagerFetchReposReturnType = GitRepo[];
type GitManagerFetchReposArgs = {
    provider: GitProvider;
    owner: string;
    query?: string;
    page?: number;
};
type GitManagerFetchLinkedReposArgs = {
    prismic: {
        domain: string;
    };
};
type GitManagerFetchLinkedReposReturnType = GitRepoSpecifier[];
type GitManagerLinkRepoArgs = {
    prismic: {
        domain: string;
    };
    git: {
        provider: GitProvider;
        owner: string;
        name: string;
    };
};
type GitManagerUnlinkRepoArgs = {
    prismic: {
        domain: string;
    };
    git: {
        provider: GitProvider;
        owner: string;
        name: string;
    };
};
type CheckHasWriteAPITokenArgs = {
    prismic: {
        domain: string;
    };
    git: {
        provider: GitProvider;
        owner: string;
        name: string;
    };
};
type UpdateWriteAPITokenArgs = {
    prismic: {
        domain: string;
    };
    git: {
        provider: GitProvider;
        owner: string;
        name: string;
    };
    token: string;
};
type DeleteWriteAPITokenArgs = {
    prismic: {
        domain: string;
    };
    git: {
        provider: GitProvider;
        owner: string;
        name: string;
    };
};
export declare class GitManager extends BaseManager {
    #private;
    createGitHubAuthState(): Promise<GitManagerCreateGitHubAuthStateReturnType>;
    fetchOwners(): Promise<GitManagerFetchOwnersReturnType>;
    fetchRepos(args: GitManagerFetchReposArgs): Promise<GitManagerFetchReposReturnType>;
    fetchLinkedRepos(args: GitManagerFetchLinkedReposArgs): Promise<GitManagerFetchLinkedReposReturnType>;
    linkRepo(args: GitManagerLinkRepoArgs): Promise<void>;
    unlinkRepo(args: GitManagerUnlinkRepoArgs): Promise<void>;
    checkHasWriteAPIToken(args: CheckHasWriteAPITokenArgs): Promise<boolean>;
    updateWriteAPIToken(args: UpdateWriteAPITokenArgs): Promise<void>;
    deleteWriteAPIToken(args: DeleteWriteAPITokenArgs): Promise<void>;
    getProviderAppInstallURL(args: {
        provider: GitProvider;
    }): Promise<string>;
    detectGitProvider(): Promise<string>;
}
export {};
