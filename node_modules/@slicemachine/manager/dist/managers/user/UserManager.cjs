"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const errors = require("../../errors.cjs");
const BaseManager = require("../BaseManager.cjs");
class UserManager extends BaseManager.BaseManager {
  constructor(sliceMachineManager) {
    super(sliceMachineManager);
    __publicField(this, "login", this.prismicAuthManager.login.bind(this.prismicAuthManager));
    __publicField(this, "getLoginSessionInfo", this.prismicAuthManager.getLoginSessionInfo.bind(this.prismicAuthManager));
    __publicField(this, "nodeLoginSession", this.prismicAuthManager.nodeLoginSession.bind(this.prismicAuthManager));
    __publicField(this, "logout", this.prismicAuthManager.logout.bind(this.prismicAuthManager));
    __publicField(this, "checkIsLoggedIn", this.prismicAuthManager.checkIsLoggedIn.bind(this.prismicAuthManager));
    __publicField(this, "refreshAuthenticationToken", this.prismicAuthManager.refreshAuthenticationToken.bind(this.prismicAuthManager));
    __publicField(this, "getAuthenticationToken", this.prismicAuthManager.getAuthenticationToken.bind(this.prismicAuthManager));
    __publicField(this, "getAuthenticationCookies", this.prismicAuthManager.getAuthenticationCookies.bind(this.prismicAuthManager));
    __publicField(this, "getProfile", this.prismicAuthManager.getProfile.bind(this.prismicAuthManager));
    if (!sliceMachineManager.getPrismicAuthManager()) {
      throw new errors.SliceMachineError("SliceMachineManager._prismicAuthManager must be set with a PrismicAuthManager instance before instantiating UserManager.");
    }
  }
}
exports.UserManager = UserManager;
//# sourceMappingURL=UserManager.cjs.map
