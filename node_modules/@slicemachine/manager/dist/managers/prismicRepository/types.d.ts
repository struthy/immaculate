import { CustomType, SharedSlice } from "@prismicio/types-internal/lib/customtypes";
import * as t from "io-ts";
export declare const PrismicRepositoryUserAgent: {
    readonly SliceMachine: "prismic-cli/sm";
    readonly LegacyZero: "prismic-cli/0";
};
export type PrismicRepositoryUserAgents = (typeof PrismicRepositoryUserAgent)[keyof typeof PrismicRepositoryUserAgent];
export declare const PrismicRepositoryRole: {
    readonly SuperUser: "SuperUser";
    readonly Administrator: "Administrator";
    readonly Owner: "Owner";
    readonly Manager: "Manager";
    readonly Publisher: "Publisher";
    readonly Writer: "Writer";
    readonly Readonly: "Readonly";
};
export type PrismicRepositoryRoles = (typeof PrismicRepositoryRole)[keyof typeof PrismicRepositoryRole];
export declare const PrismicRepository: t.TypeC<{
    domain: t.StringC;
    name: t.StringC;
    role: t.UnionC<[t.KeyofC<{
        readonly SuperUser: "SuperUser";
        readonly Administrator: "Administrator";
        readonly Owner: "Owner";
        readonly Manager: "Manager";
        readonly Publisher: "Publisher";
        readonly Writer: "Writer";
        readonly Readonly: "Readonly";
    }>, t.RecordC<t.StringC, t.KeyofC<{
        readonly SuperUser: "SuperUser";
        readonly Administrator: "Administrator";
        readonly Owner: "Owner";
        readonly Manager: "Manager";
        readonly Publisher: "Publisher";
        readonly Writer: "Writer";
        readonly Readonly: "Readonly";
    }>>]>;
}>;
export type PrismicRepository = t.TypeOf<typeof PrismicRepository>;
export declare enum ChangeTypes {
    SLICE_INSERT = "SLICE_INSERT",
    SLICE_UPDATE = "SLICE_UPDATE",
    SLICE_DELETE = "SLICE_DELETE",
    CUSTOM_TYPE_INSERT = "CUSTOM_TYPE_INSERT",
    CUSTOM_TYPE_UPDATE = "CUSTOM_TYPE_UPDATE",
    CUSTOM_TYPE_DELETE = "CUSTOM_TYPE_DELETE"
}
interface Change {
    type: ChangeTypes;
    id: string;
    payload: Record<string, unknown>;
}
interface DeleteChange extends Change {
    payload: {
        id: Change["id"];
    };
}
export interface SliceInsertChange extends Change {
    type: ChangeTypes.SLICE_INSERT;
    payload: SharedSlice;
}
export interface SliceUpdateChange extends Change {
    type: ChangeTypes.SLICE_UPDATE;
    payload: SharedSlice;
}
export interface SliceDeleteChange extends DeleteChange {
    type: ChangeTypes.SLICE_DELETE;
}
export interface CustomTypeInsertChange extends Change {
    type: ChangeTypes.CUSTOM_TYPE_INSERT;
    payload: CustomType;
}
export interface CustomTypeUpdateChange extends Change {
    type: ChangeTypes.CUSTOM_TYPE_UPDATE;
    payload: CustomType;
}
export interface CustomTypeDeleteChange extends DeleteChange {
    type: ChangeTypes.CUSTOM_TYPE_DELETE;
}
export type AllChangeTypes = SliceInsertChange | SliceUpdateChange | SliceDeleteChange | CustomTypeInsertChange | CustomTypeUpdateChange | CustomTypeDeleteChange;
export interface BulkBody extends Record<string, unknown> {
    confirmDeleteDocuments: boolean;
    changes: AllChangeTypes[];
}
export declare const PushChangesRawLimit: t.TypeC<{
    details: t.TypeC<{
        customTypes: t.ArrayC<t.TypeC<{
            id: t.StringC;
            numberOfDocuments: t.NumberC;
            url: t.StringC;
        }>>;
    }>;
}>;
export type PushChangesRawLimit = t.TypeOf<typeof PushChangesRawLimit>;
export declare enum PushChangesLimitType {
    SOFT = "SOFT",
    HARD = "HARD"
}
export type PushChangesLimit = PushChangesRawLimit & {
    type: PushChangesLimitType;
};
export interface ClientError {
    status: number;
    message: string;
}
type ChangeStatus = "NEW" | "MODIFIED" | "DELETED";
type CustomTypeChange = {
    id: string;
    type: "CustomType";
    status: ChangeStatus;
};
type SliceChange = {
    id: string;
    type: "Slice";
    status: ChangeStatus;
    libraryID: string;
};
export type TransactionalMergeArgs = {
    confirmDeleteDocuments: boolean;
    changes: (CustomTypeChange | SliceChange)[];
};
export type TransactionalMergeReturnType = PushChangesLimit | null;
/**
 * Framework id sent to Segment from wroom. Property used for the "framework"
 * and "hasSlicemachine" properties.
 *
 * Values from:
 * https://github.com/prismicio/wroom/blob/65d4f53fd46df7d366d80e7ba9c965339ac7369d/subprojects/common/app/models/Framework.scala#LL20C6-L20C6
 */
export type FrameworkWroomTelemetryID = "next" | "nuxt" | "sveltekit" | "other";
/**
 * Starter id sent to Segment from wroom.Property used for the "starter"
 * properties.
 *
 * Values from:
 * https://github.com/prismicio/wroom/blob/65d4f53fd46df7d366d80e7ba9c965339ac7369d/conf/application.conf#L938
 */
export type StarterId = "next_multi_page" | "next_blog" | "next_multi_lang" | "nuxt_multi_page" | "nuxt_blog" | "nuxt_multi_lang";
export declare const Environment: t.TypeC<{
    kind: t.UnionC<[t.LiteralC<"prod">, t.LiteralC<"stage">, t.LiteralC<"dev">]>;
    name: t.StringC;
    domain: t.StringC;
    users: t.ArrayC<t.TypeC<{
        id: t.StringC;
    }>>;
}>;
export type Environment = t.TypeOf<typeof Environment>;
export {};
