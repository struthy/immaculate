import { CustomType } from "@prismicio/types-internal/lib/customtypes";
import { CallHookReturnType, CustomTypeCreateHook, CustomTypeCreateHookData, CustomTypeReadHookData, CustomTypeRenameHook, CustomTypeRenameHookData, CustomTypeUpdateHook, CustomTypeUpdateHookData, HookError } from "@slicemachine/plugin-kit";
import { DecodeError } from "../../lib/DecodeError";
import { OnlyHookErrors } from "../../types";
import { BaseManager } from "../BaseManager";
import { CustomTypeFormat } from "./types";
type SliceMachineManagerReadCustomTypeLibraryReturnType = {
    ids: string[];
    errors: (DecodeError | HookError)[];
};
type CustomTypesManagerReadAllCustomTypesArgs = {
    format: CustomTypeFormat;
};
type SliceMachineManagerReadAllCustomTypeReturnType = {
    models: {
        model: CustomType;
    }[];
    errors: (DecodeError | HookError)[];
};
type SliceMachineManagerReadCustomTypeReturnType = {
    model: CustomType | undefined;
    errors: (DecodeError | HookError)[];
};
type SliceMachineManagerPushCustomTypeArgs = {
    id: string;
    userAgent?: string;
};
type SliceMachineManagerReadCustomTypeMocksConfigArgs = {
    customTypeID: string;
};
type SliceMachineManagerReadCustomTypeMocksConfigArgsReturnType = {
    mocksConfig?: Record<string, unknown>;
    errors: HookError[];
};
type SliceMachineManagerUpdateCustomTypeMocksConfigArgs = {
    customTypeID: string;
    mocksConfig: Record<string, unknown>;
};
type SliceMachineManagerUpdateCustomTypeMocksConfigArgsReturnType = {
    errors: HookError[];
};
type CustomTypesMachineManagerDeleteCustomTypeArgs = {
    id: string;
};
type CustomTypesMachineManagerDeleteCustomTypeReturnType = {
    errors: (DecodeError | HookError)[];
};
export declare class CustomTypesManager extends BaseManager {
    readCustomTypeLibrary(): Promise<SliceMachineManagerReadCustomTypeLibraryReturnType>;
    readAllCustomTypes(args?: CustomTypesManagerReadAllCustomTypesArgs): Promise<SliceMachineManagerReadAllCustomTypeReturnType>;
    createCustomType(args: CustomTypeCreateHookData): Promise<OnlyHookErrors<CallHookReturnType<CustomTypeCreateHook>>>;
    readCustomType(args: CustomTypeReadHookData): Promise<SliceMachineManagerReadCustomTypeReturnType>;
    updateCustomType(args: CustomTypeUpdateHookData): Promise<OnlyHookErrors<CallHookReturnType<CustomTypeUpdateHook>>>;
    renameCustomType(args: CustomTypeRenameHookData): Promise<OnlyHookErrors<CallHookReturnType<CustomTypeRenameHook>>>;
    deleteCustomType(args: CustomTypesMachineManagerDeleteCustomTypeArgs): Promise<CustomTypesMachineManagerDeleteCustomTypeReturnType>;
    pushCustomType(args: SliceMachineManagerPushCustomTypeArgs): Promise<void>;
    readCustomTypeMocksConfig(args: SliceMachineManagerReadCustomTypeMocksConfigArgs): Promise<SliceMachineManagerReadCustomTypeMocksConfigArgsReturnType>;
    updateCustomTypeMocksConfig(args: SliceMachineManagerUpdateCustomTypeMocksConfigArgs): Promise<SliceMachineManagerUpdateCustomTypeMocksConfigArgsReturnType>;
    fetchRemoteCustomTypes(): Promise<CustomType[]>;
}
export {};
