/// <reference types="node" />
import { HookError } from "@slicemachine/plugin-kit";
import { BaseManager } from "../BaseManager";
import { DecodeError } from "../../lib/DecodeError";
import { SharedSlice } from "@prismicio/types-internal/lib/customtypes";
type SliceTemplateLibraryManagerReadLibraryReturnType = {
    templates: {
        model: SharedSlice;
        screenshots: Record<string, Buffer>;
    }[];
    errors: (DecodeError | HookError)[];
};
type SliceTemplateLibraryManagerCreateSlicesReturnType = {
    data?: {
        sliceIDs: string[];
    };
    errors: (DecodeError | HookError)[];
};
type SliceTemplateLibraryReadLibraryData = {
    templateIDs?: string[];
};
type SliceTemplateLibraryCreateSlicesData = SliceTemplateLibraryReadLibraryData;
export declare class SliceTemplateLibraryManager extends BaseManager {
    readLibrary(args: SliceTemplateLibraryReadLibraryData): Promise<SliceTemplateLibraryManagerReadLibraryReturnType>;
    createSlices(args: SliceTemplateLibraryCreateSlicesData): Promise<SliceTemplateLibraryManagerCreateSlicesReturnType>;
}
export {};
