import { FieldType } from "@prismicio/types-internal/lib/customtypes/widgets";
import { CustomTypeFormat } from "../customTypes/types";
import type { PushChangesLimitType } from "../prismicRepository/types";
export type { Variant } from "@amplitude/experiment-node-server";
export declare const SegmentEventType: {
    readonly command_init_start: "command:init:start";
    readonly command_init_identify: "command:init:identify";
    readonly command_init_end: "command:init:end";
    readonly review: "review";
    readonly sliceSimulator_open: "slice-simulator:open";
    readonly sliceSimulator_isNotRunning: "slice-simulator:is-not-running";
    readonly pageView: "page-view";
    readonly openVideoTutorials: "open-video-tutorials";
    readonly field_added: "field:added";
    readonly field_settingsOpened: "field:settings-opened";
    readonly customType_created: "custom-type:created";
    readonly customType_sliceZoneUpdated: "custom-type:slice-zone-updated";
    readonly customType_openAddFromTemplates: "custom-type:open-add-from-templates";
    readonly customType_saved: "custom-type:saved";
    readonly slice_created: "slice:created";
    readonly legacySlice_converted: "legacy-slice:converted";
    readonly screenshotTaken: "screenshot-taken";
    readonly changes_pushed: "changes:pushed";
    readonly changes_limitReach: "changes:limit-reach";
    readonly editor_widgetUsed: "editor:widget-used";
    readonly open_page_snippet: "page-type:open-snippet";
    readonly copy_page_snippet: "page-type:copy-snippet";
    readonly switch_environment: "environment:switch";
    readonly devCollab_joinBetaClicked: "dev-collab:join-beta-clicked";
    readonly devCollab_setUpWorkflowOpened: "dev-collab:set-up-workflow-opened";
    readonly devCollab_workflowStubDisplayed: "dev-collab:workflow-stub-displayed";
    readonly sliceMachine_start: "slice-machine:start";
    readonly sliceLibrary_beta_modalOpened: "slice-library:beta:modal-opened";
    readonly sliceLibrary_beta_codeOpened: "slice-library:beta:code-opened";
};
type SegmentEventTypes = (typeof SegmentEventType)[keyof typeof SegmentEventType];
export declare const HumanSegmentEventType: {
    readonly "command:init:start": "SliceMachine Init Start";
    readonly "command:init:identify": "SliceMachine Init Identify";
    readonly "command:init:end": "SliceMachine Init End";
    readonly review: "SliceMachine Review";
    readonly "slice-simulator:open": "SliceMachine Slice Simulator Open";
    readonly "slice-simulator:is-not-running": "SliceMachine Slice Simulator is not running";
    readonly "page-view": "SliceMachine Page View";
    readonly "open-video-tutorials": "SliceMachine Open Video Tutorials";
    readonly "field:added": "SliceMachine Field Added";
    readonly "field:settings-opened": "SliceMachine Field Settings Opened";
    readonly "custom-type:created": "SliceMachine Custom Type Created";
    readonly "custom-type:slice-zone-updated": "SliceMachine Slicezone Updated";
    readonly "custom-type:open-add-from-templates": "SliceMachine Open Add from templates";
    readonly "custom-type:saved": "SliceMachine Custom Type Saved";
    readonly "slice:created": "SliceMachine Slice Created";
    readonly "legacy-slice:converted": "SliceMachine Legacy Slice Converted";
    readonly "screenshot-taken": "SliceMachine Screenshot Taken";
    readonly "changes:pushed": "SliceMachine Changes Pushed";
    readonly "changes:limit-reach": "SliceMachine Changes Limit Reach";
    readonly "editor:widget-used": "SliceMachine Editor Widget Used";
    readonly "page-type:open-snippet": "SliceMachine Opens Page Type Snippet Dialog";
    readonly "page-type:copy-snippet": "Slice Machine page code snippet copied";
    readonly "environment:switch": "SliceMachine environment switch";
    readonly "dev-collab:join-beta-clicked": "SliceMachine Dev Collab Join Beta Clicked";
    readonly "dev-collab:set-up-workflow-opened": "SliceMachine Dev Collab Set Up Workflow Opened";
    readonly "dev-collab:workflow-stub-displayed": "SliceMachine Dev Collab Workflow Stub Displayed";
    readonly "slice-machine:start": "SliceMachine Start";
    readonly "slice-library:beta:modal-opened": "SliceMachine Slice Library [BETA] CTA modal displayed";
    readonly "slice-library:beta:code-opened": "SliceMachine Slice Library [BETA] CTA example code opened";
};
export type HumanSegmentEventTypes = (typeof HumanSegmentEventType)[keyof typeof HumanSegmentEventType];
type SegmentEvent<TType extends SegmentEventTypes, TProperties extends Record<string, unknown> | void = void> = TProperties extends void ? {
    event: TType;
    repository?: string;
} : {
    event: TType;
    repository?: string;
} & TProperties;
type CommandInitStartSegmentEvent = SegmentEvent<typeof SegmentEventType.command_init_start>;
type CommandInitIdentifySegmentEvent = SegmentEvent<typeof SegmentEventType.command_init_identify>;
type CommandInitEndSegmentEvent = SegmentEvent<typeof SegmentEventType.command_init_end, {
    framework: string;
    success: boolean;
    error?: string;
}>;
type ReviewSegmentEvent = SegmentEvent<typeof SegmentEventType.review, {
    rating: number;
    comment: string;
    type: "onboarding" | "advanced repository";
}>;
type SliceSimulatorOpenSegmentEvent = SegmentEvent<typeof SegmentEventType.sliceSimulator_open>;
type SliceSimulatorIsNotRunningSegmentEvent = SegmentEvent<typeof SegmentEventType.sliceSimulator_isNotRunning>;
type PageViewSegmentEvent = SegmentEvent<typeof SegmentEventType.pageView, {
    url: string;
    path: string;
    search: string;
    title: string;
    referrer: string;
    adapter: string;
    outerWidth: number;
    outerHeight: number;
    screenWidth: number;
    screenHeight: number;
}>;
type OpenPageSnippetSegmentEvent = SegmentEvent<typeof SegmentEventType.open_page_snippet, {
    framework: string;
}>;
type CopyPageSnippetSegmentEvent = SegmentEvent<typeof SegmentEventType.copy_page_snippet, {
    framework: string;
}>;
type SwitchEnvironmentSegmentEvent = SegmentEvent<typeof SegmentEventType.switch_environment, {
    domain: string;
}>;
type OpenVideoTutorialsSegmentEvent = SegmentEvent<typeof SegmentEventType.openVideoTutorials, {
    video: string;
}>;
type FieldAddedSegmentEvent = SegmentEvent<typeof SegmentEventType.field_added, {
    id: string;
    name: string;
    type: FieldType;
    isInAGroup: boolean;
    contentType: "page type" | "custom type" | "slice";
}>;
type FieldSettingsOpenedSegmentEvent = SegmentEvent<typeof SegmentEventType.field_settingsOpened, {
    id: string;
    name: string;
    type: FieldType;
    isInAGroup: boolean;
    contentType: "page type" | "custom type" | "slice";
}>;
type CustomTypeCreatedSegmentEvent = SegmentEvent<typeof SegmentEventType.customType_created, {
    id: string;
    name: string;
    format: CustomTypeFormat;
    type: "repeatable" | "single";
    origin: "onboarding" | "table";
}>;
type CustomTypeSliceZoneUpdatedSegmentEvent = SegmentEvent<typeof SegmentEventType.customType_sliceZoneUpdated, {
    customTypeId: string;
}>;
type CustomTypeOpenAddFromTemplatesEvent = SegmentEvent<typeof SegmentEventType.customType_openAddFromTemplates, {
    customTypeId: string;
    customTypeFormat: CustomTypeFormat;
}>;
type CustomTypeSavedSegmentEvent = SegmentEvent<typeof SegmentEventType.customType_saved, {
    id: string;
    name: string;
    format: CustomTypeFormat;
    type: "repeatable" | "single";
}>;
type SliceCreatedSegmentEvent = SegmentEvent<typeof SegmentEventType.slice_created, {
    id: string;
    name: string;
    library: string;
    sliceTemplate?: string;
}>;
type LegacySliceConvertedSegmentEvent = SegmentEvent<typeof SegmentEventType.legacySlice_converted, {
    id: string;
    variation: string;
    library: string;
    conversionType: "as_new_slice" | "as_new_variation" | "merge_with_identical";
}>;
type ScreenshotTakenSegmentEvent = SegmentEvent<typeof SegmentEventType.screenshotTaken, {
    type: "custom";
    method: "upload" | "dragAndDrop";
}>;
type ChangesPushedSegmentEvent = SegmentEvent<typeof SegmentEventType.changes_pushed, {
    customTypesCreated: number;
    customTypesModified: number;
    customTypesDeleted: number;
    slicesCreated: number;
    slicesModified: number;
    slicesDeleted: number;
    missingScreenshots: number;
    total: number;
    duration: number;
    hasDeletedDocuments: boolean;
}>;
type ChangesLimitReachSegmentEvent = SegmentEvent<typeof SegmentEventType.changes_limitReach, {
    limitType: PushChangesLimitType;
}>;
type EditorWidgetUsedSegmentEvent = SegmentEvent<typeof SegmentEventType.editor_widgetUsed, {
    sliceId: string;
}>;
type DevCollabJoinBetaClicked = SegmentEvent<typeof SegmentEventType.devCollab_joinBetaClicked>;
type DevCollabSetUpWorkflowOpened = SegmentEvent<typeof SegmentEventType.devCollab_setUpWorkflowOpened>;
type DevCollabWorkflowStubDisplayed = SegmentEvent<typeof SegmentEventType.devCollab_workflowStubDisplayed>;
type SliceMachineStart = SegmentEvent<typeof SegmentEventType.sliceMachine_start, {
    adapter?: string;
    adapterVersion?: string;
    gitProvider?: string;
    isAdapterUpdateAvailable?: boolean;
    isLoggedIn?: boolean;
    isSliceMachineUpdateAvailable?: boolean;
    isTypeScriptProject?: boolean;
    nodeVersion?: string;
    numberOfCustomTypes?: number;
    numberOfSlices?: number;
    osPlatform?: string;
    packageManager?: string;
    projectPort?: string;
    sliceMachineVersion?: string;
    versionControlSystem?: string;
}>;
type SliceLibraryBetaModalOpened = SegmentEvent<typeof SegmentEventType.sliceLibrary_beta_modalOpened>;
type SliceLibraryBetaCodeOpened = SegmentEvent<typeof SegmentEventType.sliceLibrary_beta_codeOpened>;
export type SegmentEvents = CommandInitStartSegmentEvent | CommandInitIdentifySegmentEvent | CommandInitEndSegmentEvent | ReviewSegmentEvent | SliceSimulatorOpenSegmentEvent | SliceSimulatorIsNotRunningSegmentEvent | PageViewSegmentEvent | OpenVideoTutorialsSegmentEvent | FieldAddedSegmentEvent | FieldSettingsOpenedSegmentEvent | CustomTypeCreatedSegmentEvent | CustomTypeSliceZoneUpdatedSegmentEvent | CustomTypeOpenAddFromTemplatesEvent | CustomTypeSavedSegmentEvent | SliceCreatedSegmentEvent | LegacySliceConvertedSegmentEvent | ScreenshotTakenSegmentEvent | ChangesPushedSegmentEvent | ChangesLimitReachSegmentEvent | EditorWidgetUsedSegmentEvent | OpenPageSnippetSegmentEvent | CopyPageSnippetSegmentEvent | SwitchEnvironmentSegmentEvent | DevCollabJoinBetaClicked | DevCollabSetUpWorkflowOpened | DevCollabWorkflowStubDisplayed | SliceMachineStart | SliceLibraryBetaModalOpened | SliceLibraryBetaCodeOpened;
