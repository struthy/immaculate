/// <reference types="node" />
import { SharedSlice, CustomType } from "@prismicio/types-internal/lib/customtypes";
import { SharedSliceContent } from "@prismicio/types-internal/lib/content";
import { SliceMachinePlugin, SliceMachinePluginRunner } from "@slicemachine/plugin-kit";
import { PackageManager } from "../types";
import { PrismicAuthManager } from "../auth/PrismicAuthManager";
import { APIEndpoints } from "../constants/API_ENDPOINTS";
import { UserManager } from "./user/UserManager";
import { PrismicRepositoryManager } from "./prismicRepository/PrismicRepositoryManager";
import { PluginsManager } from "./plugins/PluginsManager";
import { ProjectManager } from "./project/ProjectManager";
import { CustomTypesManager } from "./customTypes/CustomTypesManager";
import { SlicesManager } from "./slices/SlicesManager";
import { SnippetsManager } from "./snippets/SnippetsManager";
import { ScreenshotsManager } from "./screenshots/ScreenshotsManager";
import { SimulatorManager } from "./simulator/SimulatorManager";
import { VersionsManager } from "./versions/VersionsManager";
import { TelemetryManager } from "./telemetry/TelemetryManager";
import { DocumentationManager } from "./documentation/DocumentationManager";
import { SliceTemplateLibraryManager } from "./sliceTemplateLibrary/SliceTemplateLibraryManager";
import { GitManager } from "./git/GitManager";
type SliceMachineManagerGetStateReturnType = {
    env: {
        shortId?: string;
        intercomHash?: string;
        manifest: {
            apiEndpoint: string;
            localSliceSimulatorURL?: string;
        };
        repo: string;
        packageManager: PackageManager;
        endpoints: APIEndpoints;
    };
    libraries: {
        name: string;
        path: string;
        isLocal: boolean;
        components: {
            from: string;
            href: string;
            pathToSlice: string;
            fileName: string | null;
            extension: string | null;
            model: SharedSlice;
            screenshots: Record<string, {
                hash: string;
                data: Buffer;
            }>;
            mocks?: SharedSliceContent[];
        }[];
        meta: {
            name?: string;
            version?: string;
            isNodeModule: boolean;
            isDownloaded: boolean;
            isManual: boolean;
        };
    }[];
    customTypes: CustomType[];
    remoteCustomTypes: CustomType[];
    remoteSlices: SharedSlice[];
    clientError?: {
        name: string;
        message: string;
        status: number;
        reason: string;
    };
};
type SliceMachineManagerConstructorArgs = {
    cwd?: string;
    nativePlugins?: Record<string, SliceMachinePlugin>;
};
export declare class SliceMachineManager {
    private _sliceMachinePluginRunner;
    private _prismicAuthManager;
    cwd: string;
    customTypes: CustomTypesManager;
    plugins: PluginsManager;
    prismicRepository: PrismicRepositoryManager;
    project: ProjectManager;
    screenshots: ScreenshotsManager;
    simulator: SimulatorManager;
    slices: SlicesManager;
    snippets: SnippetsManager;
    documentation: DocumentationManager;
    sliceTemplateLibrary: SliceTemplateLibraryManager;
    telemetry: TelemetryManager;
    user: UserManager;
    versions: VersionsManager;
    git: GitManager;
    constructor(args?: SliceMachineManagerConstructorArgs);
    getSliceMachinePluginRunner(): SliceMachinePluginRunner | undefined;
    getPrismicAuthManager(): PrismicAuthManager;
    getAPIEndpoints(): APIEndpoints;
    getState(): Promise<SliceMachineManagerGetStateReturnType>;
    private _getProfile;
    private _getLibraries;
    private _getCustomTypes;
}
export {};
