"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const path = require("node:path");
const checkPathExists = require("./lib/checkPathExists.cjs");
const isSharedSliceModel = require("./lib/isSharedSliceModel.cjs");
const readJSONFile = require("./lib/readJSONFile.cjs");
const fsLimit = require("./lib/fsLimit.cjs");
const buildSliceLibraryDirectoryPath = require("./buildSliceLibraryDirectoryPath.cjs");
const constants = require("./constants.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const path__namespace = /* @__PURE__ */ _interopNamespaceDefault(path);
const readSliceModel = async (args) => {
  const libraryDir = buildSliceLibraryDirectoryPath.buildSliceLibraryDirectoryPath({
    libraryID: args.libraryID,
    absolute: true,
    helpers: args.helpers
  });
  if (await checkPathExists.checkPathExists(libraryDir)) {
    const childDirs = await fsLimit.readdir(libraryDir, { withFileTypes: true });
    const unreadableModelPaths = [];
    const [model] = (await Promise.all(childDirs.map(async (childDir) => {
      if (childDir.isDirectory()) {
        const modelPath = path__namespace.join(libraryDir, childDir.name, constants.SHARED_SLICE_MODEL_FILENAME);
        try {
          const modelContents = await readJSONFile.readJSONFile(modelPath);
          if (isSharedSliceModel.isSharedSliceModel(modelContents) && modelContents.id === args.sliceID) {
            return modelContents;
          }
        } catch (error) {
          unreadableModelPaths.push(modelPath);
        }
      }
    }))).filter((model2) => Boolean(model2));
    if (model) {
      return {
        model
      };
    } else {
      if (unreadableModelPaths.length > 0) {
        throw new Error(`Did not find a Slice model with ID "${args.sliceID}" in the "${args.libraryID}" Slice Library. The following Slice models could not be read: [${unreadableModelPaths.join(", ")}]`);
      }
    }
  }
  throw new Error(`Did not find a Slice model with ID "${args.sliceID}" in the "${args.libraryID}" Slice Library.`);
};
exports.readSliceModel = readSliceModel;
//# sourceMappingURL=readSliceModel.cjs.map
