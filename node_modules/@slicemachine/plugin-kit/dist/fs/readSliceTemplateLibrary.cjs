"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const path = require("node:path");
const checkIsTypeScriptProject = require("./checkIsTypeScriptProject.cjs");
const fsLimit = require("./lib/fsLimit.cjs");
const readSliceTemplateLibrary = async (args) => {
  const isTypeScriptProject = await checkIsTypeScriptProject.checkIsTypeScriptProject(args);
  const { templateIDs, templates: initialTemplates, dirName, componentFileNames } = args;
  const templates = templateIDs && templateIDs.length ? initialTemplates.filter((t) => templateIDs == null ? void 0 : templateIDs.includes(t.model.id)) : initialTemplates;
  const templatesPromises = templates.map(async (t) => {
    const { mocks, model, screenshotPaths } = t;
    const screenshotEntries = Object.entries(screenshotPaths);
    const screenshotPromises = screenshotEntries.map(([key, filePath]) => {
      return fsLimit.readFile(path.join(dirName, filePath)).then((data) => [key, data]);
    });
    const readScreenshots = await Promise.all(screenshotPromises);
    const screenshots = Object.fromEntries(readScreenshots);
    const fileName = isTypeScriptProject ? componentFileNames.ts : componentFileNames.js;
    const componentContentsTemplate = await fsLimit.readFile(path.join(dirName, model.name, fileName), "utf-8");
    return {
      mocks,
      model,
      componentContentsTemplate,
      screenshots
    };
  });
  const resolvedTemplates = await Promise.all(templatesPromises);
  return {
    templates: resolvedTemplates
  };
};
exports.readSliceTemplateLibrary = readSliceTemplateLibrary;
//# sourceMappingURL=readSliceTemplateLibrary.cjs.map
