import * as path from "node:path";
import { checkPathExists } from "./lib/checkPathExists.js";
import { isSharedSliceModel } from "./lib/isSharedSliceModel.js";
import { readJSONFile } from "./lib/readJSONFile.js";
import { readdir } from "./lib/fsLimit.js";
import { buildSliceLibraryDirectoryPath } from "./buildSliceLibraryDirectoryPath.js";
import { SHARED_SLICE_MODEL_FILENAME } from "./constants.js";
const readSliceModel = async (args) => {
  const libraryDir = buildSliceLibraryDirectoryPath({
    libraryID: args.libraryID,
    absolute: true,
    helpers: args.helpers
  });
  if (await checkPathExists(libraryDir)) {
    const childDirs = await readdir(libraryDir, { withFileTypes: true });
    const unreadableModelPaths = [];
    const [model] = (await Promise.all(childDirs.map(async (childDir) => {
      if (childDir.isDirectory()) {
        const modelPath = path.join(libraryDir, childDir.name, SHARED_SLICE_MODEL_FILENAME);
        try {
          const modelContents = await readJSONFile(modelPath);
          if (isSharedSliceModel(modelContents) && modelContents.id === args.sliceID) {
            return modelContents;
          }
        } catch (error) {
          unreadableModelPaths.push(modelPath);
        }
      }
    }))).filter((model2) => Boolean(model2));
    if (model) {
      return {
        model
      };
    } else {
      if (unreadableModelPaths.length > 0) {
        throw new Error(`Did not find a Slice model with ID "${args.sliceID}" in the "${args.libraryID}" Slice Library. The following Slice models could not be read: [${unreadableModelPaths.join(", ")}]`);
      }
    }
  }
  throw new Error(`Did not find a Slice model with ID "${args.sliceID}" in the "${args.libraryID}" Slice Library.`);
};
export {
  readSliceModel
};
//# sourceMappingURL=readSliceModel.js.map
