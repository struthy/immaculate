"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const dotenv = require("dotenv");
const checkHasProjectFile = require("./checkHasProjectFile.cjs");
const readProjectFile = require("./readProjectFile.cjs");
const writeProjectFile = require("./writeProjectFile.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const dotenv__namespace = /* @__PURE__ */ _interopNamespaceDefault(dotenv);
const writeProjectEnvironment = async (args) => {
  const hasEnvironmentVariableFile = await checkHasProjectFile.checkHasProjectFile({
    filename: args.filename,
    helpers: args.helpers
  });
  if (!hasEnvironmentVariableFile && args.environment === void 0) {
    return;
  }
  let contents = hasEnvironmentVariableFile ? await readProjectFile.readProjectFile({
    filename: args.filename,
    helpers: args.helpers,
    encoding: "utf8"
  }) : "";
  const variableLine = `${args.variableName}=${args.environment}
`;
  const hasExistingVariable = args.variableName in dotenv__namespace.parse(contents);
  if (hasExistingVariable) {
    contents = contents.replace(new RegExp(`^${args.variableName}=.*
?$`, "m"), args.environment === void 0 ? "" : variableLine);
  } else {
    if (!contents.endsWith("\n")) {
      contents += "\n";
    }
    contents += variableLine;
  }
  await writeProjectFile.writeProjectFile({
    filename: args.filename,
    contents,
    format: false,
    helpers: args.helpers
  });
  return args.filename;
};
exports.writeProjectEnvironment = writeProjectEnvironment;
//# sourceMappingURL=writeProjectEnvironment.cjs.map
