{"version":3,"file":"readSliceTemplateLibrary.js","sources":["../../../src/fs/readSliceTemplateLibrary.ts"],"sourcesContent":["import path from \"node:path\";\n\nimport { SharedSlice } from \"@prismicio/types-internal/lib/customtypes\";\nimport { SharedSliceContent } from \"@prismicio/types-internal/lib/content\";\n\nimport { SliceMachineHelpers } from \"../createSliceMachineHelpers\";\nimport { SliceTemplateLibraryReadHookReturnType } from \"../hooks/sliceTemplateLibrary-read\";\n\nimport { checkIsTypeScriptProject } from \"./checkIsTypeScriptProject\";\n\nimport * as fs from \"./lib/fsLimit\";\n\nexport type ReadSliceTemplateLibraryArgs = {\n\thelpers: SliceMachineHelpers;\n\tdirName: string;\n\ttemplateIDs?: string[];\n\ttemplates: {\n\t\tmocks: SharedSliceContent[];\n\t\tscreenshotPaths: Record<string, string>;\n\t\tmodel: SharedSlice;\n\t}[];\n\tcomponentFileNames: {\n\t\tjs: string;\n\t\tts: string;\n\t};\n};\n\nexport const readSliceTemplateLibrary = async (\n\targs: ReadSliceTemplateLibraryArgs,\n): Promise<SliceTemplateLibraryReadHookReturnType> => {\n\tconst isTypeScriptProject = await checkIsTypeScriptProject(args);\n\n\tconst {\n\t\ttemplateIDs,\n\t\ttemplates: initialTemplates,\n\t\tdirName,\n\t\tcomponentFileNames,\n\t} = args;\n\n\tconst templates =\n\t\ttemplateIDs && templateIDs.length\n\t\t\t? initialTemplates.filter((t) => templateIDs?.includes(t.model.id))\n\t\t\t: initialTemplates;\n\n\tconst templatesPromises = templates.map(async (t) => {\n\t\tconst { mocks, model, screenshotPaths } = t;\n\n\t\tconst screenshotEntries = Object.entries(screenshotPaths);\n\t\tconst screenshotPromises = screenshotEntries.map(([key, filePath]) => {\n\t\t\treturn fs\n\t\t\t\t.readFile(path.join(dirName, filePath))\n\t\t\t\t.then((data) => [key, data]);\n\t\t});\n\t\tconst readScreenshots = await Promise.all(screenshotPromises);\n\t\tconst screenshots = Object.fromEntries(readScreenshots);\n\n\t\tconst fileName = isTypeScriptProject\n\t\t\t? componentFileNames.ts\n\t\t\t: componentFileNames.js;\n\n\t\tconst componentContentsTemplate = await fs.readFile(\n\t\t\tpath.join(dirName, model.name, fileName),\n\t\t\t\"utf-8\",\n\t\t);\n\n\t\treturn {\n\t\t\tmocks,\n\t\t\tmodel,\n\t\t\tcomponentContentsTemplate,\n\t\t\tscreenshots,\n\t\t};\n\t});\n\n\tconst resolvedTemplates = await Promise.all(templatesPromises);\n\n\treturn {\n\t\ttemplates: resolvedTemplates,\n\t};\n};\n"],"names":["fs.readFile","path"],"mappings":";;;AA2Ba,MAAA,2BAA2B,OACvC,SACoD;AAC9C,QAAA,sBAAsB,MAAM,yBAAyB,IAAI;AAE/D,QAAM,EACL,aACA,WAAW,kBACX,SACA,mBACG,IAAA;AAEJ,QAAM,YACL,eAAe,YAAY,SACxB,iBAAiB,OAAO,CAAC,MAAM,2CAAa,SAAS,EAAE,MAAM,GAAG,IAChE;AAEJ,QAAM,oBAAoB,UAAU,IAAI,OAAO,MAAK;AACnD,UAAM,EAAE,OAAO,OAAO,gBAAA,IAAoB;AAEpC,UAAA,oBAAoB,OAAO,QAAQ,eAAe;AACxD,UAAM,qBAAqB,kBAAkB,IAAI,CAAC,CAAC,KAAK,QAAQ,MAAK;AACpE,aAAOA,SACIC,cAAK,KAAK,SAAS,QAAQ,CAAC,EACrC,KAAK,CAAC,SAAS,CAAC,KAAK,IAAI,CAAC;AAAA,IAAA,CAC5B;AACD,UAAM,kBAAkB,MAAM,QAAQ,IAAI,kBAAkB;AACtD,UAAA,cAAc,OAAO,YAAY,eAAe;AAEtD,UAAM,WAAW,sBACd,mBAAmB,KACnB,mBAAmB;AAEhB,UAAA,4BAA4B,MAAMD,SACvCC,cAAK,KAAK,SAAS,MAAM,MAAM,QAAQ,GACvC,OAAO;AAGD,WAAA;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAAA,GAED;AAED,QAAM,oBAAoB,MAAM,QAAQ,IAAI,iBAAiB;AAEtD,SAAA;AAAA,IACN,WAAW;AAAA,EAAA;AAEb;"}