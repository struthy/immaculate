{"version":3,"file":"writeProjectFile.js","sources":["../../../src/fs/writeProjectFile.ts"],"sourcesContent":["import * as path from \"node:path\";\n\nimport { SliceMachineHelpers } from \"../createSliceMachineHelpers\";\n\nimport * as fs from \"./lib/fsLimit\";\n\nexport type WriteProjectFileArgs = {\n\tfilename: string;\n\tcontents: Parameters<typeof fs.writeFile>[1];\n\tformat?: boolean;\n\tformatOptions?: Parameters<SliceMachineHelpers[\"format\"]>[2];\n\thelpers: SliceMachineHelpers;\n};\n\n/**\n * Writes a file to the project with optional formatting.\n *\n * @returns The file path to the written file.\n */\nexport const writeProjectFile = async (\n\targs: WriteProjectFileArgs,\n): Promise<string> => {\n\tconst filePath = args.helpers.joinPathFromRoot(args.filename);\n\n\tlet contents = args.contents;\n\n\tif (args.format) {\n\t\tcontents = await args.helpers.format(\n\t\t\tcontents.toString(),\n\t\t\tfilePath,\n\t\t\targs.formatOptions,\n\t\t);\n\t}\n\n\tawait fs.mkdir(path.dirname(filePath), { recursive: true });\n\tawait fs.writeFile(filePath, contents);\n\n\treturn filePath;\n};\n"],"names":["fs.mkdir","fs.writeFile"],"mappings":";;AAmBa,MAAA,mBAAmB,OAC/B,SACoB;AACpB,QAAM,WAAW,KAAK,QAAQ,iBAAiB,KAAK,QAAQ;AAE5D,MAAI,WAAW,KAAK;AAEpB,MAAI,KAAK,QAAQ;AACL,eAAA,MAAM,KAAK,QAAQ,OAC7B,SAAS,SAAQ,GACjB,UACA,KAAK,aAAa;AAAA,EAEnB;AAEK,QAAAA,MAAS,KAAK,QAAQ,QAAQ,GAAG,EAAE,WAAW,KAAA,CAAM;AACpD,QAAAC,UAAa,UAAU,QAAQ;AAE9B,SAAA;AACR;"}