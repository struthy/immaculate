{"version":3,"file":"fsLimit.js","sources":["../../../../src/fs/lib/fsLimit.ts"],"sourcesContent":["import * as fs from \"node:fs/promises\";\nimport pLimit from \"p-limit\";\n\n/**\n * The parsed number value of the SM_FS_LIMIT environment variable.\n */\nconst SM_FS_LIMIT = Number.isNaN(Number(process.env.SM_FS_LIMIT))\n\t? undefined\n\t: Number(process.env.SM_FS_LIMIT);\n\n/**\n * The maximum number of concurrent file descriptors allowed to adapters to\n * minimize issues like `EMFILE: too many open files`.\n *\n * - MacOS default limit: 2560 (recent), 256 (old)\n * - Windows limit (per process): 2048\n */\nconst CONCURRENT_FILE_DESCRIPTORS_LIMIT = SM_FS_LIMIT ?? 1024;\n\n/**\n * Limit concurrent file descriptors for adapters.\n */\nconst fsLimit = pLimit(CONCURRENT_FILE_DESCRIPTORS_LIMIT);\n\n/**\n * Wrap a function with `fsLimit()` to limit concurrent calls. All functions\n * called with `wrapWithFSLimit()` share the same queue.\n *\n * @param fn - The function to wrap.\n *\n * @returns The wrapped function.\n */\nconst wrapWithFSLimit = <\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tTFn extends (...args: any[]) => any,\n>(\n\tfn: TFn,\n): TFn => {\n\treturn ((...args) => fsLimit(() => fn(...args))) as TFn;\n};\n\nexport const access = wrapWithFSLimit(fs.access);\nexport const appendFile = wrapWithFSLimit(fs.appendFile);\nexport const chmod = wrapWithFSLimit(fs.chmod);\nexport const chown = wrapWithFSLimit(fs.chown);\nexport const copyFile = wrapWithFSLimit(fs.copyFile);\nexport const cp = wrapWithFSLimit(fs.cp);\nexport const lchmod = wrapWithFSLimit(fs.lchmod);\nexport const lchown = wrapWithFSLimit(fs.lchown);\nexport const link = wrapWithFSLimit(fs.link);\nexport const lstat = wrapWithFSLimit(fs.lstat);\nexport const lutimes = wrapWithFSLimit(fs.lutimes);\nexport const mkdir = wrapWithFSLimit(fs.mkdir);\nexport const mkdtemp = wrapWithFSLimit(fs.mkdtemp);\nexport const open = wrapWithFSLimit(fs.open);\nexport const opendir = wrapWithFSLimit(fs.opendir);\nexport const readFile = wrapWithFSLimit(fs.readFile);\nexport const readdir = wrapWithFSLimit(fs.readdir);\nexport const readlink = wrapWithFSLimit(fs.readlink);\nexport const realpath = wrapWithFSLimit(fs.realpath);\nexport const rename = wrapWithFSLimit(fs.rename);\nexport const rm = wrapWithFSLimit(fs.rm);\nexport const rmdir = wrapWithFSLimit(fs.rmdir);\nexport const stat = wrapWithFSLimit(fs.stat);\nexport const statfs = wrapWithFSLimit(fs.statfs);\nexport const symlink = wrapWithFSLimit(fs.symlink);\nexport const truncate = wrapWithFSLimit(fs.truncate);\nexport const unlink = wrapWithFSLimit(fs.unlink);\nexport const utimes = wrapWithFSLimit(fs.utimes);\nexport const watch = wrapWithFSLimit(fs.watch);\nexport const writeFile = wrapWithFSLimit(fs.writeFile);\n"],"names":[],"mappings":";;AAMA,MAAM,cAAc,OAAO,MAAM,OAAO,QAAQ,IAAI,WAAW,CAAC,IAC7D,SACA,OAAO,QAAQ,IAAI,WAAW;AASjC,MAAM,oCAAoC,eAAe;AAKzD,MAAM,UAAU,OAAO,iCAAiC;AAUxD,MAAM,kBAAkB,CAIvB,OACQ;AACR,SAAQ,IAAI,SAAS,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC;AAC/C;AAEa,MAAA,SAAS,gBAAgB,GAAG,MAAM;AAWlC,MAAA,QAAQ,gBAAgB,GAAG,KAAK;AAIhC,MAAA,WAAW,gBAAgB,GAAG,QAAQ;AACtC,MAAA,UAAU,gBAAgB,GAAG,OAAO;AAIpC,MAAA,KAAK,gBAAgB,GAAG,EAAE;AAS1B,MAAA,YAAY,gBAAgB,GAAG,SAAS;"}