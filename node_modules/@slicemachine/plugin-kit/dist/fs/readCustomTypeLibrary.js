import * as path from "node:path";
import { checkPathExists } from "./lib/checkPathExists.js";
import { isCustomTypeModel } from "./lib/isCustomTypeModel.js";
import { readJSONFile } from "./lib/readJSONFile.js";
import { readdir } from "./lib/fsLimit.js";
import { CUSTOM_TYPE_MODEL_FILENAME } from "./constants.js";
import { buildCustomTypeLibraryDirectoryPath } from "./buildCustomTypeLibraryDirectoryPath.js";
const readCustomTypeLibrary = async (args) => {
  const libraryDir = buildCustomTypeLibraryDirectoryPath({
    absolute: true,
    helpers: args.helpers
  });
  if (!await checkPathExists(libraryDir)) {
    return {
      ids: []
    };
  }
  const childDirs = await readdir(libraryDir, { withFileTypes: true });
  const unreadableModelPaths = [];
  const ids = [];
  await Promise.all(childDirs.map(async (childDir) => {
    if (childDir.isDirectory()) {
      const childDirContents = await readdir(path.join(libraryDir, childDir.name), {
        withFileTypes: true
      });
      const isCustomTypeDir = childDirContents.some((entry) => {
        return entry.isFile() && entry.name === CUSTOM_TYPE_MODEL_FILENAME;
      });
      if (isCustomTypeDir) {
        const modelPath = path.join(libraryDir, childDir.name, CUSTOM_TYPE_MODEL_FILENAME);
        try {
          const modelContents = await readJSONFile(modelPath);
          if (isCustomTypeModel(modelContents)) {
            ids.push(modelContents.id);
          }
        } catch {
          unreadableModelPaths.push(modelPath);
        }
      }
    }
  }));
  if (unreadableModelPaths.length > 0) {
    const formattedPaths = unreadableModelPaths.join(", ");
    throw new Error(`The following custom type models could not be read: [${formattedPaths}]`);
  }
  return {
    ids: ids.sort()
  };
};
export {
  readCustomTypeLibrary
};
//# sourceMappingURL=readCustomTypeLibrary.js.map
