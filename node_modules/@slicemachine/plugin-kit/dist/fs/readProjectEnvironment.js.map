{"version":3,"file":"readProjectEnvironment.js","sources":["../../../src/fs/readProjectEnvironment.ts"],"sourcesContent":["import * as dotenv from \"dotenv\";\n\nimport {\n\tcheckHasProjectFile,\n\tCheckHasProjectFileArgs,\n} from \"./checkHasProjectFile\";\n\nimport { readProjectFile, ReadProjectFileArgs } from \"./readProjectFile\";\n\nexport type ReadProjectEnvironmentArgs = {\n\tfilenames: string[];\n\tvariableName: string;\n} & Omit<CheckHasProjectFileArgs, \"filename\"> &\n\tOmit<ReadProjectFileArgs, \"filename\">;\n\nexport type ReadEnvironmentReturnType = {\n\tenvironment: string | undefined;\n};\n\nexport const readProjectEnvironment = async (\n\targs: ReadProjectEnvironmentArgs,\n): Promise<ReadEnvironmentReturnType> => {\n\tlet vars: Partial<Record<string, string>> = {};\n\n\tfor (const filename of args.filenames) {\n\t\tconst hasProjectFile = await checkHasProjectFile({\n\t\t\tfilename,\n\t\t\thelpers: args.helpers,\n\t\t});\n\n\t\tif (!hasProjectFile) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst contents = await readProjectFile({\n\t\t\tfilename,\n\t\t\thelpers: args.helpers,\n\t\t});\n\n\t\tvars = {\n\t\t\t...vars,\n\t\t\t...dotenv.parse(contents),\n\t\t};\n\t}\n\n\treturn {\n\t\tenvironment: vars[args.variableName],\n\t};\n};\n"],"names":[],"mappings":";;;AAmBa,MAAA,yBAAyB,OACrC,SACuC;AACvC,MAAI,OAAwC,CAAA;AAEjC,aAAA,YAAY,KAAK,WAAW;AAChC,UAAA,iBAAiB,MAAM,oBAAoB;AAAA,MAChD;AAAA,MACA,SAAS,KAAK;AAAA,IAAA,CACd;AAED,QAAI,CAAC,gBAAgB;AACpB;AAAA,IACA;AAEK,UAAA,WAAW,MAAM,gBAAgB;AAAA,MACtC;AAAA,MACA,SAAS,KAAK;AAAA,IAAA,CACd;AAEM,WAAA;AAAA,MACN,GAAG;AAAA,MACH,GAAG,OAAO,MAAM,QAAQ;AAAA,IAAA;AAAA,EAEzB;AAEM,SAAA;AAAA,IACN,aAAa,KAAK,KAAK,YAAY;AAAA,EAAA;AAErC;"}