import * as path from "node:path";
import { checkPathExists } from "./lib/checkPathExists.js";
import { isSharedSliceModel } from "./lib/isSharedSliceModel.js";
import { readJSONFile } from "./lib/readJSONFile.js";
import { readdir } from "./lib/fsLimit.js";
import { SHARED_SLICE_MODEL_FILENAME } from "./constants.js";
import { buildSliceLibraryDirectoryPath } from "./buildSliceLibraryDirectoryPath.js";
const readSliceLibrary = async (args) => {
  const libraryDir = buildSliceLibraryDirectoryPath({
    libraryID: args.libraryID,
    absolute: true,
    helpers: args.helpers
  });
  if (!await checkPathExists(libraryDir)) {
    return {
      id: args.libraryID,
      sliceIDs: []
    };
  }
  const childDirs = await readdir(libraryDir, { withFileTypes: true });
  const unreadableModelPaths = [];
  const sliceIDs = [];
  await Promise.all(childDirs.map(async (childDir) => {
    if (childDir.isDirectory()) {
      const childDirContents = await readdir(path.join(libraryDir, childDir.name), {
        withFileTypes: true
      });
      const isSliceDir = childDirContents.some((entry) => {
        return entry.isFile() && entry.name === SHARED_SLICE_MODEL_FILENAME;
      });
      if (isSliceDir) {
        const modelPath = path.join(libraryDir, childDir.name, SHARED_SLICE_MODEL_FILENAME);
        try {
          const modelContents = await readJSONFile(modelPath);
          if (isSharedSliceModel(modelContents)) {
            sliceIDs.push(modelContents.id);
          }
        } catch {
          unreadableModelPaths.push(modelPath);
        }
      }
    }
  }));
  if (unreadableModelPaths.length > 0) {
    const formattedPaths = unreadableModelPaths.join(", ");
    throw new Error(`The following Slice models could not be read: [${formattedPaths}]`);
  }
  return {
    id: args.libraryID,
    sliceIDs: sliceIDs.sort()
  };
};
export {
  readSliceLibrary
};
//# sourceMappingURL=readSliceLibrary.js.map
