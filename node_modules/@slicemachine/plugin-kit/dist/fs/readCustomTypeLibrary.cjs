"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const path = require("node:path");
const checkPathExists = require("./lib/checkPathExists.cjs");
const isCustomTypeModel = require("./lib/isCustomTypeModel.cjs");
const readJSONFile = require("./lib/readJSONFile.cjs");
const fsLimit = require("./lib/fsLimit.cjs");
const constants = require("./constants.cjs");
const buildCustomTypeLibraryDirectoryPath = require("./buildCustomTypeLibraryDirectoryPath.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const path__namespace = /* @__PURE__ */ _interopNamespaceDefault(path);
const readCustomTypeLibrary = async (args) => {
  const libraryDir = buildCustomTypeLibraryDirectoryPath.buildCustomTypeLibraryDirectoryPath({
    absolute: true,
    helpers: args.helpers
  });
  if (!await checkPathExists.checkPathExists(libraryDir)) {
    return {
      ids: []
    };
  }
  const childDirs = await fsLimit.readdir(libraryDir, { withFileTypes: true });
  const unreadableModelPaths = [];
  const ids = [];
  await Promise.all(childDirs.map(async (childDir) => {
    if (childDir.isDirectory()) {
      const childDirContents = await fsLimit.readdir(path__namespace.join(libraryDir, childDir.name), {
        withFileTypes: true
      });
      const isCustomTypeDir = childDirContents.some((entry) => {
        return entry.isFile() && entry.name === constants.CUSTOM_TYPE_MODEL_FILENAME;
      });
      if (isCustomTypeDir) {
        const modelPath = path__namespace.join(libraryDir, childDir.name, constants.CUSTOM_TYPE_MODEL_FILENAME);
        try {
          const modelContents = await readJSONFile.readJSONFile(modelPath);
          if (isCustomTypeModel.isCustomTypeModel(modelContents)) {
            ids.push(modelContents.id);
          }
        } catch {
          unreadableModelPaths.push(modelPath);
        }
      }
    }
  }));
  if (unreadableModelPaths.length > 0) {
    const formattedPaths = unreadableModelPaths.join(", ");
    throw new Error(`The following custom type models could not be read: [${formattedPaths}]`);
  }
  return {
    ids: ids.sort()
  };
};
exports.readCustomTypeLibrary = readCustomTypeLibrary;
//# sourceMappingURL=readCustomTypeLibrary.cjs.map
