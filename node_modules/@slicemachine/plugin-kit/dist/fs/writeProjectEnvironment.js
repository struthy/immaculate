import * as dotenv from "dotenv";
import { checkHasProjectFile } from "./checkHasProjectFile.js";
import { readProjectFile } from "./readProjectFile.js";
import { writeProjectFile } from "./writeProjectFile.js";
const writeProjectEnvironment = async (args) => {
  const hasEnvironmentVariableFile = await checkHasProjectFile({
    filename: args.filename,
    helpers: args.helpers
  });
  if (!hasEnvironmentVariableFile && args.environment === void 0) {
    return;
  }
  let contents = hasEnvironmentVariableFile ? await readProjectFile({
    filename: args.filename,
    helpers: args.helpers,
    encoding: "utf8"
  }) : "";
  const variableLine = `${args.variableName}=${args.environment}
`;
  const hasExistingVariable = args.variableName in dotenv.parse(contents);
  if (hasExistingVariable) {
    contents = contents.replace(new RegExp(`^${args.variableName}=.*
?$`, "m"), args.environment === void 0 ? "" : variableLine);
  } else {
    if (!contents.endsWith("\n")) {
      contents += "\n";
    }
    contents += variableLine;
  }
  await writeProjectFile({
    filename: args.filename,
    contents,
    format: false,
    helpers: args.helpers
  });
  return args.filename;
};
export {
  writeProjectEnvironment
};
//# sourceMappingURL=writeProjectEnvironment.js.map
