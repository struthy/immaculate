import { HookSystem } from "./lib/HookSystem";
import { SliceMachineHooks, SliceMachineProject } from "./types";
import { CustomTypeLibraryReadHookReturnType } from "./hooks/customTypeLibrary-read";
import { CustomTypeReadHookData, CustomTypeReadHookReturnType } from "./hooks/customType-read";
import { SliceLibraryReadHookData, SliceLibraryReadHookReturnType } from "./hooks/sliceLibrary-read";
import { SliceReadHookData, SliceReadHookReturnType } from "./hooks/slice-read";
export type ReadAllSliceModelsActionArgs<TWithMetadata extends boolean = false> = {
    withMetadata?: TWithMetadata;
};
export type ReadAllSliceModelsActionReturnType = (SliceReadHookReturnType & {
    libraryID: string;
})[];
export type ReadAllSliceModelsForLibraryActionArgs = {
    libraryID: string;
};
/**
 * Creates Slice Machine actions.
 *
 * @internal
 */
export declare const createSliceMachineActions: (project: SliceMachineProject, hookSystem: HookSystem<SliceMachineHooks>) => SliceMachineActions;
/**
 * Slice Machine actions shared to plugins and hooks.
 */
export declare class SliceMachineActions {
    /**
     * The Slice Machine project's metadata.
     *
     * @internal
     */
    private _project;
    /**
     * The actions' hook system used to internally trigger hook calls.
     *
     * @internal
     */
    private _hookSystem;
    constructor(project: SliceMachineProject, hookSystem: HookSystem<SliceMachineHooks>);
    readAllSliceModels: () => Promise<ReadAllSliceModelsActionReturnType>;
    readAllSliceModelsForLibrary: (args: ReadAllSliceModelsForLibraryActionArgs) => Promise<SliceReadHookReturnType[]>;
    readSliceModel: (args: SliceReadHookData) => Promise<SliceReadHookReturnType>;
    readSliceLibrary: (args: SliceLibraryReadHookData) => Promise<SliceLibraryReadHookReturnType>;
    readAllCustomTypeModels: () => Promise<CustomTypeReadHookReturnType[]>;
    readCustomTypeModel: (args: CustomTypeReadHookData) => Promise<CustomTypeReadHookReturnType>;
    readCustomTypeLibrary: () => Promise<CustomTypeLibraryReadHookReturnType>;
}
