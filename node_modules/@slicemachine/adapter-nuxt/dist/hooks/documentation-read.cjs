"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const commonTags = require("common-tags");
const checkIsTypeScriptProject = require("../lib/checkIsTypeScriptProject.cjs");
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a, _b;
const documentationRead = async (data, { options, helpers }) => {
  const isTypeScriptProject = await checkIsTypeScriptProject.checkIsTypeScriptProject({
    helpers,
    options
  });
  if (data.kind === "PageSnippet") {
    const { model } = data.data;
    const filePath = `${model.repeatable ? "[uid]" : model.id}.vue`;
    const scriptAttributes = ["setup"];
    if (isTypeScriptProject) {
      scriptAttributes.push('lang="ts"');
    }
    let fileContent;
    if (model.repeatable) {
      fileContent = commonTags.stripIndent(_a || (_a = __template(["\n				<script ", '>\n				import { components } from "~/slices";\n\n				const prismic = usePrismic();\n				const route = useRoute();\n				const { data: page } = useAsyncData(`[', '-uid-${route.params.uid}]`, () =>\n					prismic.client.getByUID("', '", route.params.uid', ')\n				);\n\n				useHead({\n					title: page.value?.data.meta_title,\n					meta: [{\n						name: "description",\n						content: page.value?.data.meta_description,\n					}],\n				});\n				<\/script>\n\n				<template>\n					<SliceZone\n						wrapper="main"\n						:slices="page?.data.slices ?? []"\n						:components="components"\n					/>\n				</template>\n			'], ["\n				<script ", '>\n				import { components } from "~/slices";\n\n				const prismic = usePrismic();\n				const route = useRoute();\n				const { data: page } = useAsyncData(\\`[', '-uid-\\${route.params.uid}]\\`, () =>\n					prismic.client.getByUID("', '", route.params.uid', ')\n				);\n\n				useHead({\n					title: page.value?.data.meta_title,\n					meta: [{\n						name: "description",\n						content: page.value?.data.meta_description,\n					}],\n				});\n				<\/script>\n\n				<template>\n					<SliceZone\n						wrapper="main"\n						:slices="page?.data.slices ?? []"\n						:components="components"\n					/>\n				</template>\n			'])), scriptAttributes.join(" "), model.id, model.id, isTypeScriptProject ? " as string" : "");
    } else {
      fileContent = commonTags.stripIndent(_b || (_b = __template(["\n				<script ", '>\n					import { components } from "~/slices";\n\n					const prismic = usePrismic();\n					const { data: page } = useAsyncData("[', ']", () =>\n						prismic.client.getSingle("', '")\n					);\n\n					useHead({\n						title: page.value?.data.meta_title,\n						meta: [{\n							name: "description",\n							content: page.value?.data.meta_description,\n						}],\n					});\n				<\/script>\n\n				<template>\n					<SliceZone\n						wrapper="main"\n						:slices="page?.data.slices ?? []"\n						:components="components"\n					/>\n				</template>\n			'])), scriptAttributes.join(" "), model.id, model.id);
    }
    if (options.format) {
      fileContent = await helpers.format(fileContent, helpers.joinPathFromRoot("index.vue"), {
        prettier: { parser: "vue" },
        includeNewlineAtEnd: false
      });
    }
    return [
      {
        label: "Composition API",
        content: commonTags.source`
					## Create your ${model.label}'s page component

					Add a new route by creating an \`~/pages/${filePath}\` file. (If the route should be nested in a child directory, you can create the file in a directory, like \`~/pages/marketing/${filePath}\`.)

					Paste in this code:

					${`~~~vue [~/pages/${filePath}]
${fileContent}
~~~`}

					Make sure all of your import paths are correct. See the [install guide](https://prismic.io/docs/nuxt-3-setup) for more information.
				`
      }
    ];
  }
  return [];
};
exports.documentationRead = documentationRead;
//# sourceMappingURL=documentation-read.cjs.map
