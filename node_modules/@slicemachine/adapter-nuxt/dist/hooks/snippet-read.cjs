"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const commonTags = require("common-tags");
const dotPath = (segments) => {
  return segments.join(".");
};
const format = async (input, helpers) => {
  const formattedInput = await helpers.format(input, void 0, {
    includeNewlineAtEnd: false,
    prettier: {
      parser: "vue"
    }
  });
  return formattedInput.endsWith(";") ? formattedInput.substring(0, formattedInput.length - 1) : formattedInput;
};
const snippetRead = async (data, { helpers }) => {
  const { fieldPath } = data;
  const label = "Vue";
  switch (data.model.type) {
    case "StructuredText": {
      return [
        {
          label: `${label} (rich)`,
          language: "vue",
          code: await format(commonTags.stripIndent`
						<PrismicRichText :field="${dotPath(fieldPath)}" />
					`, helpers)
        },
        {
          label: `${label} (plain)`,
          language: "vue",
          code: await format(commonTags.stripIndent`
						<PrismicText :field="${dotPath(fieldPath)}" />
					`, helpers)
        }
      ];
    }
    case "Link": {
      return {
        label,
        language: "vue",
        code: await format(commonTags.stripIndent`
						<PrismicLink :field="${dotPath(fieldPath)}">Link</PrismicLink>
					`, helpers)
      };
    }
    case "Image": {
      return {
        label,
        language: "vue",
        code: await format(commonTags.stripIndent`
							<PrismicImage :field="${dotPath(fieldPath)}" />
						`, helpers)
      };
    }
    case "Embed": {
      return {
        label,
        language: "vue",
        code: await format(commonTags.stripIndent`
							<PrismicEmbed :field="${dotPath(fieldPath)}" />
						`, helpers)
      };
    }
    case "Group": {
      return {
        label,
        language: "vue",
        code: await format(commonTags.stripIndent`
						<template v-for="item in ${dotPath(fieldPath)}">
							{{ item }}
						</template>
					`, helpers)
      };
    }
    case "Slices": {
      const code = await format(commonTags.stripIndent`
					<SliceZone
						:slices="${dotPath(fieldPath)}"
						:components="components"
					/>
				`, helpers);
      return {
        label,
        language: "vue",
        code
      };
    }
    default: {
      return {
        label,
        language: "vue",
        code: await format(commonTags.stripIndent`
						{{${dotPath(fieldPath)}}}
					`, helpers)
      };
    }
  }
};
exports.snippetRead = snippetRead;
//# sourceMappingURL=snippet-read.cjs.map
