"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const fs = require("@slicemachine/plugin-kit/fs");
const commonTags = require("common-tags");
const checkIsTypeScriptProject = require("../lib/checkIsTypeScriptProject.cjs");
const pascalCase = require("../lib/pascalCase.cjs");
const rejectIfNecessary = require("../lib/rejectIfNecessary.cjs");
const upsertSliceLibraryIndexFile = require("../lib/upsertSliceLibraryIndexFile.cjs");
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a, _b;
const createComponentFile = async ({ data, helpers, actions, options }) => {
  const pascalName = pascalCase.pascalCase(data.model.name);
  let contents;
  const isTypeScriptProject = await checkIsTypeScriptProject.checkIsTypeScriptProject({
    helpers,
    options
  });
  if (data.componentContents) {
    contents = data.componentContents;
  } else if (isTypeScriptProject) {
    contents = commonTags.stripIndent(_a || (_a = __template(['\n			<script setup lang="ts">\n			import { type Content } from "@prismicio/client";\n\n			// The array passed to `getSliceComponentProps` is purely optional.\n			// Consider it as a visual hint for you when templating your slice.\n			defineProps(getSliceComponentProps<Content.', 'Slice>(\n				["slice", "index", "slices", "context"]\n			));\n			<\/script>\n\n			<template>\n				<section\n					:data-slice-type="slice.slice_type"\n					:data-slice-variation="slice.variation"\n				>\n					Placeholder component for ', " (variation: {{ slice.variation }}) Slices\n				</section>\n			</template>\n		"], ['\n			<script setup lang="ts">\n			import { type Content } from "@prismicio/client";\n\n			// The array passed to \\`getSliceComponentProps\\` is purely optional.\n			// Consider it as a visual hint for you when templating your slice.\n			defineProps(getSliceComponentProps<Content.', 'Slice>(\n				["slice", "index", "slices", "context"]\n			));\n			<\/script>\n\n			<template>\n				<section\n					:data-slice-type="slice.slice_type"\n					:data-slice-variation="slice.variation"\n				>\n					Placeholder component for ', " (variation: {{ slice.variation }}) Slices\n				</section>\n			</template>\n		"])), pascalName, data.model.id);
  } else {
    contents = commonTags.stripIndent(_b || (_b = __template(['\n			<script setup>\n			// The array passed to `getSliceComponentProps` is purely optional.\n			// Consider it as a visual hint for you when templating your slice.\n			defineProps(getSliceComponentProps(["slice", "index", "slices", "context"]));\n			<\/script>\n\n			<template>\n				<section\n					:data-slice-type="slice.slice_type"\n					:data-slice-variation="slice.variation"\n				>\n					Placeholder component for {{ model.id }} (variation: {{ slice.variation }}) Slices\n				</section>\n			</template>\n		'], ['\n			<script setup>\n			// The array passed to \\`getSliceComponentProps\\` is purely optional.\n			// Consider it as a visual hint for you when templating your slice.\n			defineProps(getSliceComponentProps(["slice", "index", "slices", "context"]));\n			<\/script>\n\n			<template>\n				<section\n					:data-slice-type="slice.slice_type"\n					:data-slice-variation="slice.variation"\n				>\n					Placeholder component for {{ model.id }} (variation: {{ slice.variation }}) Slices\n				</section>\n			</template>\n		'])));
  }
  await fs.writeSliceFile({
    libraryID: data.libraryID,
    model: data.model,
    filename: "index.vue",
    contents,
    format: options.format,
    actions,
    helpers
  });
};
const sliceCreate = async (data, context) => {
  rejectIfNecessary.rejectIfNecessary(await Promise.allSettled([
    fs.writeSliceModel({
      libraryID: data.libraryID,
      model: data.model,
      format: context.options.format,
      helpers: context.helpers
    }),
    createComponentFile({ data, ...context })
  ]));
  rejectIfNecessary.rejectIfNecessary(await Promise.allSettled([
    upsertSliceLibraryIndexFile.upsertSliceLibraryIndexFile({
      libraryID: data.libraryID,
      ...context
    }),
    fs.upsertGlobalTypeScriptTypes({
      filename: context.options.generatedTypesFilePath,
      format: context.options.format,
      helpers: context.helpers,
      actions: context.actions
    })
  ]));
};
exports.sliceCreate = sliceCreate;
//# sourceMappingURL=slice-create.cjs.map
