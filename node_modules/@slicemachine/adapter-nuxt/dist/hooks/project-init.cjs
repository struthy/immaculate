"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const path = require("node:path");
const fs = require("@slicemachine/plugin-kit/fs");
const commonTags = require("common-tags");
const magicast = require("magicast");
const rejectIfNecessary = require("../lib/rejectIfNecessary.cjs");
const checkIsTypeScriptProject = require("../lib/checkIsTypeScriptProject.cjs");
const checkHasSrcDirectory = require("../lib/checkHasSrcDirectory.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const path__namespace = /* @__PURE__ */ _interopNamespaceDefault(path);
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const NUXT_PRISMIC = "@nuxtjs/prismic";
const installDependencies = async ({ installDependencies: installDependencies2 }) => {
  try {
    await installDependencies2({
      dependencies: {
        [NUXT_PRISMIC]: "^3.0.0"
      },
      dev: true
    });
  } catch (error) {
    await installDependencies2({
      dependencies: {
        [NUXT_PRISMIC]: "rc"
      },
      dev: true
    });
  }
};
const configurePrismicModule = async ({ helpers }) => {
  let nuxtConfigFilename = "nuxt.config.js";
  if (!await fs.checkHasProjectFile({ filename: nuxtConfigFilename, helpers })) {
    nuxtConfigFilename = "nuxt.config.ts";
    if (!await fs.checkHasProjectFile({ filename: nuxtConfigFilename, helpers })) {
      return;
    }
  }
  const nuxtConfigPath = helpers.joinPathFromRoot(nuxtConfigFilename);
  const mod = await magicast.loadFile(nuxtConfigPath);
  const config = mod.exports.default.$type === "function-call" ? mod.exports.default.$args[0] : mod.exports.default;
  let hasInlinedConfiguration = false;
  const hasPrismicModuleRegistered = (config.modules || []).find((registration) => {
    if (typeof registration === "string") {
      return registration === NUXT_PRISMIC;
    } else if (Array.isArray(registration)) {
      hasInlinedConfiguration = !!registration[1];
      return registration[0] === NUXT_PRISMIC;
    }
    return false;
  });
  if (!hasPrismicModuleRegistered) {
    config.modules || (config.modules = []);
    config.modules.push(NUXT_PRISMIC);
  }
  if (!hasInlinedConfiguration) {
    mod.imports.$add({
      from: "./slicemachine.config.json",
      imported: "apiEndpoint"
    });
    mod.imports.$add({
      from: "./slicemachine.config.json",
      imported: "repositoryName"
    });
    config.prismic || (config.prismic = {});
    config.prismic.endpoint = magicast.builders.raw("apiEndpoint || repositoryName");
  }
  await magicast.writeFile(mod, nuxtConfigPath);
};
const createSliceSimulatorPage = async ({ helpers, options }) => {
  const isTypeScriptProject = await checkIsTypeScriptProject.checkIsTypeScriptProject({
    helpers,
    options
  });
  const srcPagesDirectoryExists = await fs.checkHasProjectFile({
    filename: "src/pages",
    helpers
  });
  const filename = path__namespace.join(srcPagesDirectoryExists ? "src/pages" : "pages", "slice-simulator.vue");
  if (await fs.checkHasProjectFile({ filename, helpers })) {
    return;
  }
  const scriptAttributes = ["setup"];
  if (isTypeScriptProject) {
    scriptAttributes.push('lang="ts"');
  }
  const contents = commonTags.stripIndent(_a || (_a = __template(['\n		<template>\n			<SliceSimulator #default="{ slices }">\n				<SliceZone :slices="slices" :components="components" />\n			</SliceSimulator>\n		</template>\n\n		<script ', '>\n		import { SliceSimulator } from "@slicemachine/adapter-nuxt/simulator";\n		import { components } from "~/slices";\n		<\/script>\n	'])), scriptAttributes.join(" "));
  await fs.writeProjectFile({
    filename,
    contents,
    format: options.format,
    helpers
  });
};
const moveOrDeleteAppVue = async ({ helpers, options }) => {
  const srcDirectoryExists = await fs.checkHasProjectFile({
    filename: "src",
    helpers
  });
  const filenameAppVue = path__namespace.join(srcDirectoryExists ? "src" : "", "app.vue");
  if (!await fs.checkHasProjectFile({ filename: filenameAppVue, helpers })) {
    return;
  }
  const filecontentAppVue = await fs.readProjectFile({
    filename: filenameAppVue,
    helpers,
    encoding: "utf-8"
  });
  if (!filecontentAppVue.includes("<NuxtWelcome")) {
    return;
  }
  const srcPagesDirectoryExists = await fs.checkHasProjectFile({
    filename: "src/pages",
    helpers
  });
  const filenameIndexVue = path__namespace.join(srcPagesDirectoryExists ? "src/pages" : "pages", "index.vue");
  if (!await fs.checkHasProjectFile({ filename: filenameIndexVue, helpers })) {
    await fs.writeProjectFile({
      filename: filenameIndexVue,
      contents: filecontentAppVue,
      format: options.format,
      helpers
    });
  }
  await fs.deleteProjectFile({
    filename: filenameAppVue,
    helpers
  });
};
const modifySliceMachineConfig = async ({ helpers, options, actions }) => {
  var _a2;
  const hasSrcDirectory = await checkHasSrcDirectory.checkHasSrcDirectory({ helpers });
  const project = await helpers.getProject();
  (_a2 = project.config).localSliceSimulatorURL || (_a2.localSliceSimulatorURL = "http://localhost:3000/slice-simulator");
  if (hasSrcDirectory && project.config.libraries && JSON.stringify(project.config.libraries) === JSON.stringify(["./slices"])) {
    const sliceLibrary = await actions.readSliceLibrary({
      libraryID: project.config.libraries[0]
    });
    if (sliceLibrary.sliceIDs.length < 1) {
      project.config.libraries = ["./src/slices"];
    }
  }
  await helpers.updateSliceMachineConfig(project.config, {
    format: options.format
  });
};
const projectInit = async ({ installDependencies: _installDependencies }, context) => {
  rejectIfNecessary.rejectIfNecessary(await Promise.allSettled([
    installDependencies({ installDependencies: _installDependencies }),
    configurePrismicModule(context),
    createSliceSimulatorPage(context),
    moveOrDeleteAppVue(context),
    modifySliceMachineConfig(context)
  ]));
};
exports.projectInit = projectInit;
//# sourceMappingURL=project-init.cjs.map
