import { defineComponent, ref, onMounted, onUnmounted, h } from "vue";
import { SimulatorManager, getDefaultProps, getDefaultSlices, getDefaultMessage, StateEventType, simulatorRootClass, onClickHandler, disableEventHandler, simulatorClass } from "@prismicio/simulator/kit";
const simulatorManager = new SimulatorManager();
const SliceSimulatorImpl = /* @__PURE__ */ defineComponent({
  name: "SliceSimulator",
  props: {
    zIndex: {
      type: Number,
      default: getDefaultProps().zIndex,
      required: false
    },
    background: {
      type: String,
      default: getDefaultProps().background,
      required: false
    }
  },
  setup(props, { slots }) {
    const slices = ref(getDefaultSlices());
    const message = ref(getDefaultMessage());
    onMounted(() => {
      simulatorManager.state.on(StateEventType.Slices, (_slices) => {
        slices.value = _slices;
      }, "simulator-slices");
      simulatorManager.state.on(StateEventType.Message, (_message) => {
        message.value = _message;
      }, "simulator-message");
      simulatorManager.init();
    });
    onUnmounted(() => {
      simulatorManager.state.off(StateEventType.Slices, "simulator-slices");
      simulatorManager.state.off(StateEventType.Message, "simulator-message");
    });
    return () => {
      const children = [];
      if (message.value) {
        children.push(h("article", {
          innerHTML: message.value
        }));
      } else if (slices.value.length && slots.default) {
        children.push(h("div", {
          id: "root",
          class: simulatorRootClass,
          onClickCapture: onClickHandler,
          onSubmitCapture: disableEventHandler
        }, [
          slots.default({
            slices: slices.value
          })
        ]));
      }
      return h("div", {
        class: simulatorClass,
        style: {
          zIndex: props.zIndex,
          position: "fixed",
          top: 0,
          left: 0,
          width: "100%",
          height: "100vh",
          overflow: "auto",
          background: props.background
        }
      }, children);
    };
  }
});
const SliceSimulator = SliceSimulatorImpl;
export {
  SliceSimulator,
  SliceSimulatorImpl
};
//# sourceMappingURL=SliceSimulator.js.map
