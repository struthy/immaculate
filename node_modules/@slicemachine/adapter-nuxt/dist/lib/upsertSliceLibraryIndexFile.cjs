"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const fs = require("@slicemachine/plugin-kit/fs");
const commonTags = require("common-tags");
const path = require("node:path");
const constants = require("../constants.cjs");
const getJSFileExtension = require("./getJSFileExtension.cjs");
const pascalCase = require("./pascalCase.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const path__namespace = /* @__PURE__ */ _interopNamespaceDefault(path);
const upsertSliceLibraryIndexFile = async (args) => {
  const slices = await args.actions.readAllSliceModelsForLibrary({
    libraryID: args.libraryID
  });
  let contents;
  if (args.options.lazyLoadSlices) {
    contents = commonTags.stripIndent`
			${constants.NON_EDITABLE_FILE_BANNER}

			import { defineAsyncComponent } from "vue";
			import { defineSliceZoneComponents } from "@prismicio/vue";

			export const components = defineSliceZoneComponents({
				${(await Promise.all(slices.map(async (slice) => {
      const id = slice.model.id;
      const dirName = path__namespace.basename(await fs.buildSliceDirectoryPath({
        model: slice.model,
        helpers: args.helpers,
        libraryID: args.libraryID
      }));
      return `${id}: defineAsyncComponent(() => import("./${dirName}/index.vue"))`;
    }))).join(",\n")}
			});
		`;
  } else {
    contents = commonTags.stripIndent`
			${constants.NON_EDITABLE_FILE_BANNER}

			import { defineSliceZoneComponents } from "@prismicio/vue";

			${(await Promise.all(slices.map(async (slice) => {
      const dirName = path__namespace.basename(await fs.buildSliceDirectoryPath({
        model: slice.model,
        helpers: args.helpers,
        libraryID: args.libraryID
      }));
      const componentName = pascalCase.pascalCase(slice.model.name);
      return `import ${componentName} from "./${dirName}/index.vue";`;
    }))).join("\n")}

			export const components = defineSliceZoneComponents({
				${slices.map((slice) => {
      const id = slice.model.id;
      const componentName = pascalCase.pascalCase(slice.model.name);
      return `${id}: ${componentName}`;
    }).join(",\n")}
			});
		`;
  }
  const extension = await getJSFileExtension.getJSFileExtension({
    helpers: args.helpers,
    options: args.options
  });
  const filePath = path__namespace.join(fs.buildSliceLibraryDirectoryPath({
    libraryID: args.libraryID,
    helpers: args.helpers
  }), `index.${extension}`);
  await fs.writeProjectFile({
    filename: filePath,
    contents,
    format: args.options.format,
    helpers: args.helpers
  });
};
exports.upsertSliceLibraryIndexFile = upsertSliceLibraryIndexFile;
//# sourceMappingURL=upsertSliceLibraryIndexFile.cjs.map
