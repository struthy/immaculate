"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const fs = require("node:fs/promises");
const path = require("node:path");
const index = require('./../_node_modules/semver/index.cjs');
const FRAMEWORKS = {
  previousNuxt: {
    name: "Nuxt 2 (legacy)",
    adapterName: "@slicemachine/adapter-nuxt2",
    adapterVersion: "latest",
    runProjectInitHook: true,
    compatibility: {
      nuxt: "^2.0.0",
      "nuxt-sm": "*"
    }
  },
  nuxt: {
    name: "Nuxt 2",
    adapterName: "@slicemachine/adapter-nuxt2",
    adapterVersion: "latest",
    runProjectInitHook: false,
    compatibility: {
      nuxt: "^2.0.0"
    }
  },
  previousNext: {
    name: "Next.js (legacy)",
    adapterName: "@slicemachine/adapter-next",
    adapterVersion: "latest",
    runProjectInitHook: true,
    compatibility: {
      next: ">=11.0.0",
      "prismic-reactjs": "*"
    }
  },
  next: {
    name: "Next.js",
    adapterName: "@slicemachine/adapter-next",
    adapterVersion: "latest",
    runProjectInitHook: false,
    compatibility: {
      next: ">=11.0.0"
    }
  }
};
const UNIVERSAL = {
  name: "universal (no framework)",
  adapterName: "@slicemachine/adapter-universal",
  adapterVersion: "latest",
  runProjectInitHook: false,
  compatibility: {}
};
const detectFramework = async (cwd) => {
  const path$1 = path.join(cwd, "package.json");
  let allDependencies;
  try {
    const pkg = JSON.parse(await fs.readFile(path$1, "utf-8"));
    allDependencies = {
      ...pkg.dependencies,
      ...pkg.devDependencies
    };
  } catch (error) {
    throw new Error(`Failed to read project's \`package.json\` at \`${path$1}\``, { cause: error });
  }
  return Object.values(FRAMEWORKS).find((framework) => {
    return Object.entries(framework.compatibility).every(([pkg, range]) => {
      if (pkg in allDependencies) {
        try {
          const minimumVersion = index.minVersion(allDependencies[pkg]);
          return index.satisfies(minimumVersion, range);
        } catch (error) {
          return true;
        }
      }
      return false;
    });
  }) || UNIVERSAL;
};
exports.FRAMEWORKS = FRAMEWORKS;
exports.UNIVERSAL = UNIVERSAL;
exports.detectFramework = detectFramework;
//# sourceMappingURL=detectFramework.cjs.map
