{"version":3,"file":"detectFramework.cjs","sources":["../../../src/legacyMigrations/detectFramework.ts"],"sourcesContent":["import { readFile } from \"node:fs/promises\";\nimport { join } from \"node:path\";\n\nimport semver from \"semver\";\n\nexport type Framework = {\n\t/**\n\t * Framework's human readable name.\n\t */\n\tname: string;\n\n\t/**\n\t * Package name of the adapter responsible for this framework.\n\t */\n\tadapterName: string;\n\n\t/**\n\t * Semver range of the adapter responsible for this framework.\n\t */\n\tadapterVersion: string;\n\n\t/**\n\t * Whether or not to run the project init hook to migrate legacy frameworks.\n\t */\n\trunProjectInitHook: boolean;\n\n\t/**\n\t * A package name/semver range map defining framework compatibility\n\t * requirements.\n\t *\n\t * Project should match all entries to be considered compatible.\n\t */\n\tcompatibility: Record<string, string>;\n};\n\n/**\n * Frameworks we support, orders shouldn't matter much but is respected (the\n * higher it is the more priority it has in case multiple matches)\n */\nexport const FRAMEWORKS: Record<string, Framework> = {\n\tpreviousNuxt: {\n\t\tname: \"Nuxt 2 (legacy)\",\n\t\tadapterName: \"@slicemachine/adapter-nuxt2\",\n\t\tadapterVersion: \"latest\",\n\t\trunProjectInitHook: true,\n\t\tcompatibility: {\n\t\t\tnuxt: \"^2.0.0\",\n\t\t\t\"nuxt-sm\": \"*\",\n\t\t},\n\t},\n\tnuxt: {\n\t\tname: \"Nuxt 2\",\n\t\tadapterName: \"@slicemachine/adapter-nuxt2\",\n\t\tadapterVersion: \"latest\",\n\t\trunProjectInitHook: false,\n\t\tcompatibility: {\n\t\t\tnuxt: \"^2.0.0\",\n\t\t},\n\t},\n\tpreviousNext: {\n\t\tname: \"Next.js (legacy)\",\n\t\tadapterName: \"@slicemachine/adapter-next\",\n\t\tadapterVersion: \"latest\",\n\t\trunProjectInitHook: true,\n\t\tcompatibility: {\n\t\t\tnext: \">=11.0.0\",\n\t\t\t\"prismic-reactjs\": \"*\",\n\t\t},\n\t},\n\tnext: {\n\t\tname: \"Next.js\",\n\t\tadapterName: \"@slicemachine/adapter-next\",\n\t\tadapterVersion: \"latest\",\n\t\trunProjectInitHook: false,\n\t\tcompatibility: {\n\t\t\tnext: \">=11.0.0\",\n\t\t},\n\t},\n} as const;\n\n/**\n * Universal package used when framework is not supported.\n */\nexport const UNIVERSAL: Framework = {\n\tname: \"universal (no framework)\",\n\tadapterName: \"@slicemachine/adapter-universal\",\n\tadapterVersion: \"latest\",\n\trunProjectInitHook: false,\n\tcompatibility: {},\n};\n\nexport const detectFramework = async (cwd: string): Promise<Framework> => {\n\tconst path = join(cwd, \"package.json\");\n\n\tlet allDependencies: Record<string, string>;\n\ttry {\n\t\tconst pkg = JSON.parse(await readFile(path, \"utf-8\"));\n\n\t\tallDependencies = {\n\t\t\t...pkg.dependencies,\n\t\t\t...pkg.devDependencies,\n\t\t};\n\t} catch (error) {\n\t\tthrow new Error(\n\t\t\t`Failed to read project's \\`package.json\\` at \\`${path}\\``,\n\t\t\t{ cause: error },\n\t\t);\n\t}\n\n\treturn (\n\t\tObject.values(FRAMEWORKS).find((framework) => {\n\t\t\treturn Object.entries(framework.compatibility).every(([pkg, range]) => {\n\t\t\t\tif (pkg in allDependencies) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Determine lowest version possibly in use\n\t\t\t\t\t\tconst minimumVersion = semver.minVersion(allDependencies[pkg]);\n\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\t\treturn semver.satisfies(minimumVersion!, range);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// We assume unconventional tags, `latest`, `beta`, `dev` matches the framework\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}) || UNIVERSAL\n\t);\n};\n"],"names":["path","join","readFile","semver"],"mappings":";;;;;AAuCO,MAAM,aAAwC;AAAA,EACpD,cAAc;AAAA,IACb,MAAM;AAAA,IACN,aAAa;AAAA,IACb,gBAAgB;AAAA,IAChB,oBAAoB;AAAA,IACpB,eAAe;AAAA,MACd,MAAM;AAAA,MACN,WAAW;AAAA,IACX;AAAA,EACD;AAAA,EACD,MAAM;AAAA,IACL,MAAM;AAAA,IACN,aAAa;AAAA,IACb,gBAAgB;AAAA,IAChB,oBAAoB;AAAA,IACpB,eAAe;AAAA,MACd,MAAM;AAAA,IACN;AAAA,EACD;AAAA,EACD,cAAc;AAAA,IACb,MAAM;AAAA,IACN,aAAa;AAAA,IACb,gBAAgB;AAAA,IAChB,oBAAoB;AAAA,IACpB,eAAe;AAAA,MACd,MAAM;AAAA,MACN,mBAAmB;AAAA,IACnB;AAAA,EACD;AAAA,EACD,MAAM;AAAA,IACL,MAAM;AAAA,IACN,aAAa;AAAA,IACb,gBAAgB;AAAA,IAChB,oBAAoB;AAAA,IACpB,eAAe;AAAA,MACd,MAAM;AAAA,IACN;AAAA,EACD;;AAMK,MAAM,YAAuB;AAAA,EACnC,MAAM;AAAA,EACN,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,oBAAoB;AAAA,EACpB,eAAe,CAAE;;AAGL,MAAA,kBAAkB,OAAO,QAAmC;AAClE,QAAAA,SAAOC,KAAAA,KAAK,KAAK,cAAc;AAEjC,MAAA;AACA,MAAA;AACH,UAAM,MAAM,KAAK,MAAM,MAAMC,GAAAA,SAASF,QAAM,OAAO,CAAC;AAElC,sBAAA;AAAA,MACjB,GAAG,IAAI;AAAA,MACP,GAAG,IAAI;AAAA,IAAA;AAAA,WAEA;AACR,UAAM,IAAI,MACT,kDAAkDA,YAClD,EAAE,OAAO,OAAO;AAAA,EAEjB;AAED,SACC,OAAO,OAAO,UAAU,EAAE,KAAK,CAAC,cAAa;AACrC,WAAA,OAAO,QAAQ,UAAU,aAAa,EAAE,MAAM,CAAC,CAAC,KAAK,KAAK,MAAK;AACrE,UAAI,OAAO,iBAAiB;AACvB,YAAA;AAEH,gBAAM,iBAAiBG,MAAO,WAAW,gBAAgB,GAAG,CAAC;AAGtD,iBAAAA,MAAO,UAAU,gBAAiB,KAAK;AAAA,iBACtC;AAED,iBAAA;AAAA,QACP;AAAA,MACD;AAEM,aAAA;AAAA,IAAA,CACP;AAAA,EACD,CAAA,KAAK;AAER;;;;"}