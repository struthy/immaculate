"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const path = require("node:path");
const fs = require("node:fs/promises");
const chalk = require("chalk");
const index = require('./../_node_modules/semver/index.cjs');
const locateFileUpward = require("../lib/locateFileUpward.cjs");
const detectFramework = require("./detectFramework.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const path__namespace = /* @__PURE__ */ _interopNamespaceDefault(path);
const fs__namespace = /* @__PURE__ */ _interopNamespaceDefault(fs);
const migrateSMJSON = async (manager) => {
  let smJSONPath;
  try {
    smJSONPath = await locateFileUpward.locateFileUpward("sm.json", { startDir: manager.cwd });
  } catch (error) {
  }
  if (!smJSONPath) {
    return;
  }
  const smJSON = JSON.parse(await fs__namespace.readFile(smJSONPath, "utf-8"));
  if ("//" in smJSON && !("libraries" in smJSON)) {
    return console.log(`
${chalk.bgYellow(` ${chalk.black("WARN")} `)} ${chalk.magenta("sm.json")} is deprecated!

  - If you were importing values from this file, please now import
    them from ${chalk.magenta("slicemachine.config.json")}.
    You can safely delete this file after to suppress this warning.

  - If you weren't, you can safely delete this file to suppress
    this warning.
`);
  }
  if (smJSON._latest && !index.satisfies(smJSON._latest, ">0.3.0")) {
    console.log(`
${chalk.bgYellow(` ${chalk.black("WARN")} `)} ${chalk.magenta("sm.json")} was last migrated before ${chalk.magenta("0.3.0")}, migration might be incomplete`);
  }
  console.log(`
${chalk.bgCyan(` ${chalk.black("INFO")} `)} Detected deprecated ${chalk.magenta("sm.json")}, beginning migration...`);
  let framework;
  if (smJSON.framework) {
    framework = detectFramework.FRAMEWORKS[smJSON.framework] || detectFramework.UNIVERSAL;
  } else {
    framework = await detectFramework.detectFramework(path__namespace.dirname(smJSONPath));
  }
  const libraries = smJSON.libraries.map((library) => {
    if (/^[@~]\//.test(library)) {
      return library.replace(/^[@~]\//, "./");
    }
    return library;
  }) || [];
  const sliceMachineConfig = {
    apiEndpoint: smJSON.apiEndpoint,
    // Infer repository name from API endpoint
    repositoryName: new URL(smJSON.apiEndpoint).host.split(".")[0],
    adapter: framework.adapterName,
    libraries
  };
  if (smJSON.localSliceSimulatorURL) {
    sliceMachineConfig.localSliceSimulatorURL = smJSON.localSliceSimulatorURL;
  }
  const sliceMachineConfigPath = await manager.project.suggestSliceMachineConfigPath();
  await manager.project.writeSliceMachineConfig({
    config: sliceMachineConfig,
    path: sliceMachineConfigPath
  });
  await fs__namespace.writeFile(smJSONPath, JSON.stringify({
    "//": "sm.json is deprecated, if you were importing values from this file please now import them from slicemachine.config.json, else you can safely delete this file",
    // We keep API endpoint in it because users might have been importing it from this file.
    apiEndpoint: smJSON.apiEndpoint
  }, void 0, "	"));
  try {
    const { execaProcess } = await manager.project.installDependencies({
      dependencies: {
        [framework.adapterName]: framework.adapterVersion
      },
      dev: true,
      log: () => {
      }
    });
    await execaProcess;
  } catch (error) {
    if (error instanceof Error && "shortMessage" in error && "stderr" in error) {
      throw new Error(`${error.shortMessage}

${error.stderr}`, {
        cause: error
      });
    }
    throw error;
  }
  if (framework.runProjectInitHook) {
    await manager.plugins.initPlugins();
    await manager.project.initProject({
      log: () => {
      }
    });
  }
  return console.log(`
${chalk.bgCyan(` ${chalk.black("INFO")} `)} Your ${chalk.magenta("sm.json")} content was automatically migrated to ${chalk.magenta("slicemachine.config.json")}

  - If you were importing values from this file, please now import
    them from ${chalk.magenta("slicemachine.config.json")}.
    You can safely delete this file after.

  - If you weren't, you can safely delete this file.
`);
};
exports.migrateSMJSON = migrateSMJSON;
//# sourceMappingURL=migrateSMJSON.cjs.map
