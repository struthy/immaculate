{"version":3,"file":"migrateAssets.js","sources":["../../../src/legacyMigrations/migrateAssets.ts"],"sourcesContent":["import * as t from \"io-ts\";\nimport * as path from \"node:path\";\nimport * as fsSync from \"node:fs\";\n\nimport { SliceMachineManager } from \"@slicemachine/manager\";\nimport {\n\tSharedSliceContent,\n\tDocument,\n} from \"@prismicio/types-internal/lib/content\";\n\nimport { DocumentMock, SharedSliceMock } from \"@prismicio/mocks\";\n\nimport * as sentryErrorHandlers from \"../lib/sentryErrorHandlers\";\n\nconst MOCKS_FILE_NAME = \"mocks.json\";\n\nconst SharedSliceContentArray = t.array(SharedSliceContent);\nconst DocumentArray = t.array(Document);\n\nconst createPathToDeprecatedLibrary = (cwd: string) =>\n\tpath.join(cwd, \".slicemachine\");\nconst createPathToCustomTypesAssets = (cwd: string) =>\n\tpath.join(createPathToDeprecatedLibrary(cwd), \"assets\", \"customtypes\");\n\nconst ensureOrGenerateSliceScreenshot = (\n\tvariationsIDs: string[],\n\ttargetPathToSliceFolder: string,\n\tdeprecatedPathToSliceAssets: string,\n) => {\n\tvariationsIDs.forEach((variationID) => {\n\t\tconst targetPathToVariationScreenshot = path.join(\n\t\t\ttargetPathToSliceFolder,\n\t\t\t`screenshot-${variationID}.png`,\n\t\t);\n\t\tif (!fsSync.existsSync(targetPathToVariationScreenshot)) {\n\t\t\tconst deprecatedPathToCustomVariation = path.join(\n\t\t\t\ttargetPathToSliceFolder,\n\t\t\t\tvariationID,\n\t\t\t);\n\t\t\tconst deprecatedPathToCustomVariationScreenshot = path.join(\n\t\t\t\tdeprecatedPathToCustomVariation,\n\t\t\t\t\"preview.png\",\n\t\t\t);\n\t\t\tif (fsSync.existsSync(deprecatedPathToCustomVariationScreenshot)) {\n\t\t\t\tfsSync.renameSync(\n\t\t\t\t\tdeprecatedPathToCustomVariationScreenshot,\n\t\t\t\t\ttargetPathToVariationScreenshot,\n\t\t\t\t);\n\t\t\t\ttry {\n\t\t\t\t\tif (\n\t\t\t\t\t\tfsSync.readdirSync(deprecatedPathToCustomVariation).length === 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tfsSync.rmSync(deprecatedPathToCustomVariation, { recursive: true });\n\t\t\t\t\t}\n\t\t\t\t} catch {}\n\t\t\t} else {\n\t\t\t\tconst deprecatedPathToVariationScreenshot = path.join(\n\t\t\t\t\tdeprecatedPathToSliceAssets,\n\t\t\t\t\tvariationID,\n\t\t\t\t\t\"preview.png\",\n\t\t\t\t);\n\t\t\t\tif (fsSync.existsSync(deprecatedPathToVariationScreenshot)) {\n\t\t\t\t\tfsSync.renameSync(\n\t\t\t\t\t\tdeprecatedPathToVariationScreenshot,\n\t\t\t\t\t\ttargetPathToVariationScreenshot,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n};\n\nconst ensureOrGenerateMockFile = (\n\ttargetPathToMocks: string,\n\tdeprecatedPathToMocks: string,\n\tvalidator: (str: string) => boolean,\n\tgenerate: () => Record<string, unknown>[],\n\tisTelemetryEnabled: boolean,\n) => {\n\ttry {\n\t\tconst rawMockContent = (() => {\n\t\t\tif (fsSync.existsSync(targetPathToMocks)) {\n\t\t\t\treturn fsSync.readFileSync(targetPathToMocks, \"utf-8\");\n\t\t\t}\n\t\t\tif (fsSync.existsSync(deprecatedPathToMocks)) {\n\t\t\t\treturn fsSync.readFileSync(deprecatedPathToMocks, \"utf-8\");\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})();\n\n\t\tconst regeneratedMocksString = JSON.stringify(generate(), null, 2);\n\t\tconst isValidMock = (() => {\n\t\t\ttry {\n\t\t\t\treturn rawMockContent !== null && validator(rawMockContent);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t})();\n\n\t\tif (!isValidMock) {\n\t\t\tfsSync.writeFileSync(targetPathToMocks, regeneratedMocksString);\n\t\t} else if (rawMockContent) {\n\t\t\tfsSync.writeFileSync(targetPathToMocks, rawMockContent);\n\t\t} else {\n\t\t\tfsSync.writeFileSync(targetPathToMocks, regeneratedMocksString);\n\t\t}\n\t} catch (error) {\n\t\tif (isTelemetryEnabled) {\n\t\t\tsentryErrorHandlers.node(\"migrateAssets.ensureOrGenerateMockFile\", error);\n\t\t}\n\t}\n};\n\n// TODO: MIGRATION - Move this to the Migration Manager\nexport const migrateAssets = async (\n\tmanager: SliceMachineManager,\n): Promise<void> => {\n\tconst isTelemetryEnabled = await manager.telemetry.checkIsTelemetryEnabled();\n\n\ttry {\n\t\t// Exit early if migration is already performed\n\t\tif (\n\t\t\t!fsSync.existsSync(\n\t\t\t\tpath.join(createPathToDeprecatedLibrary(manager.cwd), \"assets\"),\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst allSlices = await manager.slices.readAllSlices();\n\t\tconst sharedSlices = allSlices.models.reduce(\n\t\t\t(o, slice) => ({ ...o, [slice.model.id]: slice.model }),\n\t\t\t{},\n\t\t);\n\n\t\tallSlices.models.forEach((c) => {\n\t\t\tconst targetPathToSliceFolder = path.join(\n\t\t\t\tmanager.cwd,\n\t\t\t\tc.libraryID,\n\t\t\t\tc.model.name,\n\t\t\t);\n\t\t\tconst targetPathToMocks = path.join(\n\t\t\t\ttargetPathToSliceFolder,\n\t\t\t\tMOCKS_FILE_NAME,\n\t\t\t);\n\t\t\tconst deprecatedPathToSliceAssets = path.join(\n\t\t\t\tcreatePathToDeprecatedLibrary(manager.cwd),\n\t\t\t\t\"assets\",\n\t\t\t\tc.libraryID,\n\t\t\t\tc.model.name,\n\t\t\t);\n\t\t\tconst deprecatedPathToMocks = path.join(\n\t\t\t\tdeprecatedPathToSliceAssets,\n\t\t\t\tMOCKS_FILE_NAME,\n\t\t\t);\n\n\t\t\tconst reGeneratedMocks = c.model.variations.map((variation) => {\n\t\t\t\treturn SharedSliceMock.generate(c.model, {\n\t\t\t\t\tvariation: variation.id,\n\t\t\t\t\ttype: \"SharedSlice\",\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tensureOrGenerateMockFile(\n\t\t\t\ttargetPathToMocks,\n\t\t\t\tdeprecatedPathToMocks,\n\t\t\t\t(str: string) =>\n\t\t\t\t\tSharedSliceContentArray.decode(JSON.parse(str))._tag === \"Right\",\n\t\t\t\t() => reGeneratedMocks,\n\t\t\t\tisTelemetryEnabled,\n\t\t\t);\n\n\t\t\tconst variationsIDs = c.model.variations.map((v) => v.id);\n\t\t\tensureOrGenerateSliceScreenshot(\n\t\t\t\tvariationsIDs,\n\t\t\t\ttargetPathToSliceFolder,\n\t\t\t\tdeprecatedPathToSliceAssets,\n\t\t\t);\n\t\t});\n\n\t\tconst allCustomTypes = await manager.customTypes.readAllCustomTypes();\n\t\tallCustomTypes.models.forEach((c) => {\n\t\t\tconst targetPathToMocks = path.join(\n\t\t\t\tmanager.cwd,\n\t\t\t\t\"customtypes\",\n\t\t\t\tc.model.id,\n\t\t\t\tMOCKS_FILE_NAME,\n\t\t\t);\n\t\t\tconst deprecatedPathToMocks = path.join(\n\t\t\t\tcreatePathToCustomTypesAssets(manager.cwd),\n\t\t\t\tc.model.id,\n\t\t\t\tMOCKS_FILE_NAME,\n\t\t\t);\n\t\t\tensureOrGenerateMockFile(\n\t\t\t\ttargetPathToMocks,\n\t\t\t\tdeprecatedPathToMocks,\n\t\t\t\t(str: string) => DocumentArray.decode(JSON.parse(str))._tag === \"Right\",\n\t\t\t\t() => [DocumentMock.generate(c.model, sharedSlices)],\n\t\t\t\tisTelemetryEnabled,\n\t\t\t);\n\t\t});\n\t} catch (error) {\n\t\tif (isTelemetryEnabled) {\n\t\t\tsentryErrorHandlers.node(\"migrateAssets\", error);\n\t\t}\n\t} finally {\n\t\tconst dotSlicemachine = createPathToDeprecatedLibrary(manager.cwd);\n\t\tconst prismicioTypesDTS = path.join(manager.cwd, \"prismicio-types.d.ts\");\n\t\tif (!fsSync.existsSync(prismicioTypesDTS)) {\n\t\t\tconst sliceMachinePrismicioDTS = path.join(\n\t\t\t\tdotSlicemachine,\n\t\t\t\t\"prismicio.d.ts\",\n\t\t\t);\n\t\t\tconst prismicioDTS = path.join(manager.cwd, \"prismicio.d.ts\");\n\t\t\tif (fsSync.existsSync(sliceMachinePrismicioDTS)) {\n\t\t\t\tfsSync.renameSync(sliceMachinePrismicioDTS, prismicioTypesDTS);\n\t\t\t} else if (fsSync.existsSync(prismicioDTS)) {\n\t\t\t\tfsSync.renameSync(prismicioDTS, prismicioTypesDTS);\n\t\t\t}\n\t\t}\n\n\t\tif (fsSync.existsSync(dotSlicemachine)) {\n\t\t\tfsSync.rmSync(dotSlicemachine, { recursive: true });\n\t\t}\n\t}\n};\n"],"names":["sentryErrorHandlers.node"],"mappings":"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"}