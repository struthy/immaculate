{"version":3,"file":"cli.cjs","sources":["../../src/cli.ts"],"sourcesContent":["import mri from \"mri\";\n\nimport * as pkg from \"../package.json\";\n\ntype Args = {\n\topen: boolean;\n\tport: string;\n\thelp: boolean;\n\tversion: boolean;\n};\n\nconst args = mri<Args>(process.argv.slice(2), {\n\tboolean: [\"open\", \"help\", \"version\"],\n\tstring: [\"port\"],\n\talias: {\n\t\tport: \"p\",\n\t\thelp: \"h\",\n\t\tversion: \"v\",\n\t},\n\tdefault: {\n\t\topen: false,\n\t\thelp: false,\n\t\tversion: false,\n\t},\n});\n\nif (args.help) {\n\tconsole.info(\n\t\t`\nUsage:\n    start-slicemachine [options...]\n\nOptions:\n    --open         Open Slice Machine automatically\n    --port, -p     Specify the port on which to run Slice Machine\n    --help, -h     Show help text\n    --version, -v  Show version\n`.trim(),\n\t);\n\n\tprocess.exit();\n}\n\nif (args.version) {\n\tconsole.info(pkg.version);\n\n\tprocess.exit();\n}\n\nlet port: number | undefined;\nif (args.port) {\n\tconst parsedPort = Number.parseInt(args.port);\n\n\tif (Number.isNaN(parsedPort)) {\n\t\tconsole.info(`An invalid port number was provided: ${args.port}`);\n\t} else {\n\t\tport = parsedPort;\n\t}\n}\n\nimport(\"./StartSliceMachineProcess\").then(\n\t({ createStartSliceMachineProcess }) => {\n\t\tconst startSliceMachineProcess = createStartSliceMachineProcess({\n\t\t\topen: args.open,\n\t\t\tport,\n\t\t});\n\n\t\tstartSliceMachineProcess.run();\n\t},\n);\n"],"names":["pkg.version"],"mappings":";;;AAWA,MAAM,OAAO,IAAU,QAAQ,KAAK,MAAM,CAAC,GAAG;AAAA,EAC7C,SAAS,CAAC,QAAQ,QAAQ,SAAS;AAAA,EACnC,QAAQ,CAAC,MAAM;AAAA,EACf,OAAO;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,EACT;AAAA,EACD,SAAS;AAAA,IACR,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,EACT;AACD,CAAA;AAED,IAAI,KAAK,MAAM;AACd,UAAQ,KACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,KAAM,CAAA;AAGP,UAAQ,KAAI;AACZ;AAED,IAAI,KAAK,SAAS;AACT,UAAA,KAAKA,SAAAA,OAAW;AAExB,UAAQ,KAAI;AACZ;AAED,IAAI;AACJ,IAAI,KAAK,MAAM;AACd,QAAM,aAAa,OAAO,SAAS,KAAK,IAAI;AAExC,MAAA,OAAO,MAAM,UAAU,GAAG;AACrB,YAAA,KAAK,wCAAwC,KAAK,MAAM;AAAA,EAAA,OAC1D;AACC,WAAA;AAAA,EACP;AACD;AAED,QAAO,QAAA,EAAA,KAAA,MAAA,QAAA,gCAA4B,GAAE,KACpC,CAAC,EAAE,qCAAoC;AACtC,QAAM,2BAA2B,+BAA+B;AAAA,IAC/D,MAAM,KAAK;AAAA,IACX;AAAA,EAAA,CACA;AAED,2BAAyB,IAAG;AAC7B,CAAC;"}