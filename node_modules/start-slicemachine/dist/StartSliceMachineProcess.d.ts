export declare const createStartSliceMachineProcess: (args: StartSliceMachineProcessConstructorArgs) => StartSliceMachineProcess;
export type StartSliceMachineProcessConstructorArgs = {
    open: boolean;
    port?: number;
};
/**
 * Manages the process that runs Slice Machine's server.
 */
export declare class StartSliceMachineProcess {
    /**
     * Determines if Slice Machine should automatically be opened once the server
     * starts.
     *
     * @defaultValue `false`
     */
    open: boolean;
    /**
     * The port on which to start the Slice Machine server.
     *
     * @defaultValue `9999`
     */
    port: number;
    /**
     * The Slice Machine manager used for the process.
     */
    private _sliceMachineManager;
    constructor(args: StartSliceMachineProcessConstructorArgs);
    /**
     * Runs the process.
     */
    run(): Promise<void>;
    /**
     * Returns a string with Slice Machine info formatted for the console.
     *
     * @param value - Info to display.
     *
     * @returns String to pass to the console.
     */
    private _buildSliceMachineRunningLine;
    /**
     * Validates the project's config and content models.
     *
     * @throws Throws if a Library name is invalid.
     * @throws Throws if a Slice model is invalid.
     * @throws Throws if a Custom Type model is invalid.
     */
    private _validateProject;
    /**
     * Fetches the logged in Prismic user's profile. If the user is not logged in,
     * `undefined` is returned.
     *
     * @returns The logged in Prismic user's profile, or `undefined` if not logged
     *   in.
     */
    private _fetchProfile;
    /**
     * Tracks the start of Slice Machine.
     *
     * This method is called after Slice Machine has started and so it will not
     * cause the process to wait for the tracking to complete.
     */
    private _trackStart;
}
