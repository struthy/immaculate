import { s as semver } from "../classes/semver.js";
import { __require as requireRange } from "../classes/range.js";
import { g as gt_1 } from "../functions/gt.js";
const SemVer = semver;
const Range = requireRange();
const gt = gt_1;
const minVersion = (range, loose) => {
  range = new Range(range, loose);
  let minver = new SemVer("0.0.0");
  if (range.test(minver)) {
    return minver;
  }
  minver = new SemVer("0.0.0-0");
  if (range.test(minver)) {
    return minver;
  }
  minver = null;
  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i];
    let setMin = null;
    comparators.forEach((comparator) => {
      const compver = new SemVer(comparator.semver.version);
      switch (comparator.operator) {
        case ">":
          if (compver.prerelease.length === 0) {
            compver.patch++;
          } else {
            compver.prerelease.push(0);
          }
          compver.raw = compver.format();
        case "":
        case ">=":
          if (!setMin || gt(compver, setMin)) {
            setMin = compver;
          }
          break;
        case "<":
        case "<=":
          break;
        default:
          throw new Error(`Unexpected operation: ${comparator.operator}`);
      }
    });
    if (setMin && (!minver || gt(minver, setMin))) {
      minver = setMin;
    }
  }
  if (minver && range.test(minver)) {
    return minver;
  }
  return null;
};
var minVersion_1 = minVersion;
export {
  minVersion_1 as m
};
//# sourceMappingURL=min-version.js.map
