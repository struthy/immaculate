{"version":3,"file":"range.cjs","sources":["../../../../../../node_modules/semver/classes/range.js"],"sourcesContent":["// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    options = parseOptions(options)\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.format()\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First, split based on boolean or ||\n    this.raw = range\n    this.set = range\n      .split('||')\n      // map the range to a 2d array of comparators\n      .map(r => this.parseRange(r.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${range}`)\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0]\n      this.set = this.set.filter(c => !isNullSet(c[0]))\n      if (this.set.length === 0) {\n        this.set = [first]\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c]\n            break\n          }\n        }\n      }\n    }\n\n    this.format()\n  }\n\n  format () {\n    this.range = this.set\n      .map((comps) => {\n        return comps.join(' ').trim()\n      })\n      .join('||')\n      .trim()\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    range = range.trim()\n\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts = Object.keys(this.options).join(',')\n    const memoKey = `parseRange:${memoOpts}:${range}`\n    const cached = cache.get(memoKey)\n    if (cached) {\n      return cached\n    }\n\n    const loose = this.options.loose\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range)\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n\n    // normalize spaces\n    range = range.split(/\\s+/).join(' ')\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    let rangeList = range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options))\n\n    if (loose) {\n      // in loose mode, throw out any that are not valid comparators\n      rangeList = rangeList.filter(comp => {\n        debug('loose invalid filter', comp, this.options)\n        return !!comp.match(re[t.COMPARATORLOOSE])\n      })\n    }\n    debug('range list', rangeList)\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const rangeMap = new Map()\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options))\n    for (const comp of comparators) {\n      if (isNullSet(comp)) {\n        return [comp]\n      }\n      rangeMap.set(comp.value, comp)\n    }\n    if (rangeMap.size > 1 && rangeMap.has('')) {\n      rangeMap.delete('')\n    }\n\n    const result = [...rangeMap.values()]\n    cache.set(memoKey, result)\n    return result\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\nmodule.exports = Range\n\nconst LRU = require('lru-cache')\nconst cache = new LRU({ max: 1000 })\n\nconst parseOptions = require('../internal/parse-options')\nconst Comparator = require('./comparator')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst {\n  re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace,\n} = require('../internal/re')\n\nconst isNullSet = c => c.value === '<0.0.0-0'\nconst isAny = c => c.value === ''\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\nconst replaceTildes = (comp, options) =>\n  comp.trim().split(/\\s+/).map((c) => {\n    return replaceTilde(c, options)\n  }).join(' ')\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\nconst replaceCarets = (comp, options) =>\n  comp.trim().split(/\\s+/).map((c) => {\n    return replaceCaret(c, options)\n  }).join(' ')\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map((c) => {\n    return replaceXRange(c, options)\n  }).join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<') {\n        pr = '-0'\n      }\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp.trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return (`${from} ${to}`).trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n"],"names":["range","parseOptions","re","debug","require$$0","require$$1","require$$2","require$$3","require$$4","require$$5"],"mappings":"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","x_google_ignoreList":[0]}