import { c as constants } from "../internal/constants.js";
import { r as reExports } from "../internal/re.js";
import { s as semver } from "../classes/semver.js";
import { p as parseOptions_1 } from "../internal/parse-options.js";
const { MAX_LENGTH } = constants;
const { re, t } = reExports;
const SemVer = semver;
const parseOptions = parseOptions_1;
const parse = (version, options) => {
  options = parseOptions(options);
  if (version instanceof SemVer) {
    return version;
  }
  if (typeof version !== "string") {
    return null;
  }
  if (version.length > MAX_LENGTH) {
    return null;
  }
  const r = options.loose ? re[t.LOOSE] : re[t.FULL];
  if (!r.test(version)) {
    return null;
  }
  try {
    return new SemVer(version, options);
  } catch (er) {
    return null;
  }
};
var parse_1 = parse;
export {
  parse_1 as p
};
//# sourceMappingURL=parse.js.map
