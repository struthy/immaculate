import { __require as requirePonyfill_es2018 } from "../web-streams-polyfill/dist/ponyfill.es2018.js";
const POOL_SIZE = 65536;
if (!globalThis.ReadableStream) {
  try {
    const process = require("node:process");
    const { emitWarning } = process;
    try {
      process.emitWarning = () => {
      };
      Object.assign(globalThis, require("node:stream/web"));
      process.emitWarning = emitWarning;
    } catch (error) {
      process.emitWarning = emitWarning;
      throw error;
    }
  } catch (error) {
    Object.assign(globalThis, requirePonyfill_es2018());
  }
}
try {
  const { Blob } = require("buffer");
  if (Blob && !Blob.prototype.stream) {
    Blob.prototype.stream = function name(params) {
      let position = 0;
      const blob = this;
      return new ReadableStream({
        type: "bytes",
        async pull(ctrl) {
          const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE));
          const buffer = await chunk.arrayBuffer();
          position += buffer.byteLength;
          ctrl.enqueue(new Uint8Array(buffer));
          if (position === blob.size) {
            ctrl.close();
          }
        }
      });
    };
  }
} catch (error) {
}
//# sourceMappingURL=streams.js.map
