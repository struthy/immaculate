import { DEBUG_BUILD } from "./debug-build.js";
import { getCurrentScope } from "./exports.js";
import { getCurrentHub } from "./hub.js";
import { logger, consoleSandbox } from "../../utils/esm/logger.js";
function initAndBind(clientClass, options) {
  if (options.debug === true) {
    if (DEBUG_BUILD) {
      logger.enable();
    } else {
      consoleSandbox(() => {
        console.warn("[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.");
      });
    }
  }
  const scope = getCurrentScope();
  scope.update(options.initialScope);
  const client = new clientClass(options);
  setCurrentClient(client);
  initializeClient(client);
}
function setCurrentClient(client) {
  const hub = getCurrentHub();
  const top = hub.getStackTop();
  top.client = client;
  top.scope.setClient(client);
}
function initializeClient(client) {
  if (client.init) {
    client.init();
  } else if (client.setupIntegrations) {
    client.setupIntegrations();
  }
}
export {
  initAndBind,
  setCurrentClient
};
//# sourceMappingURL=sdk.js.map
