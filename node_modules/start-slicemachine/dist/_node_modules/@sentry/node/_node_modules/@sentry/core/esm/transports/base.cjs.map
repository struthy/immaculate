{"version":3,"file":"base.cjs","sources":["../../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/core/esm/transports/base.js"],"sourcesContent":["import { makePromiseBuffer, forEachEnvelopeItem, envelopeItemTypeToDataCategory, isRateLimited, resolvedSyncPromise, createEnvelope, SentryError, logger, serializeEnvelope, updateRateLimits } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\n\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nfunction createTransport(\n  options,\n  makeRequest,\n  buffer = makePromiseBuffer(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n) {\n  let rateLimits = {};\n  const flush = (timeout) => buffer.drain(timeout);\n\n  function send(envelope) {\n    const filteredEnvelopeItems = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const dataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, dataCategory)) {\n        const event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent('ratelimit_backoff', dataCategory, event);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredEnvelope = createEnvelope(envelope[0], filteredEnvelopeItems );\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason) => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        const event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type), event);\n      });\n    };\n\n    const requestTask = () =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope, options.textEncoder) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            DEBUG_BUILD && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error instanceof SentryError) {\n          DEBUG_BUILD && logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise();\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  // We use this to identifify if the transport is the base transport\n  // TODO (v8): Remove this again as we'll no longer need it\n  send.__sentry__baseTransport__ = true;\n\n  return {\n    send,\n    flush,\n  };\n}\n\nfunction getEventForEnvelopeItem(item, type) {\n  if (type !== 'event' && type !== 'transaction') {\n    return undefined;\n  }\n\n  return Array.isArray(item) ? (item )[1] : undefined;\n}\n\nexport { DEFAULT_TRANSPORT_BUFFER_SIZE, createTransport };\n//# sourceMappingURL=base.js.map\n"],"names":["makePromiseBuffer","envelope","forEachEnvelopeItem","envelopeItemTypeToDataCategory","isRateLimited","resolvedSyncPromise","createEnvelope","serializeEnvelope","DEBUG_BUILD","logger","updateRateLimits","error","SentryError"],"mappings":";;;;;;;;;AAGK,MAAC,gCAAgC;AAQtC,SAAS,gBACP,SACA,aACA,SAASA,cAAiB;AAAA,EACxB,QAAQ,cAAc;AACvB,GACD;AACA,MAAI,aAAa,CAAA;AACjB,QAAM,QAAQ,CAAC,YAAY,OAAO,MAAM,OAAO;AAE/C,WAAS,KAAKC,YAAU;AACtB,UAAM,wBAAwB,CAAA;AAG9BC,aAAAA,oBAAoBD,YAAU,CAAC,MAAM,SAAS;AAC5C,YAAM,eAAeE,wCAA+B,IAAI;AACxD,UAAIC,UAAa,cAAC,YAAY,YAAY,GAAG;AAC3C,cAAM,QAAQ,wBAAwB,MAAM,IAAI;AAChD,gBAAQ,mBAAmB,qBAAqB,cAAc,KAAK;AAAA,MAC3E,OAAa;AACL,8BAAsB,KAAK,IAAI;AAAA,MAChC;AAAA,IACP,CAAK;AAGD,QAAI,sBAAsB,WAAW,GAAG;AACtC,aAAOC,YAAmB,oBAAA;AAAA,IAC3B;AAGD,UAAM,mBAAmBC,SAAAA,eAAeL,WAAS,CAAC,GAAG,qBAAqB;AAG1E,UAAM,qBAAqB,CAAC,WAAW;AACrCC,eAAAA,oBAAoB,kBAAkB,CAAC,MAAM,SAAS;AACpD,cAAM,QAAQ,wBAAwB,MAAM,IAAI;AAChD,gBAAQ,mBAAmB,QAAQC,SAA8B,+BAAC,IAAI,GAAG,KAAK;AAAA,MACtF,CAAO;AAAA,IACP;AAEI,UAAM,cAAc,MAClB,YAAY,EAAE,MAAMI,2BAAkB,kBAAkB,QAAQ,WAAW,EAAG,CAAA,EAAE;AAAA,MAC9E,cAAY;AAEV,YAAI,SAAS,eAAe,WAAc,SAAS,aAAa,OAAO,SAAS,cAAc,MAAM;AAClGC,oCAAeC,OAAAA,OAAO,KAAK,qCAAqC,SAAS,2BAA2B;AAAA,QACrG;AAED,qBAAaC,UAAgB,iBAAC,YAAY,QAAQ;AAClD,eAAO;AAAA,MACR;AAAA,MACD,CAAAC,WAAS;AACP,2BAAmB,eAAe;AAClC,cAAMA;AAAA,MACP;AAAA,IACT;AAEI,WAAO,OAAO,IAAI,WAAW,EAAE;AAAA,MAC7B,YAAU;AAAA,MACVA,aAAS;AACP,YAAIA,mBAAiBC,MAAAA,aAAa;AAChCJ,qBAAAA,eAAeC,OAAM,OAAC,MAAM,+CAA+C;AAC3E,6BAAmB,gBAAgB;AACnC,iBAAOJ,YAAmB,oBAAA;AAAA,QACpC,OAAe;AACL,gBAAMM;AAAAA,QACP;AAAA,MACF;AAAA,IACP;AAAA,EACG;AAID,OAAK,4BAA4B;AAEjC,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACJ;AACA;AAEA,SAAS,wBAAwB,MAAM,MAAM;AAC3C,MAAI,SAAS,WAAW,SAAS,eAAe;AAC9C,WAAO;AAAA,EACR;AAED,SAAO,MAAM,QAAQ,IAAI,IAAK,KAAO,CAAC,IAAI;AAC5C;;;","x_google_ignoreList":[0]}