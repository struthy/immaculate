{"version":3,"file":"sampling.cjs","sources":["../../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/core/esm/tracing/sampling.js"],"sourcesContent":["import { isNaN, logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE } from '../semanticAttributes.js';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled.js';\nimport { spanToJSON } from '../utils/spanUtils.js';\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * This method muttes the given `transaction` and will set the `sampled` value on it.\n * It returns the same transaction, for convenience.\n */\nfunction sampleTransaction(\n  transaction,\n  options,\n  samplingContext,\n) {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  // eslint-disable-next-line deprecation/deprecation\n  if (transaction.sampled !== undefined) {\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, Number(transaction.sampled));\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, Number(sampleRate));\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, Number(sampleRate));\n  } else {\n    // When `enableTracing === true`, we use a sample rate of 100%\n    sampleRate = 1;\n    transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, sampleRate);\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    DEBUG_BUILD && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  // eslint-disable-next-line deprecation/deprecation\n  transaction.sampled = Math.random() < (sampleRate );\n\n  // if we're not going to keep it, we're done\n  // eslint-disable-next-line deprecation/deprecation\n  if (!transaction.sampled) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return transaction;\n  }\n\n  DEBUG_BUILD &&\n    // eslint-disable-next-line deprecation/deprecation\n    logger.log(`[Tracing] starting ${transaction.op} transaction - ${spanToJSON(transaction).description}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate) {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    DEBUG_BUILD &&\n      logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\nexport { isValidSampleRate, sampleTransaction };\n//# sourceMappingURL=sampling.js.map\n"],"names":["hasTracingEnabled","SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE","DEBUG_BUILD","logger","spanToJSON","isNaN"],"mappings":";;;;;;;;AAeA,SAAS,kBACP,aACA,SACA,iBACA;AAEA,MAAI,CAACA,kBAAAA,kBAAkB,OAAO,GAAG;AAE/B,gBAAY,UAAU;AACtB,WAAO;AAAA,EACR;AAID,MAAI,YAAY,YAAY,QAAW;AAErC,gBAAY,aAAaC,mBAAqC,uCAAE,OAAO,YAAY,OAAO,CAAC;AAC3F,WAAO;AAAA,EACR;AAID,MAAI;AACJ,MAAI,OAAO,QAAQ,kBAAkB,YAAY;AAC/C,iBAAa,QAAQ,cAAc,eAAe;AAClD,gBAAY,aAAaA,mBAAAA,uCAAuC,OAAO,UAAU,CAAC;AAAA,EACtF,WAAa,gBAAgB,kBAAkB,QAAW;AACtD,iBAAa,gBAAgB;AAAA,EAC9B,WAAU,OAAO,QAAQ,qBAAqB,aAAa;AAC1D,iBAAa,QAAQ;AACrB,gBAAY,aAAaA,mBAAAA,uCAAuC,OAAO,UAAU,CAAC;AAAA,EACtF,OAAS;AAEL,iBAAa;AACb,gBAAY,aAAaA,0DAAuC,UAAU;AAAA,EAC3E;AAID,MAAI,CAAC,kBAAkB,UAAU,GAAG;AAClCC,eAAAA,eAAeC,OAAM,OAAC,KAAK,kEAAkE;AAE7F,gBAAY,UAAU;AACtB,WAAO;AAAA,EACR;AAGD,MAAI,CAAC,YAAY;AACfD,eAAW,eACTC,OAAAA,OAAO;AAAA,MACL,4CACE,OAAO,QAAQ,kBAAkB,aAC7B,sCACA;AAAA,IAEd;AAEI,gBAAY,UAAU;AACtB,WAAO;AAAA,EACR;AAKD,cAAY,UAAU,KAAK,OAAQ,IAAI;AAIvC,MAAI,CAAC,YAAY,SAAS;AACxBD,eAAW,eACTC,OAAAA,OAAO;AAAA,MACL,oGAAoG;AAAA,QAClG;AAAA,MACD;AAAA,IACT;AACI,WAAO;AAAA,EACR;AAEDD,aAAW;AAAA,EAETC,OAAAA,OAAO,IAAI,sBAAsB,YAAY,oBAAoBC,UAAAA,WAAW,WAAW,EAAE,aAAa;AACxG,SAAO;AACT;AAKA,SAAS,kBAAkB,MAAM;AAG/B,MAAIC,GAAK,MAAC,IAAI,KAAK,EAAE,OAAO,SAAS,YAAY,OAAO,SAAS,YAAY;AAC3EH,eAAW,eACTC,OAAAA,OAAO;AAAA,MACL,0GAA0G,KAAK;AAAA,QAC7G;AAAA,MACV,aAAqB,KAAK,UAAU,OAAO,IAAI;AAAA,IAC/C;AACI,WAAO;AAAA,EACR;AAGD,MAAI,OAAO,KAAK,OAAO,GAAG;AACxBD,eAAW,eACTC,OAAM,OAAC,KAAK,oFAAoF,OAAO;AACzG,WAAO;AAAA,EACR;AACD,SAAO;AACT;;;","x_google_ignoreList":[0]}