"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const constants = require("./constants.cjs");
const hub = require("./hub.cjs");
const session = require("./session.cjs");
const prepareEvent = require("./utils/prepareEvent.cjs");
const worldwide = require("../../utils/esm/worldwide.cjs");
function captureException(exception, hint) {
  return hub.getCurrentHub().captureException(exception, prepareEvent.parseEventHintOrCaptureContext(hint));
}
function addBreadcrumb(breadcrumb, hint) {
  hub.getCurrentHub().addBreadcrumb(breadcrumb, hint);
}
function setContext(name, context) {
  hub.getCurrentHub().setContext(name, context);
}
function setTag(key, value) {
  hub.getCurrentHub().setTag(key, value);
}
function setUser(user) {
  hub.getCurrentHub().setUser(user);
}
function withScope(...rest) {
  const hub$1 = hub.getCurrentHub();
  if (rest.length === 2) {
    const [scope, callback] = rest;
    if (!scope) {
      return hub$1.withScope(callback);
    }
    return hub$1.withScope(() => {
      hub$1.getStackTop().scope = scope;
      return callback(scope);
    });
  }
  return hub$1.withScope(rest[0]);
}
function getClient() {
  return hub.getCurrentHub().getClient();
}
function getCurrentScope() {
  return hub.getCurrentHub().getScope();
}
function startSession(context) {
  const client = getClient();
  const isolationScope = hub.getIsolationScope();
  const currentScope = getCurrentScope();
  const { release, environment = constants.DEFAULT_ENVIRONMENT } = client && client.getOptions() || {};
  const { userAgent } = worldwide.GLOBAL_OBJ.navigator || {};
  const session$1 = session.makeSession({
    release,
    environment,
    user: currentScope.getUser() || isolationScope.getUser(),
    ...userAgent && { userAgent },
    ...context
  });
  const currentSession = isolationScope.getSession();
  if (currentSession && currentSession.status === "ok") {
    session.updateSession(currentSession, { status: "exited" });
  }
  endSession();
  isolationScope.setSession(session$1);
  currentScope.setSession(session$1);
  return session$1;
}
function endSession() {
  const isolationScope = hub.getIsolationScope();
  const currentScope = getCurrentScope();
  const session$1 = currentScope.getSession() || isolationScope.getSession();
  if (session$1) {
    session.closeSession(session$1);
  }
  _sendSessionUpdate();
  isolationScope.setSession();
  currentScope.setSession();
}
function _sendSessionUpdate() {
  const isolationScope = hub.getIsolationScope();
  const currentScope = getCurrentScope();
  const client = getClient();
  const session2 = currentScope.getSession() || isolationScope.getSession();
  if (session2 && client && client.captureSession) {
    client.captureSession(session2);
  }
}
exports.addBreadcrumb = addBreadcrumb;
exports.captureException = captureException;
exports.endSession = endSession;
exports.getClient = getClient;
exports.getCurrentScope = getCurrentScope;
exports.setContext = setContext;
exports.setTag = setTag;
exports.setUser = setUser;
exports.startSession = startSession;
exports.withScope = withScope;
//# sourceMappingURL=exports.cjs.map
