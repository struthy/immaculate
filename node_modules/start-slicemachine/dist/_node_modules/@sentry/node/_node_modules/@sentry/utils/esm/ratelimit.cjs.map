{"version":3,"file":"ratelimit.cjs","sources":["../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/utils/esm/ratelimit.js"],"sourcesContent":["// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\n\nconst DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nfunction parseRetryAfterHeader(header, now = Date.now()) {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nfunction disabledUntil(limits, dataCategory) {\n  return limits[dataCategory] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nfunction isRateLimited(limits, dataCategory, now = Date.now()) {\n  return disabledUntil(limits, dataCategory) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nfunction updateRateLimits(\n  limits,\n  { statusCode, headers },\n  now = Date.now(),\n) {\n  const updatedRateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories, , , namespaces] = limit.split(':', 5);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          if (category === 'metric_bucket') {\n            // namespaces will be present when category === 'metric_bucket'\n            if (!namespaces || namespaces.split(';').includes('custom')) {\n              updatedRateLimits[category] = now + delay;\n            }\n          } else {\n            updatedRateLimits[category] = now + delay;\n          }\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n\nexport { DEFAULT_RETRY_AFTER, disabledUntil, isRateLimited, parseRetryAfterHeader, updateRateLimits };\n//# sourceMappingURL=ratelimit.js.map\n"],"names":[],"mappings":";;AAEK,MAAC,sBAAsB,KAAK;AAQjC,SAAS,sBAAsB,QAAQ,MAAM,KAAK,IAAG,GAAI;AACvD,QAAM,cAAc,SAAS,GAAG,UAAU,EAAE;AAC5C,MAAI,CAAC,MAAM,WAAW,GAAG;AACvB,WAAO,cAAc;AAAA,EACtB;AAED,QAAM,aAAa,KAAK,MAAM,GAAG,QAAQ;AACzC,MAAI,CAAC,MAAM,UAAU,GAAG;AACtB,WAAO,aAAa;AAAA,EACrB;AAED,SAAO;AACT;AASA,SAAS,cAAc,QAAQ,cAAc;AAC3C,SAAO,OAAO,YAAY,KAAK,OAAO,OAAO;AAC/C;AAKA,SAAS,cAAc,QAAQ,cAAc,MAAM,KAAK,IAAG,GAAI;AAC7D,SAAO,cAAc,QAAQ,YAAY,IAAI;AAC/C;AAOA,SAAS,iBACP,QACA,EAAE,YAAY,QAAS,GACvB,MAAM,KAAK,IAAK,GAChB;AACA,QAAM,oBAAoB;AAAA,IACxB,GAAG;AAAA,EACP;AAIE,QAAM,kBAAkB,WAAW,QAAQ,sBAAsB;AACjE,QAAM,mBAAmB,WAAW,QAAQ,aAAa;AAEzD,MAAI,iBAAiB;AAenB,eAAW,SAAS,gBAAgB,KAAI,EAAG,MAAM,GAAG,GAAG;AACrD,YAAM,CAAC,YAAY,gBAAgB,UAAU,IAAI,MAAM,MAAM,KAAK,CAAC;AACnE,YAAM,cAAc,SAAS,YAAY,EAAE;AAC3C,YAAM,SAAS,CAAC,MAAM,WAAW,IAAI,cAAc,MAAM;AACzD,UAAI,CAAC,YAAY;AACf,0BAAkB,MAAM,MAAM;AAAA,MACtC,OAAa;AACL,mBAAW,YAAY,WAAW,MAAM,GAAG,GAAG;AAC5C,cAAI,aAAa,iBAAiB;AAEhC,gBAAI,CAAC,cAAc,WAAW,MAAM,GAAG,EAAE,SAAS,QAAQ,GAAG;AAC3D,gCAAkB,QAAQ,IAAI,MAAM;AAAA,YACrC;AAAA,UACb,OAAiB;AACL,8BAAkB,QAAQ,IAAI,MAAM;AAAA,UACrC;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF,WAAU,kBAAkB;AAC3B,sBAAkB,MAAM,MAAM,sBAAsB,kBAAkB,GAAG;AAAA,EAC7E,WAAa,eAAe,KAAK;AAC7B,sBAAkB,MAAM,MAAM,KAAK;AAAA,EACpC;AAED,SAAO;AACT;;;;;;","x_google_ignoreList":[0]}