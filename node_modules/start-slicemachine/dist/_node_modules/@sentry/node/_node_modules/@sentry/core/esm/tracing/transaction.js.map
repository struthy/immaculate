{"version":3,"file":"transaction.js","sources":["../../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/core/esm/tracing/transaction.js"],"sourcesContent":["import { dropUndefinedKeys, logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { getCurrentHub } from '../hub.js';\nimport { getMetricSummaryJsonForSpan } from '../metrics/metric-summary.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE } from '../semanticAttributes.js';\nimport { spanTimeInputToSeconds, spanToJSON, spanToTraceContext } from '../utils/spanUtils.js';\nimport { getDynamicSamplingContextFromSpan } from './dynamicSamplingContext.js';\nimport { Span, SpanRecorder } from './span.js';\nimport { getCapturedScopesOnSpan } from './trace.js';\n\n/** JSDoc */\nclass Transaction extends Span  {\n  /**\n   * The reference to the current hub.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n\n  // DO NOT yet remove this property, it is used in a hack for v7 backwards compatibility.\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   *\n   * @deprecated Transactions will be removed in v8. Use spans instead.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n   constructor(transactionContext, hub) {\n    super(transactionContext);\n    this._contexts = {};\n\n    // eslint-disable-next-line deprecation/deprecation\n    this._hub = hub || getCurrentHub();\n\n    this._name = transactionContext.name || '';\n\n    this._metadata = {\n      // eslint-disable-next-line deprecation/deprecation\n      ...transactionContext.metadata,\n    };\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    // TODO (v8): Replace this with another way to set the root span\n    // eslint-disable-next-line deprecation/deprecation\n    this.transaction = this;\n\n    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n    const incomingDynamicSamplingContext = this._metadata.dynamicSamplingContext;\n    if (incomingDynamicSamplingContext) {\n      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n      this._frozenDynamicSamplingContext = { ...incomingDynamicSamplingContext };\n    }\n  }\n\n  // This sadly conflicts with the getter/setter ordering :(\n  /* eslint-disable @typescript-eslint/member-ordering */\n\n  /**\n   * Getter for `name` property.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n   get name() {\n    return this._name;\n  }\n\n  /**\n   * Setter for `name` property, which also sets `source` as custom.\n   * @deprecated Use `updateName()` and `setMetadata()` instead.\n   */\n   set name(newName) {\n    // eslint-disable-next-line deprecation/deprecation\n    this.setName(newName);\n  }\n\n  /**\n   * Get the metadata for this transaction.\n   * @deprecated Use `spanGetMetadata(transaction)` instead.\n   */\n   get metadata() {\n    // We merge attributes in for backwards compatibility\n    return {\n      // Defaults\n      // eslint-disable-next-line deprecation/deprecation\n      source: 'custom',\n      spanMetadata: {},\n\n      // Legacy metadata\n      ...this._metadata,\n\n      // From attributes\n      ...(this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] && {\n        source: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ,\n      }),\n      ...(this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] && {\n        sampleRate: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ,\n      }),\n    };\n  }\n\n  /**\n   * Update the metadata for this transaction.\n   * @deprecated Use `spanGetMetadata(transaction)` instead.\n   */\n   set metadata(metadata) {\n    this._metadata = metadata;\n  }\n\n  /* eslint-enable @typescript-eslint/member-ordering */\n\n  /**\n   * Setter for `name` property, which also sets `source` on the metadata.\n   *\n   * @deprecated Use `.updateName()` and `.setAttribute()` instead.\n   */\n   setName(name, source = 'custom') {\n    this._name = name;\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, source);\n  }\n\n  /** @inheritdoc */\n   updateName(name) {\n    this._name = name;\n    return this;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n   initSpanRecorder(maxlen = 1000) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.spanRecorder) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Set the context of a transaction event.\n   * @deprecated Use either `.setAttribute()`, or set the context on the scope before creating the transaction.\n   */\n   setContext(key, context) {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use top-level `setMeasurement()` instead.\n   */\n   setMeasurement(name, value, unit = '') {\n    this._measurements[name] = { value, unit };\n  }\n\n  /**\n   * Store metadata on this transaction.\n   * @deprecated Use attributes or store data on the scope instead.\n   */\n   setMetadata(newMetadata) {\n    this._metadata = { ...this._metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n   end(endTimestamp) {\n    const timestampInS = spanTimeInputToSeconds(endTimestamp);\n    const transaction = this._finishTransaction(timestampInS);\n    if (!transaction) {\n      return undefined;\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   toContext() {\n    // eslint-disable-next-line deprecation/deprecation\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this._name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n   updateWithContext(transactionContext) {\n    // eslint-disable-next-line deprecation/deprecation\n    super.updateWithContext(transactionContext);\n\n    this._name = transactionContext.name || '';\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @experimental\n   *\n   * @deprecated Use top-level `getDynamicSamplingContextFromSpan` instead.\n   */\n   getDynamicSamplingContext() {\n    return getDynamicSamplingContextFromSpan(this);\n  }\n\n  /**\n   * Override the current hub with a new one.\n   * Used if you want another hub to finish the transaction.\n   *\n   * @internal\n   */\n  // eslint-disable-next-line deprecation/deprecation\n   setHub(hub) {\n    this._hub = hub;\n  }\n\n  /**\n   * Get the profile id of the transaction.\n   */\n   getProfileId() {\n    if (this._contexts !== undefined && this._contexts['profile'] !== undefined) {\n      return this._contexts['profile'].profile_id ;\n    }\n    return undefined;\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n   _finishTransaction(endTimestamp) {\n    // This transaction is already finished, so we should not flush it again.\n    if (this._endTime !== undefined) {\n      return undefined;\n    }\n\n    if (!this._name) {\n      DEBUG_BUILD && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.end(endTimestamp);\n\n    // eslint-disable-next-line deprecation/deprecation\n    const client = this._hub.getClient();\n    if (client && client.emit) {\n      client.emit('finishTransaction', this);\n    }\n\n    if (this._sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      DEBUG_BUILD && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n\n      return undefined;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const finishedSpans = this.spanRecorder\n      ? // eslint-disable-next-line deprecation/deprecation\n        this.spanRecorder.spans.filter(span => span !== this && spanToJSON(span).timestamp)\n      : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      const endTimes = finishedSpans.map(span => spanToJSON(span).timestamp).filter(Boolean) ;\n      this._endTime = endTimes.reduce((prev, current) => {\n        return prev > current ? prev : current;\n      });\n    }\n\n    const { scope: capturedSpanScope, isolationScope: capturedSpanIsolationScope } = getCapturedScopesOnSpan(this);\n\n    // eslint-disable-next-line deprecation/deprecation\n    const { metadata } = this;\n    // eslint-disable-next-line deprecation/deprecation\n    const { source } = metadata;\n\n    const transaction = {\n      contexts: {\n        ...this._contexts,\n        // We don't want to override trace context\n        trace: spanToTraceContext(this),\n      },\n      // TODO: Pass spans serialized via `spanToJSON()` here instead in v8.\n      spans: finishedSpans,\n      start_timestamp: this._startTime,\n      // eslint-disable-next-line deprecation/deprecation\n      tags: this.tags,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        ...metadata,\n        capturedSpanScope,\n        capturedSpanIsolationScope,\n        ...dropUndefinedKeys({\n          dynamicSamplingContext: getDynamicSamplingContextFromSpan(this),\n        }),\n      },\n      _metrics_summary: getMetricSummaryJsonForSpan(this),\n      ...(source && {\n        transaction_info: {\n          source,\n        },\n      }),\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      DEBUG_BUILD &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction',\n          JSON.stringify(this._measurements, undefined, 2),\n        );\n      transaction.measurements = this._measurements;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    DEBUG_BUILD && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this._name}.`);\n\n    return transaction;\n  }\n}\n\nexport { Transaction };\n//# sourceMappingURL=transaction.js.map\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}