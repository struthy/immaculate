{"version":3,"file":"globalUnhandledRejection.cjs","sources":["../../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/utils/esm/instrument/globalUnhandledRejection.js"],"sourcesContent":["import { GLOBAL_OBJ } from '../worldwide.js';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers.js';\n\nlet _oldOnUnhandledRejectionHandler = null;\n\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addGlobalUnhandledRejectionInstrumentationHandler(\n  handler,\n) {\n  const type = 'unhandledrejection';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentUnhandledRejection);\n}\n\nfunction instrumentUnhandledRejection() {\n  _oldOnUnhandledRejectionHandler = GLOBAL_OBJ.onunhandledrejection;\n\n  GLOBAL_OBJ.onunhandledrejection = function (e) {\n    const handlerData = e;\n    triggerHandlers('unhandledrejection', handlerData);\n\n    if (_oldOnUnhandledRejectionHandler && !_oldOnUnhandledRejectionHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n\n  GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n\nexport { addGlobalUnhandledRejectionInstrumentationHandler };\n//# sourceMappingURL=globalUnhandledRejection.js.map\n"],"names":["addHandler","maybeInstrument","GLOBAL_OBJ","triggerHandlers"],"mappings":";;;;AAGA,IAAI,kCAAkC;AAQtC,SAAS,kDACP,SACA;AACA,QAAM,OAAO;AACbA,uBAAW,MAAM,OAAO;AACxBC,4BAAgB,MAAM,4BAA4B;AACpD;AAEA,SAAS,+BAA+B;AACtC,oCAAkCC,UAAU,WAAC;AAE7CA,uBAAW,uBAAuB,SAAU,GAAG;AAC7C,UAAM,cAAc;AACpBC,8BAAgB,sBAAsB,WAAW;AAEjD,QAAI,mCAAmC,CAAC,gCAAgC,mBAAmB;AAEzF,aAAO,gCAAgC,MAAM,MAAM,SAAS;AAAA,IAC7D;AAED,WAAO;AAAA,EACX;AAEED,uBAAW,qBAAqB,0BAA0B;AAC5D;;","x_google_ignoreList":[0]}