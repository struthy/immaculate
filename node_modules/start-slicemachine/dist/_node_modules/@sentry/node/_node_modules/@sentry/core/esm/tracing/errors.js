import { DEBUG_BUILD } from "../debug-build.js";
import { getActiveTransaction } from "./utils.js";
import { addGlobalErrorInstrumentationHandler } from "../../../utils/esm/instrument/globalError.js";
import { addGlobalUnhandledRejectionInstrumentationHandler } from "../../../utils/esm/instrument/globalUnhandledRejection.js";
import { logger } from "../../../utils/esm/logger.js";
let errorsInstrumented = false;
function registerErrorInstrumentation() {
  if (errorsInstrumented) {
    return;
  }
  errorsInstrumented = true;
  addGlobalErrorInstrumentationHandler(errorCallback);
  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);
}
function errorCallback() {
  const activeTransaction = getActiveTransaction();
  if (activeTransaction) {
    const status = "internal_error";
    DEBUG_BUILD && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);
    activeTransaction.setStatus(status);
  }
}
errorCallback.tag = "sentry_tracingErrorCallback";
export {
  registerErrorInstrumentation
};
//# sourceMappingURL=errors.js.map
