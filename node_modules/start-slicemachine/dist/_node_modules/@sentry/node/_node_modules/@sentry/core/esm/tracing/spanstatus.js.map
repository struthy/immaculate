{"version":3,"file":"spanstatus.js","sources":["../../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/core/esm/tracing/spanstatus.js"],"sourcesContent":["/** The status of an Span.\n *\n * @deprecated Use string literals - if you require type casting, cast to SpanStatusType type\n */\nvar SpanStatus; (function (SpanStatus) {\n  /** The operation completed successfully. */\n  const Ok = 'ok'; SpanStatus[\"Ok\"] = Ok;\n  /** Deadline expired before operation could complete. */\n  const DeadlineExceeded = 'deadline_exceeded'; SpanStatus[\"DeadlineExceeded\"] = DeadlineExceeded;\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  const Unauthenticated = 'unauthenticated'; SpanStatus[\"Unauthenticated\"] = Unauthenticated;\n  /** 403 Forbidden */\n  const PermissionDenied = 'permission_denied'; SpanStatus[\"PermissionDenied\"] = PermissionDenied;\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  const NotFound = 'not_found'; SpanStatus[\"NotFound\"] = NotFound;\n  /** 429 Too Many Requests */\n  const ResourceExhausted = 'resource_exhausted'; SpanStatus[\"ResourceExhausted\"] = ResourceExhausted;\n  /** Client specified an invalid argument. 4xx. */\n  const InvalidArgument = 'invalid_argument'; SpanStatus[\"InvalidArgument\"] = InvalidArgument;\n  /** 501 Not Implemented */\n  const Unimplemented = 'unimplemented'; SpanStatus[\"Unimplemented\"] = Unimplemented;\n  /** 503 Service Unavailable */\n  const Unavailable = 'unavailable'; SpanStatus[\"Unavailable\"] = Unavailable;\n  /** Other/generic 5xx. */\n  const InternalError = 'internal_error'; SpanStatus[\"InternalError\"] = InternalError;\n  /** Unknown. Any non-standard HTTP status code. */\n  const UnknownError = 'unknown_error'; SpanStatus[\"UnknownError\"] = UnknownError;\n  /** The operation was cancelled (typically by the user). */\n  const Cancelled = 'cancelled'; SpanStatus[\"Cancelled\"] = Cancelled;\n  /** Already exists (409) */\n  const AlreadyExists = 'already_exists'; SpanStatus[\"AlreadyExists\"] = AlreadyExists;\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  const FailedPrecondition = 'failed_precondition'; SpanStatus[\"FailedPrecondition\"] = FailedPrecondition;\n  /** The operation was aborted, typically due to a concurrency issue. */\n  const Aborted = 'aborted'; SpanStatus[\"Aborted\"] = Aborted;\n  /** Operation was attempted past the valid range. */\n  const OutOfRange = 'out_of_range'; SpanStatus[\"OutOfRange\"] = OutOfRange;\n  /** Unrecoverable data loss or corruption */\n  const DataLoss = 'data_loss'; SpanStatus[\"DataLoss\"] = DataLoss;\n})(SpanStatus || (SpanStatus = {}));\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nfunction getSpanStatusFromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @deprecated Use {@link spanStatusFromHttpCode} instead.\n * This export will be removed in v8 as the signature contains a typo.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nconst spanStatusfromHttpCode = getSpanStatusFromHttpCode;\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nfunction setHttpStatus(span, httpStatus) {\n  // TODO (v8): Remove these calls\n  // Relay does not require us to send the status code as a tag\n  // For now, just because users might expect it to land as a tag we keep sending it.\n  // Same with data.\n  // In v8, we replace both, simply with\n  // span.setAttribute('http.response.status_code', httpStatus);\n\n  // eslint-disable-next-line deprecation/deprecation\n  span.setTag('http.status_code', String(httpStatus));\n  // eslint-disable-next-line deprecation/deprecation\n  span.setData('http.response.status_code', httpStatus);\n\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\n\nexport { SpanStatus, getSpanStatusFromHttpCode, setHttpStatus, spanStatusfromHttpCode };\n//# sourceMappingURL=spanstatus.js.map\n"],"names":["SpanStatus"],"mappings":"AAIG,IAAC;AAAA,CAAa,SAAUA,aAAY;AAErC,QAAM,KAAK;AAAM,EAAAA,YAAW,IAAI,IAAI;AAEpC,QAAM,mBAAmB;AAAqB,EAAAA,YAAW,kBAAkB,IAAI;AAE/E,QAAM,kBAAkB;AAAmB,EAAAA,YAAW,iBAAiB,IAAI;AAE3E,QAAM,mBAAmB;AAAqB,EAAAA,YAAW,kBAAkB,IAAI;AAE/E,QAAM,WAAW;AAAa,EAAAA,YAAW,UAAU,IAAI;AAEvD,QAAM,oBAAoB;AAAsB,EAAAA,YAAW,mBAAmB,IAAI;AAElF,QAAM,kBAAkB;AAAoB,EAAAA,YAAW,iBAAiB,IAAI;AAE5E,QAAM,gBAAgB;AAAiB,EAAAA,YAAW,eAAe,IAAI;AAErE,QAAM,cAAc;AAAe,EAAAA,YAAW,aAAa,IAAI;AAE/D,QAAM,gBAAgB;AAAkB,EAAAA,YAAW,eAAe,IAAI;AAEtE,QAAM,eAAe;AAAiB,EAAAA,YAAW,cAAc,IAAI;AAEnE,QAAM,YAAY;AAAa,EAAAA,YAAW,WAAW,IAAI;AAEzD,QAAM,gBAAgB;AAAkB,EAAAA,YAAW,eAAe,IAAI;AAEtE,QAAM,qBAAqB;AAAuB,EAAAA,YAAW,oBAAoB,IAAI;AAErF,QAAM,UAAU;AAAW,EAAAA,YAAW,SAAS,IAAI;AAEnD,QAAM,aAAa;AAAgB,EAAAA,YAAW,YAAY,IAAI;AAE9D,QAAM,WAAW;AAAa,EAAAA,YAAW,UAAU,IAAI;AACzD,GAAG,eAAe,aAAa,CAAE,EAAC;AAQlC,SAAS,0BAA0B,YAAY;AAC7C,MAAI,aAAa,OAAO,cAAc,KAAK;AACzC,WAAO;AAAA,EACR;AAED,MAAI,cAAc,OAAO,aAAa,KAAK;AACzC,YAAQ,YAAU;AAAA,MAChB,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT;AACE,eAAO;AAAA,IACV;AAAA,EACF;AAED,MAAI,cAAc,OAAO,aAAa,KAAK;AACzC,YAAQ,YAAU;AAAA,MAChB,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT;AACE,eAAO;AAAA,IACV;AAAA,EACF;AAED,SAAO;AACT;AAiBA,SAAS,cAAc,MAAM,YAAY;AASvC,OAAK,OAAO,oBAAoB,OAAO,UAAU,CAAC;AAElD,OAAK,QAAQ,6BAA6B,UAAU;AAEpD,QAAM,aAAa,0BAA0B,UAAU;AACvD,MAAI,eAAe,iBAAiB;AAClC,SAAK,UAAU,UAAU;AAAA,EAC1B;AACH;","x_google_ignoreList":[0]}