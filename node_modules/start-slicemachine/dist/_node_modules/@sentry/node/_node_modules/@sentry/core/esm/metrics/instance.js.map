{"version":3,"file":"instance.js","sources":["../../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/core/esm/metrics/instance.js"],"sourcesContent":["import { COUNTER_METRIC_TYPE, GAUGE_METRIC_TYPE, DISTRIBUTION_METRIC_TYPE, SET_METRIC_TYPE } from './constants.js';\nimport { simpleHash } from './utils.js';\n\n/**\n * A metric instance representing a counter.\n */\nclass CounterMetric  {\n   constructor( _value) {this._value = _value;}\n\n  /** @inheritDoc */\n   get weight() {\n    return 1;\n  }\n\n  /** @inheritdoc */\n   add(value) {\n    this._value += value;\n  }\n\n  /** @inheritdoc */\n   toString() {\n    return `${this._value}`;\n  }\n}\n\n/**\n * A metric instance representing a gauge.\n */\nclass GaugeMetric  {\n\n   constructor(value) {\n    this._last = value;\n    this._min = value;\n    this._max = value;\n    this._sum = value;\n    this._count = 1;\n  }\n\n  /** @inheritDoc */\n   get weight() {\n    return 5;\n  }\n\n  /** @inheritdoc */\n   add(value) {\n    this._last = value;\n    if (value < this._min) {\n      this._min = value;\n    }\n    if (value > this._max) {\n      this._max = value;\n    }\n    this._sum += value;\n    this._count++;\n  }\n\n  /** @inheritdoc */\n   toString() {\n    return `${this._last}:${this._min}:${this._max}:${this._sum}:${this._count}`;\n  }\n}\n\n/**\n * A metric instance representing a distribution.\n */\nclass DistributionMetric  {\n\n   constructor(first) {\n    this._value = [first];\n  }\n\n  /** @inheritDoc */\n   get weight() {\n    return this._value.length;\n  }\n\n  /** @inheritdoc */\n   add(value) {\n    this._value.push(value);\n  }\n\n  /** @inheritdoc */\n   toString() {\n    return this._value.join(':');\n  }\n}\n\n/**\n * A metric instance representing a set.\n */\nclass SetMetric  {\n\n   constructor( first) {this.first = first;\n    this._value = new Set([first]);\n  }\n\n  /** @inheritDoc */\n   get weight() {\n    return this._value.size;\n  }\n\n  /** @inheritdoc */\n   add(value) {\n    this._value.add(value);\n  }\n\n  /** @inheritdoc */\n   toString() {\n    return Array.from(this._value)\n      .map(val => (typeof val === 'string' ? simpleHash(val) : val))\n      .join(':');\n  }\n}\n\nconst METRIC_MAP = {\n  [COUNTER_METRIC_TYPE]: CounterMetric,\n  [GAUGE_METRIC_TYPE]: GaugeMetric,\n  [DISTRIBUTION_METRIC_TYPE]: DistributionMetric,\n  [SET_METRIC_TYPE]: SetMetric,\n};\n\nexport { CounterMetric, DistributionMetric, GaugeMetric, METRIC_MAP, SetMetric };\n//# sourceMappingURL=instance.js.map\n"],"names":[],"mappings":";;AAMA,MAAM,cAAe;AAAA,EAClB,YAAa,QAAQ;AAAC,SAAK,SAAS;AAAA,EAAO;AAAA;AAAA,EAG3C,IAAI,SAAS;AACZ,WAAO;AAAA,EACR;AAAA;AAAA,EAGA,IAAI,OAAO;AACV,SAAK,UAAU;AAAA,EAChB;AAAA;AAAA,EAGA,WAAW;AACV,WAAO,GAAG,KAAK;AAAA,EAChB;AACH;AAKA,MAAM,YAAa;AAAA,EAEhB,YAAY,OAAO;AAClB,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,SAAS;AAAA,EACf;AAAA;AAAA,EAGA,IAAI,SAAS;AACZ,WAAO;AAAA,EACR;AAAA;AAAA,EAGA,IAAI,OAAO;AACV,SAAK,QAAQ;AACb,QAAI,QAAQ,KAAK,MAAM;AACrB,WAAK,OAAO;AAAA,IACb;AACD,QAAI,QAAQ,KAAK,MAAM;AACrB,WAAK,OAAO;AAAA,IACb;AACD,SAAK,QAAQ;AACb,SAAK;AAAA,EACN;AAAA;AAAA,EAGA,WAAW;AACV,WAAO,GAAG,KAAK,SAAS,KAAK,QAAQ,KAAK,QAAQ,KAAK,QAAQ,KAAK;AAAA,EACrE;AACH;AAKA,MAAM,mBAAoB;AAAA,EAEvB,YAAY,OAAO;AAClB,SAAK,SAAS,CAAC,KAAK;AAAA,EACrB;AAAA;AAAA,EAGA,IAAI,SAAS;AACZ,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA;AAAA,EAGA,IAAI,OAAO;AACV,SAAK,OAAO,KAAK,KAAK;AAAA,EACvB;AAAA;AAAA,EAGA,WAAW;AACV,WAAO,KAAK,OAAO,KAAK,GAAG;AAAA,EAC5B;AACH;AAKA,MAAM,UAAW;AAAA,EAEd,YAAa,OAAO;AAAC,SAAK,QAAQ;AACjC,SAAK,SAAS,oBAAI,IAAI,CAAC,KAAK,CAAC;AAAA,EAC9B;AAAA;AAAA,EAGA,IAAI,SAAS;AACZ,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA;AAAA,EAGA,IAAI,OAAO;AACV,SAAK,OAAO,IAAI,KAAK;AAAA,EACtB;AAAA;AAAA,EAGA,WAAW;AACV,WAAO,MAAM,KAAK,KAAK,MAAM,EAC1B,IAAI,SAAQ,OAAO,QAAQ,WAAW,WAAW,GAAG,IAAI,GAAI,EAC5D,KAAK,GAAG;AAAA,EACZ;AACH;AAEK,MAAC,aAAa;AAAA,EACjB,CAAC,mBAAmB,GAAG;AAAA,EACvB,CAAC,iBAAiB,GAAG;AAAA,EACrB,CAAC,wBAAwB,GAAG;AAAA,EAC5B,CAAC,eAAe,GAAG;AACrB;","x_google_ignoreList":[0]}