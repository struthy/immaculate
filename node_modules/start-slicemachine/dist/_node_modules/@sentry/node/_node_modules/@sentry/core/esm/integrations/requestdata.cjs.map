{"version":3,"file":"requestdata.cjs","sources":["../../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/core/esm/integrations/requestdata.js"],"sourcesContent":["import { extractPathForTransaction, addRequestDataToEvent } from '@sentry/utils';\nimport { convertIntegrationFnToClass, defineIntegration } from '../integration.js';\nimport { spanToJSON } from '../utils/spanUtils.js';\n\nconst DEFAULT_OPTIONS = {\n  include: {\n    cookies: true,\n    data: true,\n    headers: true,\n    ip: false,\n    query_string: true,\n    url: true,\n    user: {\n      id: true,\n      username: true,\n      email: true,\n    },\n  },\n  transactionNamingScheme: 'methodPath',\n};\n\nconst INTEGRATION_NAME = 'RequestData';\n\nconst _requestDataIntegration = ((options = {}) => {\n  const _addRequestData = addRequestDataToEvent;\n  const _options = {\n    ...DEFAULT_OPTIONS,\n    ...options,\n    include: {\n      // @ts-expect-error It's mad because `method` isn't a known `include` key. (It's only here and not set by default in\n      // `addRequestDataToEvent` for legacy reasons. TODO (v8): Change that.)\n      method: true,\n      ...DEFAULT_OPTIONS.include,\n      ...options.include,\n      user:\n        options.include && typeof options.include.user === 'boolean'\n          ? options.include.user\n          : {\n              ...DEFAULT_OPTIONS.include.user,\n              // Unclear why TS still thinks `options.include.user` could be a boolean at this point\n              ...((options.include || {}).user ),\n            },\n    },\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event, _hint, client) {\n      // Note: In the long run, most of the logic here should probably move into the request data utility functions. For\n      // the moment it lives here, though, until https://github.com/getsentry/sentry-javascript/issues/5718 is addressed.\n      // (TL;DR: Those functions touch many parts of the repo in many different ways, and need to be clened up. Once\n      // that's happened, it will be easier to add this logic in without worrying about unexpected side effects.)\n      const { transactionNamingScheme } = _options;\n\n      const { sdkProcessingMetadata = {} } = event;\n      const req = sdkProcessingMetadata.request;\n\n      if (!req) {\n        return event;\n      }\n\n      // The Express request handler takes a similar `include` option to that which can be passed to this integration.\n      // If passed there, we store it in `sdkProcessingMetadata`. TODO(v8): Force express and GCP people to use this\n      // integration, so that all of this passing and conversion isn't necessary\n      const addRequestDataOptions =\n        sdkProcessingMetadata.requestDataOptionsFromExpressHandler ||\n        sdkProcessingMetadata.requestDataOptionsFromGCPWrapper ||\n        convertReqDataIntegrationOptsToAddReqDataOpts(_options);\n\n      const processedEvent = _addRequestData(event, req, addRequestDataOptions);\n\n      // Transaction events already have the right `transaction` value\n      if (event.type === 'transaction' || transactionNamingScheme === 'handler') {\n        return processedEvent;\n      }\n\n      // In all other cases, use the request's associated transaction (if any) to overwrite the event's `transaction`\n      // value with a high-quality one\n      const reqWithTransaction = req ;\n      const transaction = reqWithTransaction._sentryTransaction;\n      if (transaction) {\n        const name = spanToJSON(transaction).description || '';\n\n        // TODO (v8): Remove the nextjs check and just base it on `transactionNamingScheme` for all SDKs. (We have to\n        // keep it the way it is for the moment, because changing the names of transactions in Sentry has the potential\n        // to break things like alert rules.)\n        const shouldIncludeMethodInTransactionName =\n          getSDKName(client) === 'sentry.javascript.nextjs'\n            ? name.startsWith('/api')\n            : transactionNamingScheme !== 'path';\n\n        const [transactionValue] = extractPathForTransaction(req, {\n          path: true,\n          method: shouldIncludeMethodInTransactionName,\n          customRoute: name,\n        });\n\n        processedEvent.transaction = transactionValue;\n      }\n\n      return processedEvent;\n    },\n  };\n}) ;\n\nconst requestDataIntegration = defineIntegration(_requestDataIntegration);\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/integrations`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n * @deprecated Use `requestDataIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst RequestData = convertIntegrationFnToClass(INTEGRATION_NAME, requestDataIntegration)\n\n;\n\n/** Convert this integration's options to match what `addRequestDataToEvent` expects */\n/** TODO: Can possibly be deleted once https://github.com/getsentry/sentry-javascript/issues/5718 is fixed */\nfunction convertReqDataIntegrationOptsToAddReqDataOpts(\n  integrationOptions,\n) {\n  const {\n    transactionNamingScheme,\n    include: { ip, user, ...requestOptions },\n  } = integrationOptions;\n\n  const requestIncludeKeys = [];\n  for (const [key, value] of Object.entries(requestOptions)) {\n    if (value) {\n      requestIncludeKeys.push(key);\n    }\n  }\n\n  let addReqDataUserOpt;\n  if (user === undefined) {\n    addReqDataUserOpt = true;\n  } else if (typeof user === 'boolean') {\n    addReqDataUserOpt = user;\n  } else {\n    const userIncludeKeys = [];\n    for (const [key, value] of Object.entries(user)) {\n      if (value) {\n        userIncludeKeys.push(key);\n      }\n    }\n    addReqDataUserOpt = userIncludeKeys;\n  }\n\n  return {\n    include: {\n      ip,\n      user: addReqDataUserOpt,\n      request: requestIncludeKeys.length !== 0 ? requestIncludeKeys : undefined,\n      transaction: transactionNamingScheme,\n    },\n  };\n}\n\nfunction getSDKName(client) {\n  try {\n    // For a long chain like this, it's fewer bytes to combine a try-catch with assuming everything is there than to\n    // write out a long chain of `a && a.b && a.b.c && ...`\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return client.getOptions()._metadata.sdk.name;\n  } catch (err) {\n    // In theory we should never get here\n    return undefined;\n  }\n}\n\nexport { RequestData, requestDataIntegration };\n//# sourceMappingURL=requestdata.js.map\n"],"names":["addRequestDataToEvent","spanToJSON","extractPathForTransaction","defineIntegration","convertIntegrationFnToClass"],"mappings":"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","x_google_ignoreList":[0]}