import { getClient } from "../exports.js";
import { defineIntegration, convertIntegrationFnToClass } from "../integration.js";
import { getOriginalFunction } from "../../../utils/esm/object.js";
let originalFunctionToString;
const INTEGRATION_NAME = "FunctionToString";
const SETUP_CLIENTS = /* @__PURE__ */ new WeakMap();
const _functionToStringIntegration = () => {
  return {
    name: INTEGRATION_NAME,
    setupOnce() {
      originalFunctionToString = Function.prototype.toString;
      try {
        Function.prototype.toString = function(...args) {
          const originalFunction = getOriginalFunction(this);
          const context = SETUP_CLIENTS.has(getClient()) && originalFunction !== void 0 ? originalFunction : this;
          return originalFunctionToString.apply(context, args);
        };
      } catch (e) {
      }
    },
    setup(client) {
      SETUP_CLIENTS.set(client, true);
    }
  };
};
const functionToStringIntegration = defineIntegration(_functionToStringIntegration);
convertIntegrationFnToClass(
  INTEGRATION_NAME,
  functionToStringIntegration
);
export {
  functionToStringIntegration
};
//# sourceMappingURL=functiontostring.js.map
