{"version":3,"file":"eventbuilder.cjs","sources":["../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/utils/esm/eventbuilder.js"],"sourcesContent":["import { isError, isPlainObject, isParameterizedString } from './is.js';\nimport { addExceptionTypeValue, addExceptionMechanism } from './misc.js';\nimport { normalizeToSize } from './normalize.js';\nimport { extractExceptionKeysForMessage } from './object.js';\n\n/**\n * Extracts stack frames from the error.stack string\n */\nfunction parseStackFrames(stackParser, error) {\n  return stackParser(error.stack || '', 1);\n}\n\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */\nfunction exceptionFromError(stackParser, error) {\n  const exception = {\n    type: error.name || error.constructor.name,\n    value: error.message,\n  };\n\n  const frames = parseStackFrames(stackParser, error);\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  return exception;\n}\n\nfunction getMessageForObject(exception) {\n  if ('name' in exception && typeof exception.name === 'string') {\n    let message = `'${exception.name}' captured as exception`;\n\n    if ('message' in exception && typeof exception.message === 'string') {\n      message += ` with message '${exception.message}'`;\n    }\n\n    return message;\n  } else if ('message' in exception && typeof exception.message === 'string') {\n    return exception.message;\n  } else {\n    // This will allow us to group events based on top-level keys\n    // which is much better than creating new group when any key/value change\n    return `Object captured as exception with keys: ${extractExceptionKeysForMessage(\n      exception ,\n    )}`;\n  }\n}\n\n/**\n * Builds and Event from a Exception\n *\n * TODO(v8): Remove getHub fallback\n * @hidden\n */\nfunction eventFromUnknownInput(\n  // eslint-disable-next-line deprecation/deprecation\n  getHubOrClient,\n  stackParser,\n  exception,\n  hint,\n) {\n  const client =\n    typeof getHubOrClient === 'function'\n      ? // eslint-disable-next-line deprecation/deprecation\n        getHubOrClient().getClient()\n      : getHubOrClient;\n\n  let ex = exception;\n  const providedMechanism =\n    hint && hint.data && (hint.data ).mechanism;\n  const mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic',\n  };\n\n  let extras;\n\n  if (!isError(exception)) {\n    if (isPlainObject(exception)) {\n      const normalizeDepth = client && client.getOptions().normalizeDepth;\n      extras = { ['__serialized__']: normalizeToSize(exception , normalizeDepth) };\n\n      const message = getMessageForObject(exception);\n      ex = (hint && hint.syntheticException) || new Error(message);\n      (ex ).message = message;\n    } else {\n      // This handles when someone does: `throw \"something awesome\";`\n      // We use synthesized Error here so we can extract a (rough) stack trace.\n      ex = (hint && hint.syntheticException) || new Error(exception );\n      (ex ).message = exception ;\n    }\n    mechanism.synthetic = true;\n  }\n\n  const event = {\n    exception: {\n      values: [exceptionFromError(stackParser, ex )],\n    },\n  };\n\n  if (extras) {\n    event.extra = extras;\n  }\n\n  addExceptionTypeValue(event, undefined, undefined);\n  addExceptionMechanism(event, mechanism);\n\n  return {\n    ...event,\n    event_id: hint && hint.event_id,\n  };\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nfunction eventFromMessage(\n  stackParser,\n  message,\n  // eslint-disable-next-line deprecation/deprecation\n  level = 'info',\n  hint,\n  attachStacktrace,\n) {\n  const event = {\n    event_id: hint && hint.event_id,\n    level,\n  };\n\n  if (attachStacktrace && hint && hint.syntheticException) {\n    const frames = parseStackFrames(stackParser, hint.syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [\n          {\n            value: message,\n            stacktrace: { frames },\n          },\n        ],\n      };\n    }\n  }\n\n  if (isParameterizedString(message)) {\n    const { __sentry_template_string__, __sentry_template_values__ } = message;\n\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__,\n    };\n    return event;\n  }\n\n  event.message = message;\n  return event;\n}\n\nexport { eventFromMessage, eventFromUnknownInput, exceptionFromError, parseStackFrames };\n//# sourceMappingURL=eventbuilder.js.map\n"],"names":["extractExceptionKeysForMessage","isError","isPlainObject","normalizeToSize","addExceptionTypeValue","addExceptionMechanism","isParameterizedString"],"mappings":";;;;;;AAQA,SAAS,iBAAiB,aAAa,OAAO;AAC5C,SAAO,YAAY,MAAM,SAAS,IAAI,CAAC;AACzC;AAKA,SAAS,mBAAmB,aAAa,OAAO;AAC9C,QAAM,YAAY;AAAA,IAChB,MAAM,MAAM,QAAQ,MAAM,YAAY;AAAA,IACtC,OAAO,MAAM;AAAA,EACjB;AAEE,QAAM,SAAS,iBAAiB,aAAa,KAAK;AAClD,MAAI,OAAO,QAAQ;AACjB,cAAU,aAAa,EAAE;EAC1B;AAED,SAAO;AACT;AAEA,SAAS,oBAAoB,WAAW;AACtC,MAAI,UAAU,aAAa,OAAO,UAAU,SAAS,UAAU;AAC7D,QAAI,UAAU,IAAI,UAAU;AAE5B,QAAI,aAAa,aAAa,OAAO,UAAU,YAAY,UAAU;AACnE,iBAAW,kBAAkB,UAAU;AAAA,IACxC;AAED,WAAO;AAAA,EACX,WAAa,aAAa,aAAa,OAAO,UAAU,YAAY,UAAU;AAC1E,WAAO,UAAU;AAAA,EACrB,OAAS;AAGL,WAAO,2CAA2CA,OAA8B;AAAA,MAC9E;AAAA,IACD;AAAA,EACF;AACH;AAQA,SAAS,sBAEP,gBACA,aACA,WACA,MACA;AACA,QAAM,SACJ,OAAO,mBAAmB;AAAA;AAAA,IAEtB,eAAc,EAAG,UAAW;AAAA,MAC5B;AAEN,MAAI,KAAK;AACT,QAAM,oBACJ,QAAQ,KAAK,QAAS,KAAK,KAAO;AACpC,QAAM,YAAY,qBAAqB;AAAA,IACrC,SAAS;AAAA,IACT,MAAM;AAAA,EACV;AAEE,MAAI;AAEJ,MAAI,CAACC,GAAAA,QAAQ,SAAS,GAAG;AACvB,QAAIC,GAAAA,cAAc,SAAS,GAAG;AAC5B,YAAM,iBAAiB,UAAU,OAAO,WAAU,EAAG;AACrD,eAAS,EAAE,CAAC,gBAAgB,GAAGC,UAAe,gBAAC,WAAY,cAAc;AAEzE,YAAM,UAAU,oBAAoB,SAAS;AAC7C,WAAM,QAAQ,KAAK,sBAAuB,IAAI,MAAM,OAAO;AAC3D,MAAC,GAAK,UAAU;AAAA,IACtB,OAAW;AAGL,WAAM,QAAQ,KAAK,sBAAuB,IAAI,MAAM;AACpD,MAAC,GAAK,UAAU;AAAA,IACjB;AACD,cAAU,YAAY;AAAA,EACvB;AAED,QAAM,QAAQ;AAAA,IACZ,WAAW;AAAA,MACT,QAAQ,CAAC,mBAAmB,aAAa,EAAE,CAAE;AAAA,IAC9C;AAAA,EACL;AAEE,MAAI,QAAQ;AACV,UAAM,QAAQ;AAAA,EACf;AAEDC,OAAAA,sBAAsB,OAAO,QAAW,MAAS;AACjDC,6BAAsB,OAAO,SAAS;AAEtC,SAAO;AAAA,IACL,GAAG;AAAA,IACH,UAAU,QAAQ,KAAK;AAAA,EAC3B;AACA;AAMA,SAAS,iBACP,aACA,SAEA,QAAQ,QACR,MACA,kBACA;AACA,QAAM,QAAQ;AAAA,IACZ,UAAU,QAAQ,KAAK;AAAA,IACvB;AAAA,EACJ;AAEE,MAAI,oBAAoB,QAAQ,KAAK,oBAAoB;AACvD,UAAM,SAAS,iBAAiB,aAAa,KAAK,kBAAkB;AACpE,QAAI,OAAO,QAAQ;AACjB,YAAM,YAAY;AAAA,QAChB,QAAQ;AAAA,UACN;AAAA,YACE,OAAO;AAAA,YACP,YAAY,EAAE,OAAQ;AAAA,UACvB;AAAA,QACF;AAAA,MACT;AAAA,IACK;AAAA,EACF;AAED,MAAIC,GAAAA,sBAAsB,OAAO,GAAG;AAClC,UAAM,EAAE,4BAA4B,2BAA4B,IAAG;AAEnE,UAAM,WAAW;AAAA,MACf,SAAS;AAAA,MACT,QAAQ;AAAA,IACd;AACI,WAAO;AAAA,EACR;AAED,QAAM,UAAU;AAChB,SAAO;AACT;;;;;","x_google_ignoreList":[0]}