{"version":3,"file":"metric-summary.cjs","sources":["../../../../../../../../../../../node_modules/@sentry/node/node_modules/@sentry/core/esm/metrics/metric-summary.js"],"sourcesContent":["import { dropUndefinedKeys } from '@sentry/utils';\nimport '../debug-build.js';\nimport '../tracing/errors.js';\nimport '../tracing/spanstatus.js';\nimport { getActiveSpan } from '../tracing/trace.js';\n\n/**\n * key: bucketKey\n * value: [exportKey, MetricSummary]\n */\n\nlet SPAN_METRIC_SUMMARY;\n\nfunction getMetricStorageForSpan(span) {\n  return SPAN_METRIC_SUMMARY ? SPAN_METRIC_SUMMARY.get(span) : undefined;\n}\n\n/**\n * Fetches the metric summary if it exists for the passed span\n */\nfunction getMetricSummaryJsonForSpan(span) {\n  const storage = getMetricStorageForSpan(span);\n\n  if (!storage) {\n    return undefined;\n  }\n  const output = {};\n\n  for (const [, [exportKey, summary]] of storage) {\n    if (!output[exportKey]) {\n      output[exportKey] = [];\n    }\n\n    output[exportKey].push(dropUndefinedKeys(summary));\n  }\n\n  return output;\n}\n\n/**\n * Updates the metric summary on the currently active span\n */\nfunction updateMetricSummaryOnActiveSpan(\n  metricType,\n  sanitizedName,\n  value,\n  unit,\n  tags,\n  bucketKey,\n) {\n  const span = getActiveSpan();\n  if (span) {\n    const storage = getMetricStorageForSpan(span) || new Map();\n\n    const exportKey = `${metricType}:${sanitizedName}@${unit}`;\n    const bucketItem = storage.get(bucketKey);\n\n    if (bucketItem) {\n      const [, summary] = bucketItem;\n      storage.set(bucketKey, [\n        exportKey,\n        {\n          min: Math.min(summary.min, value),\n          max: Math.max(summary.max, value),\n          count: (summary.count += 1),\n          sum: (summary.sum += value),\n          tags: summary.tags,\n        },\n      ]);\n    } else {\n      storage.set(bucketKey, [\n        exportKey,\n        {\n          min: value,\n          max: value,\n          count: 1,\n          sum: value,\n          tags,\n        },\n      ]);\n    }\n\n    if (!SPAN_METRIC_SUMMARY) {\n      SPAN_METRIC_SUMMARY = new WeakMap();\n    }\n\n    SPAN_METRIC_SUMMARY.set(span, storage);\n  }\n}\n\nexport { getMetricSummaryJsonForSpan, updateMetricSummaryOnActiveSpan };\n//# sourceMappingURL=metric-summary.js.map\n"],"names":["dropUndefinedKeys","getActiveSpan"],"mappings":";;;;AAWA,IAAI;AAEJ,SAAS,wBAAwB,MAAM;AACrC,SAAO,sBAAsB,oBAAoB,IAAI,IAAI,IAAI;AAC/D;AAKA,SAAS,4BAA4B,MAAM;AACzC,QAAM,UAAU,wBAAwB,IAAI;AAE5C,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,EACR;AACD,QAAM,SAAS,CAAA;AAEf,aAAW,CAAA,EAAG,CAAC,WAAW,OAAO,CAAC,KAAK,SAAS;AAC9C,QAAI,CAAC,OAAO,SAAS,GAAG;AACtB,aAAO,SAAS,IAAI;IACrB;AAED,WAAO,SAAS,EAAE,KAAKA,OAAAA,kBAAkB,OAAO,CAAC;AAAA,EAClD;AAED,SAAO;AACT;AAKA,SAAS,gCACP,YACA,eACA,OACA,MACA,MACA,WACA;AACA,QAAM,OAAOC,MAAAA;AACb,MAAI,MAAM;AACR,UAAM,UAAU,wBAAwB,IAAI,KAAK,oBAAI,IAAG;AAExD,UAAM,YAAY,GAAG,cAAc,iBAAiB;AACpD,UAAM,aAAa,QAAQ,IAAI,SAAS;AAExC,QAAI,YAAY;AACd,YAAM,CAAG,EAAA,OAAO,IAAI;AACpB,cAAQ,IAAI,WAAW;AAAA,QACrB;AAAA,QACA;AAAA,UACE,KAAK,KAAK,IAAI,QAAQ,KAAK,KAAK;AAAA,UAChC,KAAK,KAAK,IAAI,QAAQ,KAAK,KAAK;AAAA,UAChC,OAAQ,QAAQ,SAAS;AAAA,UACzB,KAAM,QAAQ,OAAO;AAAA,UACrB,MAAM,QAAQ;AAAA,QACf;AAAA,MACT,CAAO;AAAA,IACP,OAAW;AACL,cAAQ,IAAI,WAAW;AAAA,QACrB;AAAA,QACA;AAAA,UACE,KAAK;AAAA,UACL,KAAK;AAAA,UACL,OAAO;AAAA,UACP,KAAK;AAAA,UACL;AAAA,QACD;AAAA,MACT,CAAO;AAAA,IACF;AAED,QAAI,CAAC,qBAAqB;AACxB,4BAAsB,oBAAI;IAC3B;AAED,wBAAoB,IAAI,MAAM,OAAO;AAAA,EACtC;AACH;;;","x_google_ignoreList":[0]}