"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const async_hooks = require("async_hooks");
const hub = require('./../../_node_modules/@sentry/core/esm/hub.cjs');
const _optionalChain = require('./../../_node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.cjs');
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const async_hooks__namespace = /* @__PURE__ */ _interopNamespaceDefault(async_hooks);
let asyncStorage;
function setHooksAsyncContextStrategy() {
  if (!asyncStorage) {
    asyncStorage = new async_hooks__namespace.AsyncLocalStorage();
  }
  function getCurrentHub() {
    return asyncStorage.getStore();
  }
  function createNewHub(parent) {
    const carrier = {};
    hub.ensureHubOnCarrier(carrier, parent);
    return hub.getHubFromCarrier(carrier);
  }
  function runWithAsyncContext(callback, options) {
    const existingHub = getCurrentHub();
    if (existingHub && _optionalChain._optionalChain([options, "optionalAccess", (_) => _.reuseExisting])) {
      return callback();
    }
    const newHub = createNewHub(existingHub);
    return asyncStorage.run(newHub, () => {
      return callback();
    });
  }
  hub.setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });
}
exports.setHooksAsyncContextStrategy = setHooksAsyncContextStrategy;
//# sourceMappingURL=hooks.cjs.map
