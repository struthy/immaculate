"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const domain = require("domain");
const hub = require('./../../_node_modules/@sentry/core/esm/hub.cjs');
const _optionalChain = require('./../../_node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.cjs');
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const domain__namespace = /* @__PURE__ */ _interopNamespaceDefault(domain);
function getActiveDomain() {
  return domain__namespace.active;
}
function getCurrentHub() {
  const activeDomain = getActiveDomain();
  if (!activeDomain) {
    return void 0;
  }
  hub.ensureHubOnCarrier(activeDomain);
  return hub.getHubFromCarrier(activeDomain);
}
function createNewHub(parent) {
  const carrier = {};
  hub.ensureHubOnCarrier(carrier, parent);
  return hub.getHubFromCarrier(carrier);
}
function runWithAsyncContext(callback, options) {
  const activeDomain = getActiveDomain();
  if (activeDomain && _optionalChain._optionalChain([options, "optionalAccess", (_) => _.reuseExisting])) {
    return callback();
  }
  const local = domain__namespace.create();
  const parentHub = activeDomain ? hub.getHubFromCarrier(activeDomain) : void 0;
  const newHub = createNewHub(parentHub);
  hub.setHubOnCarrier(local, newHub);
  return local.bind(() => {
    return callback();
  })();
}
function setDomainAsyncContextStrategy() {
  hub.setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });
}
exports.setDomainAsyncContextStrategy = setDomainAsyncContextStrategy;
//# sourceMappingURL=domain.cjs.map
