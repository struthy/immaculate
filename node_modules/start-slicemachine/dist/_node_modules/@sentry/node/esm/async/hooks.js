import * as async_hooks from "async_hooks";
import { setAsyncContextStrategy, ensureHubOnCarrier, getHubFromCarrier } from './../../_node_modules/@sentry/core/esm/hub.js';
import { _optionalChain } from './../../_node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js';
let asyncStorage;
function setHooksAsyncContextStrategy() {
  if (!asyncStorage) {
    asyncStorage = new async_hooks.AsyncLocalStorage();
  }
  function getCurrentHub() {
    return asyncStorage.getStore();
  }
  function createNewHub(parent) {
    const carrier = {};
    ensureHubOnCarrier(carrier, parent);
    return getHubFromCarrier(carrier);
  }
  function runWithAsyncContext(callback, options) {
    const existingHub = getCurrentHub();
    if (existingHub && _optionalChain([options, "optionalAccess", (_) => _.reuseExisting])) {
      return callback();
    }
    const newHub = createNewHub(existingHub);
    return asyncStorage.run(newHub, () => {
      return callback();
    });
  }
  setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });
}
export {
  setHooksAsyncContextStrategy
};
//# sourceMappingURL=hooks.js.map
