{"version":3,"file":"http.cjs","sources":["../../../../../../../../node_modules/@sentry/node/esm/integrations/http.js"],"sourcesContent":["import { _optionalChain } from '@sentry/utils';\nimport { defineIntegration, getClient, isSentryRequestUrl, getCurrentScope, getIsolationScope, getActiveSpan, spanToTraceHeader, getDynamicSamplingContextFromSpan, getDynamicSamplingContextFromClient, setHttpStatus, spanToJSON, hasTracingEnabled, getCurrentHub, addBreadcrumb } from '@sentry/core';\nimport { dropUndefinedKeys, logger, fill, LRUMap, generateSentryTraceHeader, dynamicSamplingContextToSentryBaggageHeader, stringMatchesSomePattern } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { NODE_VERSION } from '../nodeVersion.js';\nimport { normalizeRequestArgs, extractRawUrl, extractUrl, cleanSpanDescription } from './utils/http.js';\n\nconst _httpIntegration = ((options = {}) => {\n  const { breadcrumbs, tracing, shouldCreateSpanForRequest } = options;\n\n  const convertedOptions = {\n    breadcrumbs,\n    tracing:\n      tracing === false\n        ? false\n        : dropUndefinedKeys({\n            // If tracing is forced to `true`, we don't want to set `enableIfHasTracingEnabled`\n            enableIfHasTracingEnabled: tracing === true ? undefined : true,\n            shouldCreateSpanForRequest,\n          }),\n  };\n\n  // eslint-disable-next-line deprecation/deprecation\n  return new Http(convertedOptions) ;\n}) ;\n\n/**\n * The http module integration instruments Node's internal http module. It creates breadcrumbs, spans for outgoing\n * http requests, and attaches trace data when tracing is enabled via its `tracing` option.\n *\n * By default, this will always create breadcrumbs, and will create spans if tracing is enabled.\n */\nconst httpIntegration = defineIntegration(_httpIntegration);\n\n/**\n * The http module integration instruments Node's internal http module. It creates breadcrumbs, transactions for outgoing\n * http requests and attaches trace data when tracing is enabled via its `tracing` option.\n *\n * @deprecated Use `httpIntegration()` instead.\n */\nclass Http  {\n  /**\n   * @inheritDoc\n   */\n   static __initStatic() {this.id = 'Http';}\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line deprecation/deprecation\n   __init() {this.name = Http.id;}\n\n  /**\n   * @inheritDoc\n   */\n   constructor(options = {}) {Http.prototype.__init.call(this);\n    this._breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n    this._tracing = !options.tracing ? undefined : options.tracing === true ? {} : options.tracing;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setupOnce(\n    _addGlobalEventProcessor,\n    // eslint-disable-next-line deprecation/deprecation\n    setupOnceGetCurrentHub,\n  ) {\n    // eslint-disable-next-line deprecation/deprecation\n    const clientOptions = _optionalChain([setupOnceGetCurrentHub, 'call', _ => _(), 'access', _2 => _2.getClient, 'call', _3 => _3(), 'optionalAccess', _4 => _4.getOptions, 'call', _5 => _5()]);\n\n    // If `tracing` is not explicitly set, we default this based on whether or not tracing is enabled.\n    // But for compatibility, we only do that if `enableIfHasTracingEnabled` is set.\n    const shouldCreateSpans = _shouldCreateSpans(this._tracing, clientOptions);\n\n    // No need to instrument if we don't want to track anything\n    if (!this._breadcrumbs && !shouldCreateSpans) {\n      return;\n    }\n\n    // Do not auto-instrument for other instrumenter\n    if (clientOptions && clientOptions.instrumenter !== 'sentry') {\n      DEBUG_BUILD && logger.log('HTTP Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const shouldCreateSpanForRequest = _getShouldCreateSpanForRequest(shouldCreateSpans, this._tracing, clientOptions);\n\n    // eslint-disable-next-line deprecation/deprecation\n    const tracePropagationTargets = _optionalChain([clientOptions, 'optionalAccess', _6 => _6.tracePropagationTargets]) || _optionalChain([this, 'access', _7 => _7._tracing, 'optionalAccess', _8 => _8.tracePropagationTargets]);\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const httpModule = require('http');\n    const wrappedHttpHandlerMaker = _createWrappedRequestMethodFactory(\n      httpModule,\n      this._breadcrumbs,\n      shouldCreateSpanForRequest,\n      tracePropagationTargets,\n    );\n    fill(httpModule, 'get', wrappedHttpHandlerMaker);\n    fill(httpModule, 'request', wrappedHttpHandlerMaker);\n\n    // NOTE: Prior to Node 9, `https` used internals of `http` module, thus we don't patch it.\n    // If we do, we'd get double breadcrumbs and double spans for `https` calls.\n    // It has been changed in Node 9, so for all versions equal and above, we patch `https` separately.\n    if (NODE_VERSION.major > 8) {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const httpsModule = require('https');\n      const wrappedHttpsHandlerMaker = _createWrappedRequestMethodFactory(\n        httpsModule,\n        this._breadcrumbs,\n        shouldCreateSpanForRequest,\n        tracePropagationTargets,\n      );\n      fill(httpsModule, 'get', wrappedHttpsHandlerMaker);\n      fill(httpsModule, 'request', wrappedHttpsHandlerMaker);\n    }\n  }\n}Http.__initStatic();\n\n// for ease of reading below\n\n/**\n * Function which creates a function which creates wrapped versions of internal `request` and `get` calls within `http`\n * and `https` modules. (NB: Not a typo - this is a creator^2!)\n *\n * @param breadcrumbsEnabled Whether or not to record outgoing requests as breadcrumbs\n * @param tracingEnabled Whether or not to record outgoing requests as tracing spans\n *\n * @returns A function which accepts the exiting handler and returns a wrapped handler\n */\nfunction _createWrappedRequestMethodFactory(\n  httpModule,\n  breadcrumbsEnabled,\n  shouldCreateSpanForRequest,\n  tracePropagationTargets,\n) {\n  // We're caching results so we don't have to recompute regexp every time we create a request.\n  const createSpanUrlMap = new LRUMap(100);\n  const headersUrlMap = new LRUMap(100);\n\n  const shouldCreateSpan = (url) => {\n    if (shouldCreateSpanForRequest === undefined) {\n      return true;\n    }\n\n    const cachedDecision = createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = shouldCreateSpanForRequest(url);\n    createSpanUrlMap.set(url, decision);\n    return decision;\n  };\n\n  const shouldAttachTraceData = (url) => {\n    if (tracePropagationTargets === undefined) {\n      return true;\n    }\n\n    const cachedDecision = headersUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = stringMatchesSomePattern(url, tracePropagationTargets);\n    headersUrlMap.set(url, decision);\n    return decision;\n  };\n\n  /**\n   * Captures Breadcrumb based on provided request/response pair\n   */\n  function addRequestBreadcrumb(\n    event,\n    requestSpanData,\n    req,\n    res,\n  ) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!getCurrentHub().getIntegration(Http)) {\n      return;\n    }\n\n    addBreadcrumb(\n      {\n        category: 'http',\n        data: {\n          status_code: res && res.statusCode,\n          ...requestSpanData,\n        },\n        type: 'http',\n      },\n      {\n        event,\n        request: req,\n        response: res,\n      },\n    );\n  }\n\n  return function wrappedRequestMethodFactory(originalRequestMethod) {\n    return function wrappedMethod( ...args) {\n      const requestArgs = normalizeRequestArgs(httpModule, args);\n      const requestOptions = requestArgs[0];\n      // eslint-disable-next-line deprecation/deprecation\n      const rawRequestUrl = extractRawUrl(requestOptions);\n      const requestUrl = extractUrl(requestOptions);\n      const client = getClient();\n\n      // we don't want to record requests to Sentry as either breadcrumbs or spans, so just use the original method\n      if (isSentryRequestUrl(requestUrl, client)) {\n        return originalRequestMethod.apply(httpModule, requestArgs);\n      }\n\n      const scope = getCurrentScope();\n      const isolationScope = getIsolationScope();\n      const parentSpan = getActiveSpan();\n\n      const data = getRequestSpanData(requestUrl, requestOptions);\n\n      const requestSpan = shouldCreateSpan(rawRequestUrl)\n        ? // eslint-disable-next-line deprecation/deprecation\n          _optionalChain([parentSpan, 'optionalAccess', _9 => _9.startChild, 'call', _10 => _10({\n            op: 'http.client',\n            origin: 'auto.http.node.http',\n            description: `${data['http.method']} ${data.url}`,\n            data,\n          })])\n        : undefined;\n\n      if (client && shouldAttachTraceData(rawRequestUrl)) {\n        const { traceId, spanId, sampled, dsc } = {\n          ...isolationScope.getPropagationContext(),\n          ...scope.getPropagationContext(),\n        };\n\n        const sentryTraceHeader = requestSpan\n          ? spanToTraceHeader(requestSpan)\n          : generateSentryTraceHeader(traceId, spanId, sampled);\n\n        const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(\n          dsc ||\n            (requestSpan\n              ? getDynamicSamplingContextFromSpan(requestSpan)\n              : getDynamicSamplingContextFromClient(traceId, client, scope)),\n        );\n\n        addHeadersToRequestOptions(requestOptions, requestUrl, sentryTraceHeader, sentryBaggageHeader);\n      } else {\n        DEBUG_BUILD &&\n          logger.log(\n            `[Tracing] Not adding sentry-trace header to outgoing request (${requestUrl}) due to mismatching tracePropagationTargets option.`,\n          );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalRequestMethod\n        .apply(httpModule, requestArgs)\n        .once('response', function ( res) {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('response', data, req, res);\n          }\n          if (requestSpan) {\n            if (res.statusCode) {\n              setHttpStatus(requestSpan, res.statusCode);\n            }\n            requestSpan.updateName(\n              cleanSpanDescription(spanToJSON(requestSpan).description || '', requestOptions, req) || '',\n            );\n            requestSpan.end();\n          }\n        })\n        .once('error', function () {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('error', data, req);\n          }\n          if (requestSpan) {\n            setHttpStatus(requestSpan, 500);\n            requestSpan.updateName(\n              cleanSpanDescription(spanToJSON(requestSpan).description || '', requestOptions, req) || '',\n            );\n            requestSpan.end();\n          }\n        });\n    };\n  };\n}\n\nfunction addHeadersToRequestOptions(\n  requestOptions,\n  requestUrl,\n  sentryTraceHeader,\n  sentryBaggageHeader,\n) {\n  // Don't overwrite sentry-trace and baggage header if it's already set.\n  const headers = requestOptions.headers || {};\n  if (headers['sentry-trace']) {\n    return;\n  }\n\n  DEBUG_BUILD &&\n    logger.log(`[Tracing] Adding sentry-trace header ${sentryTraceHeader} to outgoing request to \"${requestUrl}\": `);\n\n  requestOptions.headers = {\n    ...requestOptions.headers,\n    'sentry-trace': sentryTraceHeader,\n    // Setting a header to `undefined` will crash in node so we only set the baggage header when it's defined\n    ...(sentryBaggageHeader &&\n      sentryBaggageHeader.length > 0 && { baggage: normalizeBaggageHeader(requestOptions, sentryBaggageHeader) }),\n  };\n}\n\nfunction getRequestSpanData(requestUrl, requestOptions) {\n  const method = requestOptions.method || 'GET';\n  const data = {\n    url: requestUrl,\n    'http.method': method,\n  };\n  if (requestOptions.hash) {\n    // strip leading \"#\"\n    data['http.fragment'] = requestOptions.hash.substring(1);\n  }\n  if (requestOptions.search) {\n    // strip leading \"?\"\n    data['http.query'] = requestOptions.search.substring(1);\n  }\n  return data;\n}\n\nfunction normalizeBaggageHeader(\n  requestOptions,\n  sentryBaggageHeader,\n) {\n  if (!requestOptions.headers || !requestOptions.headers.baggage) {\n    return sentryBaggageHeader;\n  } else if (!sentryBaggageHeader) {\n    return requestOptions.headers.baggage ;\n  } else if (Array.isArray(requestOptions.headers.baggage)) {\n    return [...requestOptions.headers.baggage, sentryBaggageHeader];\n  }\n  // Type-cast explanation:\n  // Technically this the following could be of type `(number | string)[]` but for the sake of simplicity\n  // we say this is undefined behaviour, since it would not be baggage spec conform if the user did this.\n  return [requestOptions.headers.baggage, sentryBaggageHeader] ;\n}\n\n/** Exported for tests only. */\nfunction _shouldCreateSpans(\n  tracingOptions,\n  clientOptions,\n) {\n  return tracingOptions === undefined\n    ? false\n    : tracingOptions.enableIfHasTracingEnabled\n      ? hasTracingEnabled(clientOptions)\n      : true;\n}\n\n/** Exported for tests only. */\nfunction _getShouldCreateSpanForRequest(\n  shouldCreateSpans,\n  tracingOptions,\n  clientOptions,\n) {\n  const handler = shouldCreateSpans\n    ? // eslint-disable-next-line deprecation/deprecation\n      _optionalChain([tracingOptions, 'optionalAccess', _11 => _11.shouldCreateSpanForRequest]) || _optionalChain([clientOptions, 'optionalAccess', _12 => _12.shouldCreateSpanForRequest])\n    : () => false;\n\n  return handler;\n}\n\nexport { Http, _getShouldCreateSpanForRequest, _shouldCreateSpans, httpIntegration };\n//# sourceMappingURL=http.js.map\n"],"names":["tracing","dropUndefinedKeys","defineIntegration","_optionalChain","DEBUG_BUILD","logger","fill","NODE_VERSION","LRUMap","stringMatchesSomePattern","getCurrentHub","addBreadcrumb","normalizeRequestArgs","extractRawUrl","extractUrl","getClient","isSentryRequestUrl","getCurrentScope","getIsolationScope","getActiveSpan","spanToTraceHeader","generateSentryTraceHeader","dynamicSamplingContextToSentryBaggageHeader","getDynamicSamplingContextFromSpan","getDynamicSamplingContextFromClient","setHttpStatus","cleanSpanDescription","spanToJSON","hasTracingEnabled"],"mappings":"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","x_google_ignoreList":[0]}