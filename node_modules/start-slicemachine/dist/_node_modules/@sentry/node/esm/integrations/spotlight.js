import * as http from "http";
import { URL } from "url";
import { defineIntegration, convertIntegrationFnToClass } from './../../_node_modules/@sentry/core/esm/integration.js';
import { logger } from './../../_node_modules/@sentry/utils/esm/logger.js';
import { serializeEnvelope } from './../../_node_modules/@sentry/utils/esm/envelope.js';
const INTEGRATION_NAME = "Spotlight";
const _spotlightIntegration = (options = {}) => {
  const _options = {
    sidecarUrl: options.sidecarUrl || "http://localhost:8969/stream"
  };
  return {
    name: INTEGRATION_NAME,
    // TODO v8: Remove this
    setupOnce() {
    },
    // eslint-disable-line @typescript-eslint/no-empty-function
    setup(client) {
      if (typeof process === "object" && process.env && process.env.NODE_ENV !== "development") {
        logger.warn("[Spotlight] It seems you're not in dev mode. Do you really want to have Spotlight enabled?");
      }
      connectToSpotlight(client, _options);
    }
  };
};
const spotlightIntegration = defineIntegration(_spotlightIntegration);
convertIntegrationFnToClass(INTEGRATION_NAME, spotlightIntegration);
function connectToSpotlight(client, options) {
  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);
  if (!spotlightUrl) {
    return;
  }
  let failedRequests = 0;
  if (typeof client.on !== "function") {
    logger.warn("[Spotlight] Cannot connect to spotlight due to missing method on SDK client (`client.on`)");
    return;
  }
  client.on("beforeEnvelope", (envelope) => {
    if (failedRequests > 3) {
      logger.warn("[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests");
      return;
    }
    const serializedEnvelope = serializeEnvelope(envelope);
    const request = getNativeHttpRequest();
    const req = request(
      {
        method: "POST",
        path: spotlightUrl.pathname,
        hostname: spotlightUrl.hostname,
        port: spotlightUrl.port,
        headers: {
          "Content-Type": "application/x-sentry-envelope"
        }
      },
      (res) => {
        res.on("data", () => {
        });
        res.on("end", () => {
        });
        res.setEncoding("utf8");
      }
    );
    req.on("error", () => {
      failedRequests++;
      logger.warn("[Spotlight] Failed to send envelope to Spotlight Sidecar");
    });
    req.write(serializedEnvelope);
    req.end();
  });
}
function parseSidecarUrl(url) {
  try {
    return new URL(`${url}`);
  } catch (e) {
    logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);
    return void 0;
  }
}
function getNativeHttpRequest() {
  const { request } = http;
  if (isWrapped(request)) {
    return request.__sentry_original__;
  }
  return request;
}
function isWrapped(impl) {
  return "__sentry_original__" in impl;
}
export {
  getNativeHttpRequest,
  spotlightIntegration
};
//# sourceMappingURL=spotlight.js.map
