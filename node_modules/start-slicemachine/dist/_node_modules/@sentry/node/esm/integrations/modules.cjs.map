{"version":3,"file":"modules.cjs","sources":["../../../../../../../../node_modules/@sentry/node/esm/integrations/modules.js"],"sourcesContent":["import { existsSync, readFileSync } from 'fs';\nimport { dirname, join } from 'path';\nimport { defineIntegration, convertIntegrationFnToClass } from '@sentry/core';\n\nlet moduleCache;\n\nconst INTEGRATION_NAME = 'Modules';\n\n/** Extract information about paths */\nfunction getPaths() {\n  try {\n    return require.cache ? Object.keys(require.cache ) : [];\n  } catch (e) {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules()\n\n {\n  const mainPaths = (require.main && require.main.paths) || [];\n  const paths = getPaths();\n  const infos\n\n = {};\n  const seen\n\n = {};\n\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = () => {\n      const orig = dir;\n      dir = dirname(orig);\n\n      if (!dir || orig === dir || seen[orig]) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      const pkgfile = join(orig, 'package.json');\n      seen[orig] = true;\n\n      if (!existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        const info = JSON.parse(readFileSync(pkgfile, 'utf8'))\n\n;\n        infos[info.name] = info.version;\n      } catch (_oO) {\n        // no-empty\n      }\n    };\n\n    updir();\n  });\n\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules() {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\n\nconst _modulesIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules(),\n      };\n\n      return event;\n    },\n  };\n}) ;\n\nconst modulesIntegration = defineIntegration(_modulesIntegration);\n\n/**\n * Add node modules / packages to the event.\n * @deprecated Use `modulesIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst Modules = convertIntegrationFnToClass(INTEGRATION_NAME, modulesIntegration)\n\n;\n\n// eslint-disable-next-line deprecation/deprecation\n\nexport { Modules, modulesIntegration };\n//# sourceMappingURL=modules.js.map\n"],"names":["path","dirname","join","existsSync","readFileSync","defineIntegration","convertIntegrationFnToClass"],"mappings":";;;;;AAIA,IAAI;AAEJ,MAAM,mBAAmB;AAGzB,SAAS,WAAW;AAClB,MAAI;AACF,WAAO,QAAQ,QAAQ,OAAO,KAAK,QAAQ,KAAO,IAAG;EACtD,SAAQ,GAAP;AACA,WAAO;EACR;AACH;AAGA,SAAS,iBAER;AACC,QAAM,YAAa,QAAQ,QAAQ,QAAQ,KAAK,SAAU;AAC1D,QAAM,QAAQ;AACd,QAAM,QAEL;AACD,QAAM,OAEL;AAED,QAAM,QAAQA,YAAQ;AACpB,QAAI,MAAMA;AAGV,UAAM,QAAQ,MAAM;AAClB,YAAM,OAAO;AACb,YAAMC,KAAAA,QAAQ,IAAI;AAElB,UAAI,CAAC,OAAO,SAAS,OAAO,KAAK,IAAI,GAAG;AACtC,eAAO;AAAA,MACR;AACD,UAAI,UAAU,QAAQ,GAAG,IAAI,GAAG;AAC9B,eAAO,MAAK;AAAA,MACb;AAED,YAAM,UAAUC,KAAAA,KAAK,MAAM,cAAc;AACzC,WAAK,IAAI,IAAI;AAEb,UAAI,CAACC,GAAAA,WAAW,OAAO,GAAG;AACxB,eAAO,MAAK;AAAA,MACb;AAED,UAAI;AACF,cAAM,OAAO,KAAK,MAAMC,GAAAA,aAAa,SAAS,MAAM,CAAC;AAGrD,cAAM,KAAK,IAAI,IAAI,KAAK;AAAA,MACzB,SAAQ,KAAP;AAAA,MAED;AAAA,IACP;AAEI;EACJ,CAAG;AAED,SAAO;AACT;AAGA,SAAS,cAAc;AACrB,MAAI,CAAC,aAAa;AAChB,kBAAc,eAAc;AAAA,EAC7B;AACD,SAAO;AACT;AAEA,MAAM,sBAAuB,MAAM;AACjC,SAAO;AAAA,IACL,MAAM;AAAA;AAAA,IAEN,YAAY;AAAA,IAAE;AAAA;AAAA,IACd,aAAa,OAAO;AAClB,YAAM,UAAU;AAAA,QACd,GAAG,MAAM;AAAA,QACT,GAAG,YAAa;AAAA,MACxB;AAEM,aAAO;AAAA,IACR;AAAA,EACL;AACA;AAEK,MAAC,qBAAqBC,YAAiB,kBAAC,mBAAmB;AAOhDC,YAAAA,4BAA4B,kBAAkB,kBAAkB;;","x_google_ignoreList":[0]}