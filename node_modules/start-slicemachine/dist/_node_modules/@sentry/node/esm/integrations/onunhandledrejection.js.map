{"version":3,"file":"onunhandledrejection.js","sources":["../../../../../../../../node_modules/@sentry/node/esm/integrations/onunhandledrejection.js"],"sourcesContent":["import { defineIntegration, convertIntegrationFnToClass, getClient, captureException } from '@sentry/core';\nimport { consoleSandbox } from '@sentry/utils';\nimport { logAndExitProcess } from './utils/errorhandling.js';\n\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\n\nconst _onUnhandledRejectionIntegration = ((options = {}) => {\n  const mode = options.mode || 'warn';\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, { mode }));\n    },\n  };\n}) ;\n\nconst onUnhandledRejectionIntegration = defineIntegration(_onUnhandledRejectionIntegration);\n\n/**\n * Global Promise Rejection handler.\n * @deprecated Use `onUnhandledRejectionIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst OnUnhandledRejection = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  onUnhandledRejectionIntegration,\n)\n\n;\n\n// eslint-disable-next-line deprecation/deprecation\n\n/**\n * Send an exception with reason\n * @param reason string\n * @param promise promise\n *\n * Exported only for tests.\n */\nfunction makeUnhandledPromiseHandler(\n  client,\n  options,\n) {\n  return function sendUnhandledPromise(reason, promise) {\n    if (getClient() !== client) {\n      return;\n    }\n\n    captureException(reason, {\n      originalException: promise,\n      captureContext: {\n        extra: { unhandledPromiseRejection: true },\n      },\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n\n    handleRejection(reason, options);\n  };\n}\n\n/**\n * Handler for `mode` option\n\n */\nfunction handleRejection(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reason,\n  options,\n) {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning =\n    'This error originated either by ' +\n    'throwing inside of an async function without a catch block, ' +\n    'or by rejecting a promise which was not handled with .catch().' +\n    ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (options.mode === 'warn') {\n    consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      console.error(reason && reason.stack ? reason.stack : reason);\n    });\n  } else if (options.mode === 'strict') {\n    consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\n\nexport { OnUnhandledRejection, makeUnhandledPromiseHandler, onUnhandledRejectionIntegration };\n//# sourceMappingURL=onunhandledrejection.js.map\n"],"names":[],"mappings":";;;;AAIA,MAAM,mBAAmB;AAEzB,MAAM,mCAAoC,CAAC,UAAU,OAAO;AAC1D,QAAM,OAAO,QAAQ,QAAQ;AAE7B,SAAO;AAAA,IACL,MAAM;AAAA;AAAA,IAEN,YAAY;AAAA,IAAE;AAAA;AAAA,IACd,MAAM,QAAQ;AACZ,aAAO,QAAQ,GAAG,sBAAsB,4BAA4B,QAAQ,EAAE,KAAM,CAAA,CAAC;AAAA,IACtF;AAAA,EACL;AACA;AAEK,MAAC,kCAAkC,kBAAkB,gCAAgC;AAO7D;AAAA,EAC3B;AAAA,EACA;AACF;AAaA,SAAS,4BACP,QACA,SACA;AACA,SAAO,SAAS,qBAAqB,QAAQ,SAAS;AACpD,QAAI,UAAW,MAAK,QAAQ;AAC1B;AAAA,IACD;AAED,qBAAiB,QAAQ;AAAA,MACvB,mBAAmB;AAAA,MACnB,gBAAgB;AAAA,QACd,OAAO,EAAE,2BAA2B,KAAM;AAAA,MAC3C;AAAA,MACD,WAAW;AAAA,QACT,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,IACP,CAAK;AAED,oBAAgB,QAAQ,OAAO;AAAA,EACnC;AACA;AAMA,SAAS,gBAEP,QACA,SACA;AAEA,QAAM,mBACJ;AAMF,MAAI,QAAQ,SAAS,QAAQ;AAC3B,mBAAe,MAAM;AACnB,cAAQ,KAAK,gBAAgB;AAE7B,cAAQ,MAAM,UAAU,OAAO,QAAQ,OAAO,QAAQ,MAAM;AAAA,IAClE,CAAK;AAAA,EACL,WAAa,QAAQ,SAAS,UAAU;AACpC,mBAAe,MAAM;AACnB,cAAQ,KAAK,gBAAgB;AAAA,IACnC,CAAK;AACD,sBAAkB,MAAM;AAAA,EACzB;AAEH;","x_google_ignoreList":[0]}