{"version":3,"file":"common.cjs","sources":["../../../../../../../../../node_modules/@sentry/node/esm/integrations/local-variables/common.js"],"sourcesContent":["/**\n * Creates a rate limiter that will call the disable callback when the rate limit is reached and the enable callback\n * when a timeout has occurred.\n * @param maxPerSecond Maximum number of calls per second\n * @param enable Callback to enable capture\n * @param disable Callback to disable capture\n * @returns A function to call to increment the rate limiter count\n */\nfunction createRateLimiter(\n  maxPerSecond,\n  enable,\n  disable,\n) {\n  let count = 0;\n  let retrySeconds = 5;\n  let disabledTimeout = 0;\n\n  setInterval(() => {\n    if (disabledTimeout === 0) {\n      if (count > maxPerSecond) {\n        retrySeconds *= 2;\n        disable(retrySeconds);\n\n        // Cap at one day\n        if (retrySeconds > 86400) {\n          retrySeconds = 86400;\n        }\n        disabledTimeout = retrySeconds;\n      }\n    } else {\n      disabledTimeout -= 1;\n\n      if (disabledTimeout === 0) {\n        enable();\n      }\n    }\n\n    count = 0;\n  }, 1000).unref();\n\n  return () => {\n    count += 1;\n  };\n}\n\n// Add types for the exception event data\n\n/** Could this be an anonymous function? */\nfunction isAnonymous(name) {\n  return name !== undefined && (name.length === 0 || name === '?' || name === '<anonymous>');\n}\n\n/** Do the function names appear to match? */\nfunction functionNamesMatch(a, b) {\n  return a === b || (isAnonymous(a) && isAnonymous(b));\n}\n\n/** Creates a unique hash from stack frames */\nfunction hashFrames(frames) {\n  if (frames === undefined) {\n    return;\n  }\n\n  // Only hash the 10 most recent frames (ie. the last 10)\n  return frames.slice(-10).reduce((acc, frame) => `${acc},${frame.function},${frame.lineno},${frame.colno}`, '');\n}\n\n/**\n * We use the stack parser to create a unique hash from the exception stack trace\n * This is used to lookup vars when the exception passes through the event processor\n */\nfunction hashFromStack(stackParser, stack) {\n  if (stack === undefined) {\n    return undefined;\n  }\n\n  return hashFrames(stackParser(stack, 1));\n}\n\nexport { createRateLimiter, functionNamesMatch, hashFrames, hashFromStack, isAnonymous };\n//# sourceMappingURL=common.js.map\n"],"names":[],"mappings":";;AAQA,SAAS,kBACP,cACA,QACA,SACA;AACA,MAAI,QAAQ;AACZ,MAAI,eAAe;AACnB,MAAI,kBAAkB;AAEtB,cAAY,MAAM;AAChB,QAAI,oBAAoB,GAAG;AACzB,UAAI,QAAQ,cAAc;AACxB,wBAAgB;AAChB,gBAAQ,YAAY;AAGpB,YAAI,eAAe,OAAO;AACxB,yBAAe;AAAA,QAChB;AACD,0BAAkB;AAAA,MACnB;AAAA,IACP,OAAW;AACL,yBAAmB;AAEnB,UAAI,oBAAoB,GAAG;AACzB;MACD;AAAA,IACF;AAED,YAAQ;AAAA,EACZ,GAAK,GAAI,EAAE;AAET,SAAO,MAAM;AACX,aAAS;AAAA,EACb;AACA;AAKA,SAAS,YAAY,MAAM;AACzB,SAAO,SAAS,WAAc,KAAK,WAAW,KAAK,SAAS,OAAO,SAAS;AAC9E;AAGA,SAAS,mBAAmB,GAAG,GAAG;AAChC,SAAO,MAAM,KAAM,YAAY,CAAC,KAAK,YAAY,CAAC;AACpD;AAGA,SAAS,WAAW,QAAQ;AAC1B,MAAI,WAAW,QAAW;AACxB;AAAA,EACD;AAGD,SAAO,OAAO,MAAM,GAAG,EAAE,OAAO,CAAC,KAAK,UAAU,GAAG,OAAO,MAAM,YAAY,MAAM,UAAU,MAAM,SAAS,EAAE;AAC/G;AAMA,SAAS,cAAc,aAAa,OAAO;AACzC,MAAI,UAAU,QAAW;AACvB,WAAO;AAAA,EACR;AAED,SAAO,WAAW,YAAY,OAAO,CAAC,CAAC;AACzC;;;;;;","x_google_ignoreList":[0]}