import { logAndExitProcess } from "./utils/errorhandling.js";
import { defineIntegration, convertIntegrationFnToClass } from './../../_node_modules/@sentry/core/esm/integration.js';
import { getClient, captureException } from './../../_node_modules/@sentry/core/esm/exports.js';
import { consoleSandbox } from './../../_node_modules/@sentry/utils/esm/logger.js';
const INTEGRATION_NAME = "OnUnhandledRejection";
const _onUnhandledRejectionIntegration = (options = {}) => {
  const mode = options.mode || "warn";
  return {
    name: INTEGRATION_NAME,
    // TODO v8: Remove this
    setupOnce() {
    },
    // eslint-disable-line @typescript-eslint/no-empty-function
    setup(client) {
      global.process.on("unhandledRejection", makeUnhandledPromiseHandler(client, { mode }));
    }
  };
};
const onUnhandledRejectionIntegration = defineIntegration(_onUnhandledRejectionIntegration);
convertIntegrationFnToClass(
  INTEGRATION_NAME,
  onUnhandledRejectionIntegration
);
function makeUnhandledPromiseHandler(client, options) {
  return function sendUnhandledPromise(reason, promise) {
    if (getClient() !== client) {
      return;
    }
    captureException(reason, {
      originalException: promise,
      captureContext: {
        extra: { unhandledPromiseRejection: true }
      },
      mechanism: {
        handled: false,
        type: "onunhandledrejection"
      }
    });
    handleRejection(reason, options);
  };
}
function handleRejection(reason, options) {
  const rejectionWarning = "This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). The promise rejected with the reason:";
  if (options.mode === "warn") {
    consoleSandbox(() => {
      console.warn(rejectionWarning);
      console.error(reason && reason.stack ? reason.stack : reason);
    });
  } else if (options.mode === "strict") {
    consoleSandbox(() => {
      console.warn(rejectionWarning);
    });
    logAndExitProcess(reason);
  }
}
export {
  makeUnhandledPromiseHandler,
  onUnhandledRejectionIntegration
};
//# sourceMappingURL=onunhandledrejection.js.map
