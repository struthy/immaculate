{"version":3,"file":"context.js","sources":["../../../../../../../../node_modules/@sentry/node/esm/integrations/context.js"],"sourcesContent":["import { _optionalChain } from '@sentry/utils';\nimport { execFile } from 'child_process';\nimport { readFile, readdir } from 'fs';\nimport * as os from 'os';\nimport { join } from 'path';\nimport { promisify } from 'util';\nimport { defineIntegration, convertIntegrationFnToClass } from '@sentry/core';\n\n/* eslint-disable max-lines */\n\n// TODO: Required until we drop support for Node v8\nconst readFileAsync = promisify(readFile);\nconst readDirAsync = promisify(readdir);\n\nconst INTEGRATION_NAME = 'Context';\n\nconst _nodeContextIntegration = ((options = {}) => {\n  let cachedContext;\n\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options,\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event) {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n\n    const updatedContext = _updateContext(await cachedContext);\n\n    event.contexts = {\n      ...event.contexts,\n      app: { ...updatedContext.app, ..._optionalChain([event, 'access', _ => _.contexts, 'optionalAccess', _2 => _2.app]) },\n      os: { ...updatedContext.os, ..._optionalChain([event, 'access', _3 => _3.contexts, 'optionalAccess', _4 => _4.os]) },\n      device: { ...updatedContext.device, ..._optionalChain([event, 'access', _5 => _5.contexts, 'optionalAccess', _6 => _6.device]) },\n      culture: { ...updatedContext.culture, ..._optionalChain([event, 'access', _7 => _7.contexts, 'optionalAccess', _8 => _8.culture]) },\n      cloud_resource: { ...updatedContext.cloud_resource, ..._optionalChain([event, 'access', _9 => _9.contexts, 'optionalAccess', _10 => _10.cloud_resource]) },\n    };\n\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts() {\n    const contexts = {};\n\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n\n    if (_options.culture) {\n      const culture = getCultureContext();\n\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n\n    return contexts;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event) {\n      return addContext(event);\n    },\n  };\n}) ;\n\nconst nodeContextIntegration = defineIntegration(_nodeContextIntegration);\n\n/**\n * Add node modules / packages to the event.\n * @deprecated Use `nodeContextIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst Context = convertIntegrationFnToClass(INTEGRATION_NAME, nodeContextIntegration)\n\n;\n\n// eslint-disable-next-line deprecation/deprecation\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts) {\n  // Only update properties if they exist\n  if (_optionalChain([contexts, 'optionalAccess', _11 => _11.app, 'optionalAccess', _12 => _12.app_memory])) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n\n  if (_optionalChain([contexts, 'optionalAccess', _13 => _13.device, 'optionalAccess', _14 => _14.free_memory])) {\n    contexts.device.free_memory = os.freemem();\n  }\n\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext() {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release(),\n      };\n  }\n}\n\nfunction getCultureContext() {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    if (typeof (process.versions ).icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n\n      return {\n        locale: options.locale,\n        timezone: options.timeZone,\n      };\n    }\n  } catch (err) {\n    //\n  }\n\n  return;\n}\n\nfunction getAppContext() {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n\n  return { app_start_time, app_memory };\n}\n\n/**\n * Gets device information from os\n */\nfunction getDeviceContext(deviceOpt) {\n  const device = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime && os.uptime();\n  } catch (e) {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n\n  device.arch = os.arch();\n\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo = os.cpus();\n    if (cpuInfo && cpuInfo.length) {\n      const firstCpu = cpuInfo[0];\n\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Linux version file to check for a distribution. */\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS\n\n = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex, text) {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo() {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise((resolve, reject) => {\n      execFile('/usr/bin/sw_vers', (error, stdout) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name) {\n  return name.split(' ')[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo() {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo = {\n    kernel_version: os.release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) ).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = LINUX_VERSIONS[id](contents);\n  } catch (e) {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext() {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION,\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV,\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp',\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID,\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME,\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION,\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify',\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION,\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku',\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexport { Context, getDeviceContext, nodeContextIntegration, readDirAsync, readFileAsync };\n//# sourceMappingURL=context.js.map\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}