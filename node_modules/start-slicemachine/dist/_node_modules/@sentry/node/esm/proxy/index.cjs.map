{"version":3,"file":"index.cjs","sources":["../../../../../../../../node_modules/@sentry/node/esm/proxy/index.js"],"sourcesContent":["import { _nullishCoalesce, _optionalChain } from '@sentry/utils';\nimport * as net from 'net';\nimport * as tls from 'tls';\nimport { URL } from 'url';\nimport { logger } from '@sentry/utils';\nimport { Agent } from './base.js';\nimport { parseProxyResponse } from './parse-proxy-response.js';\n\nfunction debug(...args) {\n  logger.log('[https-proxy-agent]', ...args);\n}\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nclass HttpsProxyAgent extends Agent {\n  static __initStatic() {this.protocols = ['http', 'https']; }\n\n  constructor(proxy, opts) {\n    super(opts);\n    this.options = {};\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyHeaders = _nullishCoalesce(_optionalChain([opts, 'optionalAccess', _2 => _2.headers]), () => ( {}));\n    debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n\n    // Trim off the brackets from IPv6 addresses\n    const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === 'https:' ? 443 : 80;\n    this.connectOpts = {\n      // Attempt to negotiate http/1.1 for proxy servers that support http/2\n      ALPNProtocols: ['http/1.1'],\n      ...(opts ? omit(opts, 'headers') : null),\n      host,\n      port,\n    };\n  }\n\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   */\n  async connect(req, opts) {\n    const { proxy } = this;\n\n    if (!opts.host) {\n      throw new TypeError('No \"host\" provided');\n    }\n\n    // Create a socket connection to the proxy server.\n    let socket;\n    if (proxy.protocol === 'https:') {\n      debug('Creating `tls.Socket`: %o', this.connectOpts);\n      const servername = this.connectOpts.servername || this.connectOpts.host;\n      socket = tls.connect({\n        ...this.connectOpts,\n        servername: servername && net.isIP(servername) ? undefined : servername,\n      });\n    } else {\n      debug('Creating `net.Socket`: %o', this.connectOpts);\n      socket = net.connect(this.connectOpts);\n    }\n\n    const headers =\n      typeof this.proxyHeaders === 'function' ? this.proxyHeaders() : { ...this.proxyHeaders };\n    const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n    let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n\n    // Inject the `Proxy-Authorization` header if necessary.\n    if (proxy.username || proxy.password) {\n      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n      headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n    }\n\n    headers.Host = `${host}:${opts.port}`;\n\n    if (!headers['Proxy-Connection']) {\n      headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close';\n    }\n    for (const name of Object.keys(headers)) {\n      payload += `${name}: ${headers[name]}\\r\\n`;\n    }\n\n    const proxyResponsePromise = parseProxyResponse(socket);\n\n    socket.write(`${payload}\\r\\n`);\n\n    const { connect, buffered } = await proxyResponsePromise;\n    req.emit('proxyConnect', connect);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not EventEmitter in Node types\n    this.emit('proxyConnect', connect, req);\n\n    if (connect.statusCode === 200) {\n      req.once('socket', resume);\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = opts.servername || opts.host;\n        return tls.connect({\n          ...omit(opts, 'host', 'path', 'port'),\n          socket,\n          servername: net.isIP(servername) ? undefined : servername,\n        });\n      }\n\n      return socket;\n    }\n\n    // Some other status code that's not 200... need to re-play the HTTP\n    // header \"data\" events onto the socket once the HTTP machinery is\n    // attached so that the node core `http` can parse and handle the\n    // error status code.\n\n    // Close the original socket, and a new \"fake\" socket is returned\n    // instead, so that the proxy doesn't get the HTTP request\n    // written to it (which may contain `Authorization` headers or other\n    // sensitive data).\n    //\n    // See: https://hackerone.com/reports/541502\n    socket.destroy();\n\n    const fakeSocket = new net.Socket({ writable: false });\n    fakeSocket.readable = true;\n\n    // Need to wait for the \"socket\" event to re-play the \"data\" events.\n    req.once('socket', (s) => {\n      debug('Replaying proxy buffer for failed request');\n      // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n      // this point the HTTP module machinery has been hooked up for\n      // the user.\n      s.push(buffered);\n      s.push(null);\n    });\n\n    return fakeSocket;\n  }\n}HttpsProxyAgent.__initStatic();\n\nfunction resume(socket) {\n  socket.resume();\n}\n\nfunction omit(\n  obj,\n  ...keys\n)\n\n {\n  const ret = {}\n\n;\n  let key;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\n\nexport { HttpsProxyAgent };\n//# sourceMappingURL=index.js.map\n"],"names":["logger","Agent","URL","_nullishCoalesce","_optionalChain","tls","net","parseProxyResponse"],"mappings":"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","x_google_ignoreList":[0]}