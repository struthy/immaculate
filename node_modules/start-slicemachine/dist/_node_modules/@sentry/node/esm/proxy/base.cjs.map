{"version":3,"file":"base.cjs","sources":["../../../../../../../../node_modules/@sentry/node/esm/proxy/base.js"],"sourcesContent":["import { _nullishCoalesce } from '@sentry/utils';\nimport * as http from 'http';\nimport 'https';\n\n/**\n* This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n* With the following licence:\n*\n* (The MIT License)\n*\n* Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n*\n* Permission is hereby granted, free of charge, to any person obtaining\n* a copy of this software and associated documentation files (the\n* 'Software'), to deal in the Software without restriction, including\n* without limitation the rights to use, copy, modify, merge, publish,\n* distribute, sublicense, and/or sell copies of the Software, and to\n* permit persons to whom the Software is furnished to do so, subject to\n* the following conditions:*\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.*\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\n\nclass Agent extends http.Agent {\n\n  // Set by `http.Agent` - missing from `@types/node`\n\n  constructor(opts) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options) {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      if (typeof (options ).secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const { stack } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n\n  createSocket(req, options, cb) {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options),\n    };\n    Promise.resolve()\n      .then(() => this.connect(req, connectOpts))\n      .then(socket => {\n        if (socket instanceof http.Agent) {\n          // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n          return socket.addRequest(req, connectOpts);\n        }\n        this[INTERNAL].currentSocket = socket;\n        // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n        super.createSocket(req, options, cb);\n      }, cb);\n  }\n\n  createConnection() {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n\n  get defaultPort() {\n    return _nullishCoalesce(this[INTERNAL].defaultPort, () => ( (this.protocol === 'https:' ? 443 : 80)));\n  }\n\n  set defaultPort(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n\n  get protocol() {\n    return _nullishCoalesce(this[INTERNAL].protocol, () => ( (this.isSecureEndpoint() ? 'https:' : 'http:')));\n  }\n\n  set protocol(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\n\nexport { Agent };\n//# sourceMappingURL=base.js.map\n"],"names":["http","_nullishCoalesce"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAgCA,MAAM,WAAW,OAAO,wBAAwB;AAEhD,MAAM,cAAcA,gBAAK,MAAM;AAAA;AAAA,EAI7B,YAAY,MAAM;AAChB,UAAM,IAAI;AACV,SAAK,QAAQ,IAAI;EAClB;AAAA;AAAA;AAAA;AAAA,EAKD,iBAAiB,SAAS;AACxB,QAAI,SAAS;AAIX,UAAI,OAAQ,QAAU,mBAAmB,WAAW;AAClD,eAAO,QAAQ;AAAA,MAChB;AAKD,UAAI,OAAO,QAAQ,aAAa,UAAU;AACxC,eAAO,QAAQ,aAAa;AAAA,MAC7B;AAAA,IACF;AAKD,UAAM,EAAE,MAAK,IAAK,IAAI;AACtB,QAAI,OAAO,UAAU;AAAU,aAAO;AACtC,WAAO,MAAM,MAAM,IAAI,EAAE,KAAK,OAAK,EAAE,QAAQ,YAAY,MAAM,MAAM,EAAE,QAAQ,aAAa,MAAM,EAAE;AAAA,EACrG;AAAA,EAED,aAAa,KAAK,SAAS,IAAI;AAC7B,UAAM,cAAc;AAAA,MAClB,GAAG;AAAA,MACH,gBAAgB,KAAK,iBAAiB,OAAO;AAAA,IACnD;AACI,YAAQ,QAAS,EACd,KAAK,MAAM,KAAK,QAAQ,KAAK,WAAW,CAAC,EACzC,KAAK,YAAU;AACd,UAAI,kBAAkBA,gBAAK,OAAO;AAEhC,eAAO,OAAO,WAAW,KAAK,WAAW;AAAA,MAC1C;AACD,WAAK,QAAQ,EAAE,gBAAgB;AAE/B,YAAM,aAAa,KAAK,SAAS,EAAE;AAAA,IACpC,GAAE,EAAE;AAAA,EACR;AAAA,EAED,mBAAmB;AACjB,UAAM,SAAS,KAAK,QAAQ,EAAE;AAC9B,SAAK,QAAQ,EAAE,gBAAgB;AAC/B,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACrE;AACD,WAAO;AAAA,EACR;AAAA,EAED,IAAI,cAAc;AAChB,WAAOC,kCAAiB,KAAK,QAAQ,EAAE,aAAa,MAAS,KAAK,aAAa,WAAW,MAAM,EAAI;AAAA,EACrG;AAAA,EAED,IAAI,YAAY,GAAG;AACjB,QAAI,KAAK,QAAQ,GAAG;AAClB,WAAK,QAAQ,EAAE,cAAc;AAAA,IAC9B;AAAA,EACF;AAAA,EAED,IAAI,WAAW;AACb,WAAOA,kCAAiB,KAAK,QAAQ,EAAE,UAAU,MAAS,KAAK,iBAAkB,IAAG,WAAW,OAAS;AAAA,EACzG;AAAA,EAED,IAAI,SAAS,GAAG;AACd,QAAI,KAAK,QAAQ,GAAG;AAClB,WAAK,QAAQ,EAAE,WAAW;AAAA,IAC3B;AAAA,EACF;AACH;;","x_google_ignoreList":[0]}