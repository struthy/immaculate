"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const path = require("node:path");
const fs = require("node:fs/promises");
const castArray = require("./castArray.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const path__namespace = /* @__PURE__ */ _interopNamespaceDefault(path);
const fs__namespace = /* @__PURE__ */ _interopNamespaceDefault(fs);
const locateFileUpward = async (filePathOrPaths, { startDir = process.cwd(), stopDir = path__namespace.resolve(startDir, "/"), _originalStartDir } = {}) => {
  const originalStartDir = _originalStartDir ?? startDir;
  const filePaths = castArray.castArray(filePathOrPaths);
  for (const filePath of filePaths) {
    const resolvedFilePath = path__namespace.resolve(startDir, filePath);
    try {
      await fs__namespace.access(resolvedFilePath);
      return resolvedFilePath;
    } catch {
      continue;
    }
  }
  if (startDir === stopDir) {
    const formattedFilePaths = filePaths.map((filePath) => "`" + filePath + "`").join(" or ");
    throw new Error(`Could not locate ${formattedFilePaths} between \`${originalStartDir}\` and \`${stopDir}\`.`);
  }
  return locateFileUpward(filePathOrPaths, {
    startDir: path__namespace.resolve(startDir, ".."),
    stopDir,
    _originalStartDir: originalStartDir
  });
};
exports.locateFileUpward = locateFileUpward;
//# sourceMappingURL=locateFileUpward.cjs.map
