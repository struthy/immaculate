import * as path from "node:path";
import express from "express";
import bodyParser from "body-parser";
import "http-proxy-middleware";
import serveStatic from "serve-static";
import cors from "cors";
import { createSliceMachineManagerMiddleware, createPrismicAuthManagerMiddleware } from "@slicemachine/manager";
import { rpc, server } from "./sentryErrorHandlers.js";
import { sentryFrontendTunnel } from "./sentryFrontendTunnel.js";
import { checkIsSentryEnabled } from "./checkIsSentryEnabled.js";
import { setUser } from './../_node_modules/@sentry/node/_node_modules/@sentry/core/esm/exports.js';
const createSliceMachineExpressApp = async (args) => {
  const isTelemetryEnabled = await args.sliceMachineManager.telemetry.checkIsTelemetryEnabled();
  const app = express();
  app.use(cors());
  app.use("/_manager", createSliceMachineManagerMiddleware({
    sliceMachineManager: args.sliceMachineManager,
    onError: isTelemetryEnabled ? rpc : void 0
  }));
  app.use("/api/auth", createPrismicAuthManagerMiddleware({
    prismicAuthManager: args.sliceMachineManager.getPrismicAuthManager(),
    onLoginCallback: async () => {
      const profile = await args.sliceMachineManager.user.getProfile();
      await args.sliceMachineManager.telemetry.identify({
        userID: profile.shortId,
        intercomHash: profile.intercomHash
      });
      if (checkIsSentryEnabled()) {
        setUser({ id: profile.shortId });
      }
      try {
        await args.sliceMachineManager.screenshots.initS3ACL();
      } catch (error) {
      }
    }
  }));
  app.use("/api/t", bodyParser.text({ type: "*/*" }), sentryFrontendTunnel);
  {
    const sliceMachineDir = await args.sliceMachineManager.project.locateSliceMachineUIDir();
    const sliceMachineOutDir = path.resolve(sliceMachineDir, "out");
    app.use(serveStatic(sliceMachineOutDir));
    app.get("/changelog", (_req, res) => {
      res.sendFile(path.join(sliceMachineOutDir, "changelog.html"));
    });
    app.get("/labs", (_req, res) => {
      res.sendFile(path.join(sliceMachineOutDir, "labs.html"));
    });
    app.get("/settings", (_req, res) => {
      res.sendFile(path.join(sliceMachineOutDir, "settings.html"));
    });
    app.get("/slices", (_req, res) => {
      res.sendFile(path.join(sliceMachineOutDir, "slices.html"));
    });
    app.get("/changes", (_req, res) => {
      res.sendFile(path.join(sliceMachineOutDir, "changes.html"));
    });
    app.get("/page-types/:id", (_req, res) => {
      res.sendFile(path.join(sliceMachineOutDir, "page-types/[pageTypeId].html"));
    });
    app.get("/custom-types", (_req, res) => {
      res.sendFile(path.join(sliceMachineOutDir, "custom-types.html"));
    });
    app.get("/custom-types/:id", (_req, res) => {
      res.sendFile(path.join(sliceMachineOutDir, "custom-types/[customTypeId].html"));
    });
    app.get("/slices/:lib/:sliceID/:variation", (_req, res) => {
      res.sendFile(path.join(sliceMachineOutDir, "slices/[lib]/[sliceName]/[variation].html"));
    });
    app.get("/slices/:lib/:sliceID/:variation/simulator", (_req, res) => {
      res.sendFile(path.join(sliceMachineOutDir, "slices/[lib]/[sliceName]/[variation]/simulator.html"));
    });
  }
  if (isTelemetryEnabled) {
    app.use(server);
  }
  return app;
};
export {
  createSliceMachineExpressApp
};
//# sourceMappingURL=createSliceMachineExpressApp.js.map
