{"version":3,"file":"createSliceMachineExpressApp.js","sources":["../../../src/lib/createSliceMachineExpressApp.ts"],"sourcesContent":["import * as path from \"node:path\";\n\nimport * as Sentry from \"@sentry/node\";\nimport express, { Express } from \"express\";\nimport bodyParser from \"body-parser\";\nimport { createProxyMiddleware } from \"http-proxy-middleware\";\nimport serveStatic from \"serve-static\";\nimport cors from \"cors\";\n\nimport {\n\tSliceMachineManager,\n\tcreatePrismicAuthManagerMiddleware,\n\tcreateSliceMachineManagerMiddleware,\n} from \"@slicemachine/manager\";\n\nimport * as sentryErrorHandlers from \"./sentryErrorHandlers\";\nimport { sentryFrontendTunnel } from \"./sentryFrontendTunnel\";\nimport { checkIsSentryEnabled } from \"./checkIsSentryEnabled\";\n\ntype CreateSliceMachineExpressAppArgs = {\n\tsliceMachineManager: SliceMachineManager;\n};\n\n/**\n * Creates an Express app to handle the following:\n *\n * - Serve the Slice Machine app.\n * - Expose a given Slice Machine manager to non-Node.js environments, like the\n *   browser.\n *\n * The Slice Machine app is served from the project's Slice Machine module\n * installation.\n *\n * If `NODE_ENV` is `development`, the Slice Machine app is served via a proxy\n * to Next.js's development server. Slice Machine must be running on port 3000.\n *\n * @param args - Configuration for the server.\n *\n * @returns A standard Express app.\n */\nexport const createSliceMachineExpressApp = async (\n\targs: CreateSliceMachineExpressAppArgs,\n): Promise<Express> => {\n\tconst isTelemetryEnabled =\n\t\tawait args.sliceMachineManager.telemetry.checkIsTelemetryEnabled();\n\n\tconst app = express();\n\n\tapp.use(cors());\n\n\tapp.use(\n\t\t\"/_manager\",\n\t\tcreateSliceMachineManagerMiddleware({\n\t\t\tsliceMachineManager: args.sliceMachineManager,\n\t\t\tonError: isTelemetryEnabled ? sentryErrorHandlers.rpc : undefined,\n\t\t}),\n\t);\n\n\tapp.use(\n\t\t\"/api/auth\",\n\t\tcreatePrismicAuthManagerMiddleware({\n\t\t\tprismicAuthManager: args.sliceMachineManager.getPrismicAuthManager(),\n\t\t\tonLoginCallback: async () => {\n\t\t\t\tconst profile = await args.sliceMachineManager.user.getProfile();\n\t\t\t\tawait args.sliceMachineManager.telemetry.identify({\n\t\t\t\t\tuserID: profile.shortId,\n\t\t\t\t\tintercomHash: profile.intercomHash,\n\t\t\t\t});\n\t\t\t\tif (checkIsSentryEnabled()) {\n\t\t\t\t\tSentry.setUser({ id: profile.shortId });\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait args.sliceMachineManager.screenshots.initS3ACL();\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// noop - We'll try again before uploading a screenshot.\n\t\t\t\t}\n\t\t\t},\n\t\t}),\n\t);\n\n\tapp.use(\"/api/t\", bodyParser.text({ type: \"*/*\" }), sentryFrontendTunnel);\n\n\tif (import.meta.env.DEV) {\n\t\tapp.use(\n\t\t\t\"/\",\n\t\t\tcreateProxyMiddleware({\n\t\t\t\ttarget: \"http://localhost:3000\",\n\t\t\t\tchangeOrigin: true,\n\t\t\t\tws: true,\n\t\t\t}),\n\t\t);\n\t} else {\n\t\tconst sliceMachineDir =\n\t\t\tawait args.sliceMachineManager.project.locateSliceMachineUIDir();\n\t\tconst sliceMachineOutDir = path.resolve(sliceMachineDir, \"out\");\n\n\t\tapp.use(serveStatic(sliceMachineOutDir));\n\n\t\tapp.get(\"/changelog\", (_req, res) => {\n\t\t\tres.sendFile(path.join(sliceMachineOutDir, \"changelog.html\"));\n\t\t});\n\n\t\tapp.get(\"/labs\", (_req, res) => {\n\t\t\tres.sendFile(path.join(sliceMachineOutDir, \"labs.html\"));\n\t\t});\n\n\t\tapp.get(\"/settings\", (_req, res) => {\n\t\t\tres.sendFile(path.join(sliceMachineOutDir, \"settings.html\"));\n\t\t});\n\n\t\tapp.get(\"/slices\", (_req, res) => {\n\t\t\tres.sendFile(path.join(sliceMachineOutDir, \"slices.html\"));\n\t\t});\n\n\t\tapp.get(\"/changes\", (_req, res) => {\n\t\t\tres.sendFile(path.join(sliceMachineOutDir, \"changes.html\"));\n\t\t});\n\n\t\tapp.get(\"/page-types/:id\", (_req, res) => {\n\t\t\tres.sendFile(\n\t\t\t\tpath.join(sliceMachineOutDir, \"page-types/[pageTypeId].html\"),\n\t\t\t);\n\t\t});\n\n\t\tapp.get(\"/custom-types\", (_req, res) => {\n\t\t\tres.sendFile(path.join(sliceMachineOutDir, \"custom-types.html\"));\n\t\t});\n\n\t\tapp.get(\"/custom-types/:id\", (_req, res) => {\n\t\t\tres.sendFile(\n\t\t\t\tpath.join(sliceMachineOutDir, \"custom-types/[customTypeId].html\"),\n\t\t\t);\n\t\t});\n\n\t\tapp.get(\"/slices/:lib/:sliceID/:variation\", (_req, res) => {\n\t\t\tres.sendFile(\n\t\t\t\tpath.join(\n\t\t\t\t\tsliceMachineOutDir,\n\t\t\t\t\t\"slices/[lib]/[sliceName]/[variation].html\",\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\n\t\tapp.get(\"/slices/:lib/:sliceID/:variation/simulator\", (_req, res) => {\n\t\t\tres.sendFile(\n\t\t\t\tpath.join(\n\t\t\t\t\tsliceMachineOutDir,\n\t\t\t\t\t\"slices/[lib]/[sliceName]/[variation]/simulator.html\",\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\t}\n\n\tif (isTelemetryEnabled) {\n\t\tapp.use(sentryErrorHandlers.server);\n\t}\n\n\treturn app;\n};\n"],"names":["sentryErrorHandlers.rpc","Sentry.setUser","sentryErrorHandlers.server"],"mappings":";;;;;;;;;;;AAwCa,MAAA,+BAA+B,OAC3C,SACqB;AACrB,QAAM,qBACL,MAAM,KAAK,oBAAoB,UAAU,wBAAuB;AAEjE,QAAM,MAAM;AAER,MAAA,IAAI,MAAM;AAEV,MAAA,IACH,aACA,oCAAoC;AAAA,IACnC,qBAAqB,KAAK;AAAA,IAC1B,SAAS,qBAAqBA,MAA0B;AAAA,EACxD,CAAA,CAAC;AAGC,MAAA,IACH,aACA,mCAAmC;AAAA,IAClC,oBAAoB,KAAK,oBAAoB,sBAAuB;AAAA,IACpE,iBAAiB,YAAW;AAC3B,YAAM,UAAU,MAAM,KAAK,oBAAoB,KAAK,WAAU;AACxD,YAAA,KAAK,oBAAoB,UAAU,SAAS;AAAA,QACjD,QAAQ,QAAQ;AAAA,QAChB,cAAc,QAAQ;AAAA,MAAA,CACtB;AACD,UAAI,wBAAwB;AAC3BC,gBAAe,EAAE,IAAI,QAAQ,QAAS,CAAA;AAAA,MACtC;AAEG,UAAA;AACG,cAAA,KAAK,oBAAoB,YAAY;eACnC;MAER;AAAA,IACF;AAAA,EACA,CAAA,CAAC;AAGC,MAAA,IAAI,UAAU,WAAW,KAAK,EAAE,MAAM,MAAA,CAAO,GAAG,oBAAoB;AAWjE;AACN,UAAM,kBACL,MAAM,KAAK,oBAAoB,QAAQ,wBAAuB;AAC/D,UAAM,qBAAqB,KAAK,QAAQ,iBAAiB,KAAK;AAE1D,QAAA,IAAI,YAAY,kBAAkB,CAAC;AAEvC,QAAI,IAAI,cAAc,CAAC,MAAM,QAAO;AACnC,UAAI,SAAS,KAAK,KAAK,oBAAoB,gBAAgB,CAAC;AAAA,IAAA,CAC5D;AAED,QAAI,IAAI,SAAS,CAAC,MAAM,QAAO;AAC9B,UAAI,SAAS,KAAK,KAAK,oBAAoB,WAAW,CAAC;AAAA,IAAA,CACvD;AAED,QAAI,IAAI,aAAa,CAAC,MAAM,QAAO;AAClC,UAAI,SAAS,KAAK,KAAK,oBAAoB,eAAe,CAAC;AAAA,IAAA,CAC3D;AAED,QAAI,IAAI,WAAW,CAAC,MAAM,QAAO;AAChC,UAAI,SAAS,KAAK,KAAK,oBAAoB,aAAa,CAAC;AAAA,IAAA,CACzD;AAED,QAAI,IAAI,YAAY,CAAC,MAAM,QAAO;AACjC,UAAI,SAAS,KAAK,KAAK,oBAAoB,cAAc,CAAC;AAAA,IAAA,CAC1D;AAED,QAAI,IAAI,mBAAmB,CAAC,MAAM,QAAO;AACxC,UAAI,SACH,KAAK,KAAK,oBAAoB,8BAA8B,CAAC;AAAA,IAAA,CAE9D;AAED,QAAI,IAAI,iBAAiB,CAAC,MAAM,QAAO;AACtC,UAAI,SAAS,KAAK,KAAK,oBAAoB,mBAAmB,CAAC;AAAA,IAAA,CAC/D;AAED,QAAI,IAAI,qBAAqB,CAAC,MAAM,QAAO;AAC1C,UAAI,SACH,KAAK,KAAK,oBAAoB,kCAAkC,CAAC;AAAA,IAAA,CAElE;AAED,QAAI,IAAI,oCAAoC,CAAC,MAAM,QAAO;AACzD,UAAI,SACH,KAAK,KACJ,oBACA,2CAA2C,CAC3C;AAAA,IAAA,CAEF;AAED,QAAI,IAAI,8CAA8C,CAAC,MAAM,QAAO;AACnE,UAAI,SACH,KAAK,KACJ,oBACA,qDAAqD,CACrD;AAAA,IAAA,CAEF;AAAA,EACD;AAED,MAAI,oBAAoB;AACnB,QAAA,IAAIC,MAA0B;AAAA,EAClC;AAEM,SAAA;AACR;"}