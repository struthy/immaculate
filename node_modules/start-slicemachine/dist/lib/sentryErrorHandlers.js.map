{"version":3,"file":"sentryErrorHandlers.js","sources":["../../../src/lib/sentryErrorHandlers.ts"],"sourcesContent":["import type { ErrorRequestHandler } from \"express\";\nimport * as Sentry from \"@sentry/node\";\n\nimport { CreateSliceMachineManagerMiddlewareArgs } from \"@slicemachine/manager\";\n\nimport { checkIsSentryEnabled } from \"./checkIsSentryEnabled\";\n\nexport const node = (name: string, error: unknown): void => {\n\tif (checkIsSentryEnabled()) {\n\t\tSentry.withScope(function (scope) {\n\t\t\tscope.setTransactionName(name);\n\t\t\tSentry.captureException(error, {\n\t\t\t\t...(error instanceof Error ? { extra: { cause: error.cause } } : {}),\n\t\t\t});\n\t\t});\n\t}\n};\n\nexport const server: ErrorRequestHandler = (error, req, _res, next): void => {\n\tnode(req.path, error);\n\tnext();\n};\n\nexport const rpc: CreateSliceMachineManagerMiddlewareArgs[\"onError\"] = (\n\targs,\n) => {\n\tnode(args.procedurePath.join(\".\"), args.error);\n};\n"],"names":["Sentry.withScope","Sentry.captureException"],"mappings":";;AAOa,MAAA,OAAO,CAAC,MAAc,UAAwB;AAC1D,MAAI,wBAAwB;AACpBA,cAAU,SAAU,OAAK;AAC/B,YAAM,mBAAmB,IAAI;AAC7BC,uBAAwB,OAAO;AAAA,QAC9B,GAAI,iBAAiB,QAAQ,EAAE,OAAO,EAAE,OAAO,MAAM,YAAY,CAAA;AAAA,MAAA,CACjE;AAAA,IAAA,CACD;AAAA,EACD;AACF;AAEO,MAAM,SAA8B,CAAC,OAAO,KAAK,MAAM,SAAc;AACtE,OAAA,IAAI,MAAM,KAAK;;AAErB;AAEa,MAAA,MAA0D,CACtE,SACG;AACH,OAAK,KAAK,cAAc,KAAK,GAAG,GAAG,KAAK,KAAK;AAC9C;"}