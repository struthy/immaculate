"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const errors = require("./errors.cjs");
const messages = require("./messages.cjs");
const channelNetworkDefaultOptions = {
  debug: false,
  maximumRequestConcurrency: 20,
  defaultTimeout: 5e3,
  requestIDPrefix: "channel-"
};
class ChannelNetwork {
  constructor(requestHandlers, options) {
    __publicField(this, "requestHandlers");
    __publicField(this, "options");
    __publicField(this, "_port", null);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    __publicField(this, "_pendingRequests", /* @__PURE__ */ new Map());
    this.requestHandlers = requestHandlers;
    this.options = { ...channelNetworkDefaultOptions, ...options };
  }
  get port() {
    if (!this._port) {
      throw new errors.PortNotSetError();
    }
    return this._port;
  }
  set port(port) {
    if (this._port) {
      this._port.onmessage = null;
    }
    this._port = port;
    if (this._port) {
      this._port.onmessage = this.onMessage.bind(this);
    }
  }
  createRequestMessage(type, data) {
    return messages.createRequestMessage(type, data, this.options.requestIDPrefix);
  }
  async onMessage(event) {
    if (this.options.debug) {
      console.debug(event.data);
    }
    try {
      const message = messages.validateMessage(event.data);
      if (messages.isRequestMessage(message)) {
        if (!this.requestHandlers[message.type]) {
          this.postResponse(messages.createErrorResponseMessage(message.requestID, void 0, 501));
        } else {
          try {
            const response = await this.requestHandlers[message.type](message, {
              success: messages.createSuccessResponseMessage.bind(this, message.requestID),
              error: messages.createErrorResponseMessage.bind(this, message.requestID)
            });
            this.postResponse(response);
          } catch (error) {
            this.postResponse(messages.createErrorResponseMessage(message.requestID, error, 500));
          }
        }
      } else {
        if (!this._pendingRequests.has(message.requestID)) {
          console.error(`Unknown request ID received in response: ${JSON.stringify(message)}`);
        } else {
          this._pendingRequests.get(message.requestID)(message);
          this._pendingRequests.delete(message.requestID);
        }
      }
    } catch (error) {
      if (error instanceof TypeError) {
        console.warn(error.message);
      } else {
        throw error;
      }
    }
  }
  postRequest(request, postMessage = (request2) => this.port.postMessage(request2), options = {}) {
    if (this.options.debug) {
      console.debug(request);
    }
    if (this._pendingRequests.size >= this.options.maximumRequestConcurrency) {
      throw new errors.TooManyConcurrentRequestsError(request);
    }
    return new Promise((resolve, reject) => {
      const requestTimeout = setTimeout(() => {
        if (this._pendingRequests.has(request.requestID)) {
          this._pendingRequests.delete(request.requestID);
        }
        reject(new errors.RequestTimeoutError(request));
      }, options.timeout || this.options.defaultTimeout);
      this._pendingRequests.set(request.requestID, (response) => {
        clearTimeout(requestTimeout);
        messages.isSuccessResponseMessage(response) ? resolve(response) : reject(new errors.ResponseError(response));
      });
      postMessage(request);
    });
  }
  postResponse(response, postMessage = (response2) => this.port.postMessage(response2)) {
    if (this.options.debug) {
      console.debug(response);
    }
    postMessage(response);
    return response;
  }
}
exports.ChannelNetwork = ChannelNetwork;
exports.channelNetworkDefaultOptions = channelNetworkDefaultOptions;
//# sourceMappingURL=ChannelNetwork.cjs.map
