import statuses from "statuses";
let requestID = 0;
const createRequestMessage = (type, data, prefix = "") => {
  return {
    requestID: `${prefix}${requestID++}`,
    type,
    data
  };
};
const createSuccessResponseMessage = (requestID2, data, status = 200) => {
  var _a;
  if (status >= 400) {
    throw new TypeError(`Invalid success status code, expected status to be within \`[100;400[\`, got \`${status}\``);
  }
  return {
    requestID: requestID2,
    status,
    msg: ((_a = statuses.message[status]) == null ? void 0 : _a.replace(/\.$/, "").toLowerCase()) ?? "",
    data
  };
};
const createErrorResponseMessage = (requestID2, error, status = 400) => {
  var _a;
  if (status < 400) {
    throw new TypeError(`Invalid error status code, expected status to be within \`[500;600[\`, got \`${status}\``);
  }
  return {
    requestID: requestID2,
    status,
    msg: ((_a = statuses.message[status]) == null ? void 0 : _a.replace(/\.$/, "").toLowerCase()) ?? "",
    error
  };
};
const validateMessage = (message) => {
  if (typeof message !== "object" || message === null) {
    throw new TypeError(`Invalid message received, expected message to be of type \`object\`, got \`${typeof message}\``);
  } else if (!Object.keys(message).every((key) => ["requestID", "type", "data", "status", "msg", "error"].includes(key))) {
    throw new TypeError(`Invalid message received: ${JSON.stringify(message)}`);
  } else if (typeof message.requestID !== "string") {
    throw new TypeError(`Invalid message received, expected \`message.requestID\` to be of type \`string\`, got \`${typeof message.id}\``);
  }
  return message;
};
const isRequestMessage = (message) => {
  return "type" in message;
};
const isResponseMessage = (message) => {
  return !("type" in message);
};
const isSuccessResponseMessage = (message) => {
  return isResponseMessage(message) && !("error" in message);
};
const isErrorResponseMessage = (message) => {
  return isResponseMessage(message) && !("data" in message);
};
export {
  createErrorResponseMessage,
  createRequestMessage,
  createSuccessResponseMessage,
  isErrorResponseMessage,
  isRequestMessage,
  isResponseMessage,
  isSuccessResponseMessage,
  validateMessage
};
//# sourceMappingURL=messages.js.map
