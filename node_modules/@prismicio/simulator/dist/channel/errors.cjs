"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
class ResponseError extends Error {
  constructor(errorResponse) {
    super(errorResponse.msg);
    __publicField(this, "response");
    this.response = errorResponse;
  }
}
class ConnectionTimeoutError extends Error {
  constructor() {
    super("Connection timed out");
  }
}
class TooManyConcurrentRequestsError extends Error {
  constructor(request) {
    super(`Too many concurrent requests`);
    __publicField(this, "request");
    this.request = request;
  }
}
class RequestTimeoutError extends Error {
  constructor(request) {
    super(`Request \`${request.requestID}\` timed out`);
    __publicField(this, "request");
    this.request = request;
  }
}
class NotReadyError extends Error {
}
class PortNotSetError extends Error {
  constructor() {
    super("Port is not set");
  }
}
class ChannelNotSetError extends Error {
  constructor() {
    super("Channel is not set");
  }
}
exports.ChannelNotSetError = ChannelNotSetError;
exports.ConnectionTimeoutError = ConnectionTimeoutError;
exports.NotReadyError = NotReadyError;
exports.PortNotSetError = PortNotSetError;
exports.RequestTimeoutError = RequestTimeoutError;
exports.ResponseError = ResponseError;
exports.TooManyConcurrentRequestsError = TooManyConcurrentRequestsError;
//# sourceMappingURL=errors.cjs.map
