{"version":3,"file":"ChannelNetwork.cjs","sources":["../../../src/channel/ChannelNetwork.ts"],"sourcesContent":["import {\n\tExtractErrorResponseMessage,\n\tExtractSuccessResponseMessage,\n\tRequestMessage,\n\tTransactionsHandlers,\n\tUnknownRequestMessage,\n\tUnknownResponseMessage,\n\tUnknownTransaction,\n} from \"./types\";\n\nimport {\n\tPortNotSetError,\n\tRequestTimeoutError,\n\tResponseError,\n\tTooManyConcurrentRequestsError,\n} from \"./errors\";\n\nimport {\n\tcreateErrorResponseMessage,\n\tcreateRequestMessage,\n\tcreateSuccessResponseMessage,\n\tisRequestMessage,\n\tisSuccessResponseMessage,\n\tvalidateMessage,\n} from \"./messages\";\n\nexport type PostRequestOptions = {\n\ttimeout?: number;\n};\n\nexport type ChannelNetworkOptions = {\n\tdebug: boolean;\n\tmaximumRequestConcurrency: number;\n\tdefaultTimeout: number;\n\trequestIDPrefix: string;\n};\n\nexport const channelNetworkDefaultOptions: ChannelNetworkOptions = {\n\tdebug: false,\n\tmaximumRequestConcurrency: 20,\n\tdefaultTimeout: 5000,\n\trequestIDPrefix: \"channel-\",\n};\n\nexport abstract class ChannelNetwork<\n\tTPartnerTransactions extends Record<string, UnknownTransaction> = Record<\n\t\tstring,\n\t\tnever\n\t>,\n\tTOptions extends Record<string, unknown> = Record<string, unknown>,\n> {\n\tpublic requestHandlers: TransactionsHandlers<TPartnerTransactions>;\n\tpublic options: ChannelNetworkOptions & TOptions;\n\n\tprivate _port: MessagePort | null = null;\n\tprotected get port(): MessagePort {\n\t\tif (!this._port) {\n\t\t\tthrow new PortNotSetError();\n\t\t}\n\n\t\treturn this._port;\n\t}\n\tprotected set port(port: MessagePort | null) {\n\t\t// Destroy old port\n\t\tif (this._port) {\n\t\t\tthis._port.onmessage = null;\n\t\t}\n\n\t\tthis._port = port;\n\t\tif (this._port) {\n\t\t\tthis._port.onmessage = this.onMessage.bind(this);\n\t\t}\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tprivate _pendingRequests: Map<string, (response: any) => void> = new Map();\n\n\tconstructor(\n\t\trequestHandlers: TransactionsHandlers<TPartnerTransactions>,\n\t\toptions: Partial<ChannelNetworkOptions> & TOptions,\n\t) {\n\t\tthis.requestHandlers = requestHandlers;\n\t\tthis.options = { ...channelNetworkDefaultOptions, ...options };\n\t}\n\n\tpublic createRequestMessage<TType extends string = string, TData = undefined>(\n\t\ttype: TType,\n\t\tdata: TData,\n\t): RequestMessage<TType, TData> {\n\t\treturn createRequestMessage(type, data, this.options.requestIDPrefix);\n\t}\n\n\tprotected async onMessage(event: MessageEvent<unknown>): Promise<void> {\n\t\tif (this.options.debug) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.debug(event.data);\n\t\t}\n\n\t\ttry {\n\t\t\tconst message = validateMessage(event.data);\n\n\t\t\tif (isRequestMessage(message)) {\n\t\t\t\tif (!this.requestHandlers[message.type]) {\n\t\t\t\t\tthis.postResponse(\n\t\t\t\t\t\tcreateErrorResponseMessage(message.requestID, undefined, 501),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// TODO: Figure out why type cannot be inferred on its own anymore\n\t\t\t\t\t\tconst response = await this.requestHandlers[message.type](message, {\n\t\t\t\t\t\t\tsuccess: createSuccessResponseMessage.bind(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tmessage.requestID,\n\t\t\t\t\t\t\t) as Parameters<\n\t\t\t\t\t\t\t\t(typeof this.requestHandlers)[string]\n\t\t\t\t\t\t\t>[1][\"success\"],\n\t\t\t\t\t\t\terror: createErrorResponseMessage.bind(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tmessage.requestID,\n\t\t\t\t\t\t\t) as Parameters<\n\t\t\t\t\t\t\t\t(typeof this.requestHandlers)[string]\n\t\t\t\t\t\t\t>[1][\"error\"],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.postResponse(response);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.postResponse(\n\t\t\t\t\t\t\tcreateErrorResponseMessage(message.requestID, error, 500),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!this._pendingRequests.has(message.requestID)) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`Unknown request ID received in response: ${JSON.stringify(\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t)}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Pending requests are checked in previous statement\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\tthis._pendingRequests.get(message.requestID)!(message);\n\t\t\t\t\tthis._pendingRequests.delete(message.requestID);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error instanceof TypeError) {\n\t\t\t\tconsole.warn(error.message);\n\t\t\t} else {\n\t\t\t\t// Should not be possible, but who knows :shrug:\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected postRequest<\n\t\tTRequest extends UnknownRequestMessage,\n\t\tTResponse extends UnknownResponseMessage,\n\t>(\n\t\trequest: TRequest,\n\t\tpostMessage = (request: TRequest): void => this.port.postMessage(request),\n\t\toptions: PostRequestOptions = {},\n\t): Promise<ExtractSuccessResponseMessage<TResponse>> {\n\t\tif (this.options.debug) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.debug(request);\n\t\t}\n\n\t\tif (this._pendingRequests.size >= this.options.maximumRequestConcurrency) {\n\t\t\tthrow new TooManyConcurrentRequestsError(request);\n\t\t}\n\n\t\treturn new Promise<ExtractSuccessResponseMessage<TResponse>>(\n\t\t\t(resolve, reject) => {\n\t\t\t\tconst requestTimeout = setTimeout(() => {\n\t\t\t\t\tif (this._pendingRequests.has(request.requestID)) {\n\t\t\t\t\t\tthis._pendingRequests.delete(request.requestID);\n\t\t\t\t\t}\n\t\t\t\t\treject(new RequestTimeoutError(request));\n\t\t\t\t}, options.timeout || this.options.defaultTimeout);\n\n\t\t\t\tthis._pendingRequests.set(\n\t\t\t\t\trequest.requestID,\n\t\t\t\t\t(response: TResponse): void => {\n\t\t\t\t\t\tclearTimeout(requestTimeout);\n\n\t\t\t\t\t\tisSuccessResponseMessage(response)\n\t\t\t\t\t\t\t? resolve(response as ExtractSuccessResponseMessage<TResponse>)\n\t\t\t\t\t\t\t: reject(\n\t\t\t\t\t\t\t\t\tnew ResponseError(\n\t\t\t\t\t\t\t\t\t\tresponse as ExtractErrorResponseMessage<TResponse>,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t  );\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tpostMessage(request);\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected postResponse<TResponse extends UnknownResponseMessage>(\n\t\tresponse: TResponse,\n\t\tpostMessage = (response: TResponse): void =>\n\t\t\tthis.port.postMessage(response),\n\t): TResponse {\n\t\tif (this.options.debug) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.debug(response);\n\t\t}\n\n\t\tpostMessage(response);\n\n\t\treturn response;\n\t}\n}\n"],"names":["PortNotSetError","createRequestMessage","validateMessage","isRequestMessage","createErrorResponseMessage","createSuccessResponseMessage","request","TooManyConcurrentRequestsError","RequestTimeoutError","isSuccessResponseMessage","ResponseError","response"],"mappings":"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"}