{"version":3,"file":"SimulatorClient.cjs","sources":["../../src/SimulatorClient.ts"],"sourcesContent":["import {\n\tAPIRequestType,\n\tAPITransactions,\n\tClientRequestType,\n\tClientTransactions,\n} from \"./types\";\n\nimport { SimulatorAPIOptions } from \"./SimulatorAPI\";\nimport {\n\tAllChannelEmitterOptions,\n\tChannelEmitter,\n\tTransactionMethod,\n\tTransactionsHandlers,\n\tTransactionsMethods,\n} from \"./channel\";\n\nexport const simulatorClientDefaultOptions: Partial<AllChannelEmitterOptions> =\n\t{\n\t\trequestIDPrefix: \"client-\",\n\t};\n\nexport class SimulatorClient\n\textends ChannelEmitter<\n\t\tAPITransactions,\n\t\tPartial<AllChannelEmitterOptions>,\n\t\tSimulatorAPIOptions\n\t>\n\timplements TransactionsMethods<ClientTransactions>\n{\n\tconstructor(\n\t\ttarget: HTMLIFrameElement,\n\t\trequestHandlers?: Partial<TransactionsHandlers<APITransactions>>,\n\t\toptions?: Partial<AllChannelEmitterOptions>,\n\t) {\n\t\t// True if `options.debug` is true or `debug=true` is among query parameters\n\t\tconst debug =\n\t\t\toptions?.debug ||\n\t\t\t/[?&]debug=true/i.test(decodeURIComponent(window.location.search));\n\n\t\tsuper(\n\t\t\ttarget,\n\t\t\t{\n\t\t\t\t[APIRequestType.SetActiveSlice]: (_req, res) => {\n\t\t\t\t\treturn res.success();\n\t\t\t\t},\n\t\t\t\t[APIRequestType.SetSliceZoneSize]: (_req, res) => {\n\t\t\t\t\treturn res.success();\n\t\t\t\t},\n\t\t\t\t...requestHandlers,\n\t\t\t},\n\t\t\t{\n\t\t\t\t...simulatorClientDefaultOptions,\n\t\t\t\t...options,\n\t\t\t\tdebug,\n\t\t\t},\n\t\t);\n\n\t\t// Append client to window object\n\t\tif (debug) {\n\t\t\twindow.prismic ||= {};\n\t\t\twindow.prismic.sliceSimulator ||= {};\n\t\t\twindow.prismic.sliceSimulator.client ||= [];\n\t\t\twindow.prismic.sliceSimulator.client.push(this);\n\t\t}\n\t}\n\n\t[ClientRequestType.Ping]: TransactionMethod<\n\t\tClientTransactions[ClientRequestType.Ping]\n\t> = async () => {\n\t\treturn await this.postFormattedRequest(ClientRequestType.Ping);\n\t};\n\n\t[ClientRequestType.SetSliceZone]: TransactionMethod<\n\t\tClientTransactions[ClientRequestType.SetSliceZone]\n\t> = async (data) => {\n\t\treturn await this.postFormattedRequest(\n\t\t\tClientRequestType.SetSliceZone,\n\t\t\tdata,\n\t\t);\n\t};\n\n\t[ClientRequestType.ScrollToSlice]: TransactionMethod<\n\t\tClientTransactions[ClientRequestType.ScrollToSlice]\n\t> = async (data) => {\n\t\treturn await this.postFormattedRequest(\n\t\t\tClientRequestType.ScrollToSlice,\n\t\t\tdata,\n\t\t);\n\t};\n}\n"],"names":["ChannelEmitter","APIRequestType","ClientRequestType","_a","_b"],"mappings":";;;;;;;;;;;;;AAgBO,MAAM,gCACZ;AAAA,EACC,iBAAiB;;AAGb,MAAO,wBACJA,eAAAA,eAIP;AAAA,EAGD,YACC,QACA,iBACA,SAA2C;;AAGrC,UAAA,SACL,mCAAS,UACT,kBAAkB,KAAK,mBAAmB,OAAO,SAAS,MAAM,CAAC;AAElE,UACC,QACA;AAAA,MACC,CAACC,qBAAe,cAAc,GAAG,CAAC,MAAM,QAAO;AAC9C,eAAO,IAAI;MACZ;AAAA,MACA,CAACA,qBAAe,gBAAgB,GAAG,CAAC,MAAM,QAAO;AAChD,eAAO,IAAI;MACZ;AAAA,MACA,GAAG;AAAA,IAAA,GAEJ;AAAA,MACC,GAAG;AAAA,MACH,GAAG;AAAA,MACH;AAAA,IAAA,CACA;AAYH,wBAACC,IAEG,YAAW;AACd,aAAO,MAAM,KAAK,qBAAqBA,MAAA,kBAAkB,IAAI;AAAA,IAAA;AAG9D,wBAACA,IAEG,OAAO,SAAQ;AAClB,aAAO,MAAM,KAAK,qBACjBA,MAAA,kBAAkB,cAClB,IAAI;AAAA,IAAA;AAIN,wBAACA,IAEG,OAAO,SAAQ;AAClB,aAAO,MAAM,KAAK,qBACjBA,MAAA,kBAAkB,eAClB,IAAI;AAAA,IAAA;AA5BL,QAAI,OAAO;AACV,aAAO,YAAP,OAAO,UAAY;AACZ,OAAAC,MAAA,OAAA,SAAQ,mBAARA,IAAQ,iBAAmB;AAC3B,OAAAC,MAAA,OAAA,QAAQ,gBAAe,WAAvBA,IAAuB,SAAW,CAAA;AACzC,aAAO,QAAQ,eAAe,OAAO,KAAK,IAAI;AAAA,IAC9C;AAAA,EACF;AAyBA;AAvBCF,WAAAA,kBAAkB,MAMlBA,WAAA,kBAAkB,cASlBA,WAAA,kBAAkB;;;"}