{"version":3,"file":"EventEmitter.cjs","sources":["../../../src/lib/EventEmitter.ts"],"sourcesContent":["export type Listener<T> = (event: T) => void;\n\nexport type EventMap = {\n\t[K in string]: unknown;\n};\n\nexport abstract class EventEmitter<TEventMap = EventMap> {\n\tprivate _listeners: {\n\t\t[K in keyof TEventMap]?: [Listener<TEventMap[K]>, string | null][];\n\t} = {};\n\n\ton<TEventType extends keyof TEventMap>(\n\t\tevent: TEventType,\n\t\tlistener: Listener<TEventMap[TEventType]>,\n\t\tkey: string | null = null,\n\t): void {\n\t\tthis._listeners[event] = [\n\t\t\t...(this._listeners[event] ?? []),\n\t\t\t[listener, key],\n\t\t];\n\t}\n\n\toff<TEventType extends keyof TEventMap>(\n\t\tevent: TEventType,\n\t\tlistenerOrKey: Listener<TEventMap[TEventType]> | string,\n\t): void {\n\t\tthis._listeners[event] = (this._listeners[event] ?? []).filter(\n\t\t\t([listener, key]) =>\n\t\t\t\ttypeof listenerOrKey === \"function\"\n\t\t\t\t\t? listener !== listenerOrKey\n\t\t\t\t\t: key !== listenerOrKey,\n\t\t);\n\t}\n\n\temit<TEventType extends keyof TEventMap>(\n\t\tevent: TEventType,\n\t\tpayload: TEventMap[TEventType],\n\t): void {\n\t\t(this._listeners[event] ?? []).forEach((listener) => listener[0](payload));\n\t}\n}\n"],"names":[],"mappings":";;;;;;;;MAMsB,aAAY;AAAA;AACzB,sCAEJ,CAAA;AAAA;AAAA,EAEJ,GACC,OACA,UACA,MAAqB,MAAI;AAEpB,SAAA,WAAW,KAAK,IAAI;AAAA,MACxB,GAAI,KAAK,WAAW,KAAK,KAAK,CAAA;AAAA,MAC9B,CAAC,UAAU,GAAG;AAAA,IAAA;AAAA,EAEhB;AAAA,EAEA,IACC,OACA,eAAuD;AAElD,SAAA,WAAW,KAAK,KAAK,KAAK,WAAW,KAAK,KAAK,CAAA,GAAI,OACvD,CAAC,CAAC,UAAU,GAAG,MACd,OAAO,kBAAkB,aACtB,aAAa,gBACb,QAAQ,aAAa;AAAA,EAE3B;AAAA,EAEA,KACC,OACA,SAA8B;AAE9B,KAAC,KAAK,WAAW,KAAK,KAAK,CAAA,GAAI,QAAQ,CAAC,aAAa,SAAS,CAAC,EAAE,OAAO,CAAC;AAAA,EAC1E;AACA;;"}