{"version":3,"file":"SimulatorAPI.cjs","sources":["../../src/SimulatorAPI.ts"],"sourcesContent":["import {\n\tAPIRequestType,\n\tAPITransactions,\n\tClientRequestType,\n\tClientTransactions,\n} from \"./types\";\n\nimport {\n\tAllChannelReceiverOptions,\n\tChannelReceiver,\n\tTransactionMethod,\n\tTransactionsHandlers,\n\tTransactionsMethods,\n} from \"./channel\";\n\nexport type SimulatorAPIOptions = {\n\tactiveSliceAPI: boolean;\n\tsliceZoneSizeAPI: boolean;\n};\n\nexport const simulatorAPIDefaultOptions: Partial<AllChannelReceiverOptions> &\n\tSimulatorAPIOptions = {\n\trequestIDPrefix: \"api-\",\n\tactiveSliceAPI: false,\n\tsliceZoneSizeAPI: false,\n};\n\nexport class SimulatorAPI\n\textends ChannelReceiver<ClientTransactions, SimulatorAPIOptions>\n\timplements TransactionsMethods<APITransactions>\n{\n\tconstructor(\n\t\trequestHandlers: Omit<\n\t\t\tTransactionsHandlers<ClientTransactions>,\n\t\t\tClientRequestType.Ping\n\t\t> &\n\t\t\tPartial<\n\t\t\t\tPick<TransactionsHandlers<ClientTransactions>, ClientRequestType.Ping>\n\t\t\t>,\n\t\toptions?: Partial<AllChannelReceiverOptions & SimulatorAPIOptions>,\n\t) {\n\t\t// True if `options.debug` is true or `debug=true` is among query parameters\n\t\tconst debug =\n\t\t\toptions?.debug ||\n\t\t\t/[?&]debug=true/i.test(decodeURIComponent(window.location.search));\n\n\t\tsuper(\n\t\t\t{\n\t\t\t\t[ClientRequestType.Ping]: (_req, res) => {\n\t\t\t\t\treturn res.success(\"pong\");\n\t\t\t\t},\n\t\t\t\t...requestHandlers,\n\t\t\t},\n\t\t\t{\n\t\t\t\t...simulatorAPIDefaultOptions,\n\t\t\t\t...options,\n\t\t\t\tdebug,\n\t\t\t},\n\t\t);\n\n\t\t// Append API to window object\n\t\tif (debug) {\n\t\t\twindow.prismic ||= {};\n\t\t\twindow.prismic.sliceSimulator ||= {};\n\t\t\twindow.prismic.sliceSimulator.api ||= [];\n\t\t\twindow.prismic.sliceSimulator.api.push(this);\n\t\t}\n\t}\n\n\t[APIRequestType.SetActiveSlice]: TransactionMethod<\n\t\tAPITransactions[APIRequestType.SetActiveSlice]\n\t> = async (data) => {\n\t\treturn await this.postFormattedRequest(APIRequestType.SetActiveSlice, data);\n\t};\n\n\t[APIRequestType.SetSliceZoneSize]: TransactionMethod<\n\t\tAPITransactions[APIRequestType.SetSliceZoneSize]\n\t> = async (data) => {\n\t\treturn await this.postFormattedRequest(\n\t\t\tAPIRequestType.SetSliceZoneSize,\n\t\t\tdata,\n\t\t);\n\t};\n}\n"],"names":["ChannelReceiver","ClientRequestType","APIRequestType","_a","_b"],"mappings":";;;;;;;;;;;;;AAoBO,MAAM,6BACU;AAAA,EACtB,iBAAiB;AAAA,EACjB,gBAAgB;AAAA,EAChB,kBAAkB;;AAGb,MAAO,qBACJA,gBAAAA,gBAAwD;AAAA,EAGhE,YACC,iBAOA,SAAkE;;AAG5D,UAAA,SACL,mCAAS,UACT,kBAAkB,KAAK,mBAAmB,OAAO,SAAS,MAAM,CAAC;AAGjE,UAAA;AAAA,MACC,CAACC,wBAAkB,IAAI,GAAG,CAAC,MAAM,QAAO;AAChC,eAAA,IAAI,QAAQ,MAAM;AAAA,MAC1B;AAAA,MACA,GAAG;AAAA,IAAA,GAEJ;AAAA,MACC,GAAG;AAAA,MACH,GAAG;AAAA,MACH;AAAA,IAAA,CACA;AAYH,wBAACC,IAEG,OAAO,SAAQ;AAClB,aAAO,MAAM,KAAK,qBAAqBA,MAAA,eAAe,gBAAgB,IAAI;AAAA,IAAA;AAG3E,wBAACA,IAEG,OAAO,SAAQ;AAClB,aAAO,MAAM,KAAK,qBACjBA,MAAA,eAAe,kBACf,IAAI;AAAA,IAAA;AAnBL,QAAI,OAAO;AACV,aAAO,YAAP,OAAO,UAAY;AACZ,OAAAC,MAAA,OAAA,SAAQ,mBAARA,IAAQ,iBAAmB;AAC3B,OAAAC,MAAA,OAAA,QAAQ,gBAAe,QAAvBA,IAAuB,MAAQ,CAAA;AACtC,aAAO,QAAQ,eAAe,IAAI,KAAK,IAAI;AAAA,IAC3C;AAAA,EACF;AAgBA;AAdCF,WAAA,eAAe,gBAMfA,WAAA,eAAe;;;"}