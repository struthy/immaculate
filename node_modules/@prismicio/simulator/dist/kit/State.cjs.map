{"version":3,"file":"State.cjs","sources":["../../../src/kit/State.ts"],"sourcesContent":["import type { SharedSlice, SliceZone } from \"@prismicio/client\";\n\nimport { EventEmitter } from \"../lib/EventEmitter\";\nimport { __PRODUCTION__ } from \"../lib/__PRODUCTION__\";\nimport { throttle } from \"../lib/throttle\";\n\nimport type { ActiveSlice } from \"../types\";\nimport { StateEventType, StateEvents } from \"./types\";\n\nimport { getActiveSliceDOM, getSliceZoneDOM } from \"./domHelpers\";\nimport { getDefaultSlices } from \"./getDefault\";\n\ntype StateConstructorArgs = {\n\tslices?: SliceZone;\n};\n\nexport class State extends EventEmitter<StateEvents> {\n\tprivate _slices: SliceZone;\n\tpublic set slices(slices: SliceZone) {\n\t\tthis._slices = slices;\n\t\t// Clean up message\n\t\tthis.message = \"\";\n\t\t// Dispatch event\n\t\tthis.emit(StateEventType.Slices, slices);\n\t}\n\tpublic get slices(): SliceZone {\n\t\treturn this._slices;\n\t}\n\n\tprivate _activeSlice: ActiveSlice | null;\n\tpublic set activeSlice(activeSlice: ActiveSlice | null) {\n\t\tthis._activeSlice = activeSlice;\n\t\tthis.emit(StateEventType.ActiveSlice, activeSlice);\n\t}\n\tpublic get activeSlice(): ActiveSlice | null {\n\t\treturn this._activeSlice;\n\t}\n\n\tprivate _message: string;\n\tpublic set message(message: string) {\n\t\tthis._message = message;\n\t\tthis.emit(StateEventType.Message, message);\n\t}\n\tpublic get message(): string {\n\t\treturn this._message;\n\t}\n\n\tprivate _mouse: { x: number; y: number };\n\n\tconstructor(args?: StateConstructorArgs) {\n\t\tsuper();\n\n\t\tthis._slices = args?.slices || getDefaultSlices();\n\t\tthis._activeSlice = null;\n\t\tthis._message = \"\";\n\n\t\t// StateManager needs to keep track of mouse position for the active slice\n\t\tthis._mouse = { x: 0, y: 0 };\n\t}\n\n\tasync init(): Promise<void> {\n\t\t// Init listener\n\t\twindow.addEventListener(\"mousemove\", (event) => {\n\t\t\tthis._mouse = { x: event.clientX, y: event.clientY };\n\t\t});\n\t}\n\n\tprivate _setActiveSlice = (): void => {\n\t\t// There can't be an active slice if there's no slice displayed\n\t\tif (this.slices.length === 0) {\n\t\t\tthis.activeSlice = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst $sliceZone = getSliceZoneDOM(this.slices.length);\n\n\t\t// SliceZone has not been found, therefore active slice cannot be found\n\t\tif (!$sliceZone) {\n\t\t\tthis.activeSlice = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst $activeSlice = getActiveSliceDOM($sliceZone, this._mouse);\n\n\t\t// Active slice has not been found\n\t\tif (!$activeSlice) {\n\t\t\tthis.activeSlice = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeSliceIndex = Array.prototype.indexOf.call(\n\t\t\t$sliceZone.children,\n\t\t\t$activeSlice,\n\t\t);\n\n\t\t// Active slice has been found\n\t\tthis.activeSlice = {\n\t\t\trect: $activeSlice.getBoundingClientRect(),\n\t\t\tsliceID: this.slices[activeSliceIndex].slice_type,\n\t\t\tvariationID: (this.slices[activeSliceIndex] as SharedSlice).variation,\n\t\t\tindex: activeSliceIndex,\n\t\t};\n\t};\n\tsetActiveSlice = throttle(this._setActiveSlice, 16);\n\n\tsetSliceZone(slices: SliceZone): void {\n\t\t// Set slices\n\t\tthis.slices = slices;\n\t}\n}\n"],"names":["EventEmitter","getSliceZoneDOM","getActiveSliceDOM","throttle","getDefaultSlices","StateEventType"],"mappings":";;;;;;;;;;;;;AAgBM,MAAO,cAAcA,aAAAA,aAAyB;AAAA,EAiCnD,YAAY,MAA2B;;AAhC/B;AAYA;AASA;AASA;AAoBA,2CAAkB,MAAW;AAEhC,UAAA,KAAK,OAAO,WAAW,GAAG;AAC7B,aAAK,cAAc;AAEnB;AAAA,MACA;AAED,YAAM,aAAaC,WAAA,gBAAgB,KAAK,OAAO,MAAM;AAGrD,UAAI,CAAC,YAAY;AAChB,aAAK,cAAc;AAEnB;AAAA,MACA;AAED,YAAM,eAAeC,WAAA,kBAAkB,YAAY,KAAK,MAAM;AAG9D,UAAI,CAAC,cAAc;AAClB,aAAK,cAAc;AAEnB;AAAA,MACA;AAED,YAAM,mBAAmB,MAAM,UAAU,QAAQ,KAChD,WAAW,UACX,YAAY;AAIb,WAAK,cAAc;AAAA,QAClB,MAAM,aAAa,sBAAuB;AAAA,QAC1C,SAAS,KAAK,OAAO,gBAAgB,EAAE;AAAA,QACvC,aAAc,KAAK,OAAO,gBAAgB,EAAkB;AAAA,QAC5D,OAAO;AAAA,MAAA;AAAA;AAGT,0CAAiBC,SAAAA,SAAS,KAAK,iBAAiB,EAAE;AAtD5C,SAAA,WAAU,6BAAM,WAAUC,WAAgB,iBAAA;AAC/C,SAAK,eAAe;AACpB,SAAK,WAAW;AAGhB,SAAK,SAAS,EAAE,GAAG,GAAG,GAAG;EAC1B;AAAA,EAxCA,IAAW,OAAO,QAAiB;AAClC,SAAK,UAAU;AAEf,SAAK,UAAU;AAEV,SAAA,KAAKC,MAAAA,eAAe,QAAQ,MAAM;AAAA,EACxC;AAAA,EACA,IAAW,SAAM;AAChB,WAAO,KAAK;AAAA,EACb;AAAA,EAGA,IAAW,YAAY,aAA+B;AACrD,SAAK,eAAe;AACf,SAAA,KAAKA,MAAAA,eAAe,aAAa,WAAW;AAAA,EAClD;AAAA,EACA,IAAW,cAAW;AACrB,WAAO,KAAK;AAAA,EACb;AAAA,EAGA,IAAW,QAAQ,SAAe;AACjC,SAAK,WAAW;AACX,SAAA,KAAKA,MAAAA,eAAe,SAAS,OAAO;AAAA,EAC1C;AAAA,EACA,IAAW,UAAO;AACjB,WAAO,KAAK;AAAA,EACb;AAAA,EAeA,MAAM,OAAI;AAEF,WAAA,iBAAiB,aAAa,CAAC,UAAS;AAC9C,WAAK,SAAS,EAAE,GAAG,MAAM,SAAS,GAAG,MAAM;KAC3C;AAAA,EACF;AAAA,EA2CA,aAAa,QAAiB;AAE7B,SAAK,SAAS;AAAA,EACf;AACA;;"}