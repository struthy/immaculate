import type { SliceZone } from "@prismicio/client";
import { EventEmitter } from "../lib/EventEmitter";
import type { ActiveSlice } from "../types";
import { StateEvents } from "./types";
type StateConstructorArgs = {
    slices?: SliceZone;
};
export declare class State extends EventEmitter<StateEvents> {
    private _slices;
    set slices(slices: SliceZone);
    get slices(): SliceZone;
    private _activeSlice;
    set activeSlice(activeSlice: ActiveSlice | null);
    get activeSlice(): ActiveSlice | null;
    private _message;
    set message(message: string);
    get message(): string;
    private _mouse;
    constructor(args?: StateConstructorArgs);
    init(): Promise<void>;
    private _setActiveSlice;
    setActiveSlice: () => void;
    setSliceZone(slices: SliceZone): void;
}
export {};
