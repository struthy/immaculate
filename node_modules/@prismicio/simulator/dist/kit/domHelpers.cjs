"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const simulatorClass = "slice-simulator";
const simulatorRootClass = "slice-simulator--root";
const getSimulatorDOM = () => {
  return document.querySelector(`.${simulatorClass}`);
};
const getSimulatorRootDOM = () => {
  return document.querySelector(`.${simulatorRootClass}`);
};
const getSliceZoneDOM = (expectedNumberOfChildren) => {
  let node = document.querySelector(`.${simulatorClass} [data-slice-zone]`);
  if (node) {
    if (node.children.length !== expectedNumberOfChildren) {
      console.warn(`Flagged SliceZone has an unexpected number of children, found ${node.children.length} but expected ${expectedNumberOfChildren}. This might lead to unexpected behaviors. Are you sure you tagged the right element?`);
    }
    return node;
  }
  node = document.querySelector(`.${simulatorClass} .${simulatorRootClass}`);
  if (!node) {
    return null;
  }
  const searchDepth = 5;
  for (let i = 0; i < searchDepth; i++) {
    if (node.children.length === expectedNumberOfChildren) {
      return node;
    } else if (node.children.length) {
      node = node.children[0];
    } else {
      break;
    }
  }
  return null;
};
const getActiveSliceDOM = ($sliceZone, mouse) => {
  const raycast = document.elementsFromPoint(mouse.x, mouse.y).reverse();
  const sliceZoneIndex = raycast.indexOf($sliceZone);
  if (sliceZoneIndex === -1) {
    return null;
  }
  const $slice = raycast[sliceZoneIndex + 1];
  if (!$slice) {
    return null;
  }
  return $slice;
};
exports.getActiveSliceDOM = getActiveSliceDOM;
exports.getSimulatorDOM = getSimulatorDOM;
exports.getSimulatorRootDOM = getSimulatorRootDOM;
exports.getSliceZoneDOM = getSliceZoneDOM;
exports.simulatorClass = simulatorClass;
exports.simulatorRootClass = simulatorRootClass;
//# sourceMappingURL=domHelpers.cjs.map
