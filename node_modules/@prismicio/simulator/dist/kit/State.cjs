"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const EventEmitter = require("../lib/EventEmitter.cjs");
const throttle = require("../lib/throttle.cjs");
const types = require("./types.cjs");
const domHelpers = require("./domHelpers.cjs");
const getDefault = require("./getDefault.cjs");
class State extends EventEmitter.EventEmitter {
  constructor(args) {
    super();
    __publicField(this, "_slices");
    __publicField(this, "_activeSlice");
    __publicField(this, "_message");
    __publicField(this, "_mouse");
    __publicField(this, "_setActiveSlice", () => {
      if (this.slices.length === 0) {
        this.activeSlice = null;
        return;
      }
      const $sliceZone = domHelpers.getSliceZoneDOM(this.slices.length);
      if (!$sliceZone) {
        this.activeSlice = null;
        return;
      }
      const $activeSlice = domHelpers.getActiveSliceDOM($sliceZone, this._mouse);
      if (!$activeSlice) {
        this.activeSlice = null;
        return;
      }
      const activeSliceIndex = Array.prototype.indexOf.call($sliceZone.children, $activeSlice);
      this.activeSlice = {
        rect: $activeSlice.getBoundingClientRect(),
        sliceID: this.slices[activeSliceIndex].slice_type,
        variationID: this.slices[activeSliceIndex].variation,
        index: activeSliceIndex
      };
    });
    __publicField(this, "setActiveSlice", throttle.throttle(this._setActiveSlice, 16));
    this._slices = (args == null ? void 0 : args.slices) || getDefault.getDefaultSlices();
    this._activeSlice = null;
    this._message = "";
    this._mouse = { x: 0, y: 0 };
  }
  set slices(slices) {
    this._slices = slices;
    this.message = "";
    this.emit(types.StateEventType.Slices, slices);
  }
  get slices() {
    return this._slices;
  }
  set activeSlice(activeSlice) {
    this._activeSlice = activeSlice;
    this.emit(types.StateEventType.ActiveSlice, activeSlice);
  }
  get activeSlice() {
    return this._activeSlice;
  }
  set message(message) {
    this._message = message;
    this.emit(types.StateEventType.Message, message);
  }
  get message() {
    return this._message;
  }
  async init() {
    window.addEventListener("mousemove", (event) => {
      this._mouse = { x: event.clientX, y: event.clientY };
    });
  }
  setSliceZone(slices) {
    this.slices = slices;
  }
}
exports.State = State;
//# sourceMappingURL=State.cjs.map
