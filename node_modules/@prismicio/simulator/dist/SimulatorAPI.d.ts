import { APIRequestType, APITransactions, ClientRequestType, ClientTransactions } from "./types";
import { AllChannelReceiverOptions, ChannelReceiver, TransactionMethod, TransactionsHandlers, TransactionsMethods } from "./channel";
export type SimulatorAPIOptions = {
    activeSliceAPI: boolean;
    sliceZoneSizeAPI: boolean;
};
export declare const simulatorAPIDefaultOptions: Partial<AllChannelReceiverOptions> & SimulatorAPIOptions;
export declare class SimulatorAPI extends ChannelReceiver<ClientTransactions, SimulatorAPIOptions> implements TransactionsMethods<APITransactions> {
    constructor(requestHandlers: Omit<TransactionsHandlers<ClientTransactions>, ClientRequestType.Ping> & Partial<Pick<TransactionsHandlers<ClientTransactions>, ClientRequestType.Ping>>, options?: Partial<AllChannelReceiverOptions & SimulatorAPIOptions>);
    [APIRequestType.SetActiveSlice]: TransactionMethod<APITransactions[APIRequestType.SetActiveSlice]>;
    [APIRequestType.SetSliceZoneSize]: TransactionMethod<APITransactions[APIRequestType.SetSliceZoneSize]>;
}
