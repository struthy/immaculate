import { GroupContent, isGroupContent, isNestableContent, NestableContent } from "@prismicio/types-internal/lib/content"
import type { Group as GroupField, NestableWidget } from "@prismicio/types-internal/lib/customtypes"

import type { RenderContext } from "../models"
import { Field, Group, GroupOrField, GroupType } from "../models/fetch"
import { withObjectRenderers } from "../object"
import GroupRenderer from "./GroupRenderer"
import SimpleWidgetRenderer from "./SimpleWidgetRenderer"

function extractFetchGroupIfAny(fetch: GroupOrField | undefined): Group | undefined {
	if (fetch !== undefined && fetch.TYPE === GroupType) {
		return fetch
	} else {
		return undefined
	}
}

function extractFetchFieldIfAny(fetch: GroupOrField | undefined): Field | undefined {
	if (fetch !== undefined && fetch.TYPE !== GroupType) {
		return fetch
	} else {
		return undefined
	}
}

const StaticWidgetRenderer = (ctx: RenderContext) =>
	withObjectRenderers<NestableWidget | GroupField, NestableContent | GroupContent, GroupOrField>({
		renderV1(content, fetch) {
			if (isGroupContent(content)) {
				return GroupRenderer(ctx).renderV1(content, extractFetchGroupIfAny(fetch))
			} else {
				return SimpleWidgetRenderer(ctx).renderV1(content, extractFetchFieldIfAny(fetch))
			}
		},

		renderV2(def, content, fetch) {
			if (def.type !== "Group" && isNestableContent(content)) {
				// todo maybe find an other condition
				return SimpleWidgetRenderer(ctx).renderV2(def, content, extractFetchFieldIfAny(fetch))
			} else if (def.type === "Group" && isGroupContent(content)) {
				return GroupRenderer(ctx).renderV2(def, content, extractFetchGroupIfAny(fetch))
			} else {
				return this.renderDefault(def)
			}
		},

		renderDefault(def) {
			if (def.type === "Group") {
				return GroupRenderer(ctx).renderDefault(def)
			} else {
				return SimpleWidgetRenderer(ctx).renderDefault(def)
			}
		},

		renderMocks(def, content) {
			if (isNestableContent(content) && def.type !== "Group") {
				return SimpleWidgetRenderer(ctx).renderMocks(def, content)
			} else if (isGroupContent(content) && def.type === "Group") {
				return GroupRenderer(ctx).renderMocks(def, content)
			} else {
				return this.renderDefault(def)
			}
		},
	})

export default StaticWidgetRenderer
