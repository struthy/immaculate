import type { DocumentLinkContent } from "@prismicio/types-internal/lib/content"

import type { RenderContext } from "../../../models"
import { AnyLinkDef, DocumentLinkDef, LinkRenderer } from "../../../models"
import type { DocRelation } from "../../../models/fetch"

export const BROKEN_CUSTOM_TYPE = "broken_type"

function brokenLinkV2(id: string): unknown {
	return {
		id: id,

		type: BROKEN_CUSTOM_TYPE,
		tags: [],
		isBroken: true,
	}
}

function brokenLinkV1(id: string): unknown {
	return {
		value: brokenLinkV2(id),
	}
}

const DocumentLinkRenderer: (ctx: RenderContext) => LinkRenderer<DocumentLinkDef, DocumentLinkContent, DocRelation> = (
	ctx,
) => ({
	renderV1(link: DocumentLinkContent, fetch: DocRelation | undefined): unknown {
		//todo check fetch type
		try {
			const id = ctx.Extension.DocEncoder.encodeDocId(link.id, fetch?.uuid)
			return {
				type: "Link.document",
				value: ctx.Extension.encoders.documentLinks.encode(id),
			}
		} catch (e) {
			return brokenLinkV1(link.id)
		}
	},

	renderV2(_def: DocumentLinkDef | AnyLinkDef, link: DocumentLinkContent, fetch: DocRelation | undefined): unknown {
		//todo check fetch type
		try {
			const id = ctx.Extension.DocEncoder.encodeDocId(link.id, fetch?.uuid)
			return ctx.Extension.encoders.documentLinks.encode(id)
		} catch (e) {
			return brokenLinkV2(link.id)
		}
	},

	renderMocks(def: DocumentLinkDef | AnyLinkDef, link: DocumentLinkContent): unknown {
		const type = (DocumentLinkDef.is(def) && def.customtypes[0]) || "mock"
		return {
			id: link.id,
			link_type: "Document",
			type,
			tags: [],
			lang: "en-us",
			slug: null,
			first_publication_date: "1970-01-01T00:00:01+0000",
			last_publication_date: "1970-01-01T01:00:00+0000",
		}
	},
})

export default DocumentLinkRenderer
