import { StaticSlices } from "@prismicio/types-internal/lib/customtypes"
import { either } from "fp-ts"
import { pipe } from "fp-ts/lib/function"
import * as t from "io-ts"

import { isFieldDef, WithKey } from "../../utils"
import { SliceDef } from "./SliceDef"

const codec = t.strict({
	name: t.string,
	slices: t.array(SliceDef),
})

export const SlicesDef = new t.Type<WithKey<StaticSlices>>(
	"SlicesDef",
	(u: unknown): u is WithKey<StaticSlices> => isFieldDef(u) && StaticSlices.is(u.def),
	(u: unknown) => {
		return pipe(
			codec.decode(u),
			either.map(({ name, slices }): WithKey<StaticSlices> => {
				return {
					key: name,
					def: {
						type: "Slices",
						config: {
							choices: slices.reduce((acc, { key, def }) => ({ ...acc, [key]: def }), {}),
						},
					},
				}
			}),
		)
	},
	(s) => s,
)
