import { CompositeSlice } from "@prismicio/types-internal/lib/customtypes"
import { either } from "fp-ts"
import { pipe } from "fp-ts/lib/function"
import * as t from "io-ts"

import { isFieldDef, WithKey } from "../../utils"
import { NestedGroupDef } from "../GroupDef"
import { NestableDef } from "../nestable/NestableDef"

const sliceCodec = t.strict({
	name: t.string,
	primary: t.array(NestableDef),
	items: NestedGroupDef,
})

export const CompositeSliceDef = new t.Type<WithKey<CompositeSlice>>(
	"CompositeSliceDef",
	(u: unknown): u is WithKey<CompositeSlice> => isFieldDef(u) && CompositeSlice.is(u.def),
	(u: unknown) => {
		return pipe(
			sliceCodec.decode(u),
			either.map(
				({ name, primary, items }): WithKey<CompositeSlice> => ({
					key: name,
					def: {
						type: "Slice",
						"non-repeat": primary.reduce((acc, { key, def }) => ({ ...acc, [key]: def }), {}),
						repeat: items.def.config?.fields,
					} as CompositeSlice,
				}),
			),
		)
	},
	(s) => s,
)
