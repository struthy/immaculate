import { LegacySlice } from "@prismicio/types-internal/lib/customtypes"
import { either } from "fp-ts"
import { pipe } from "fp-ts/lib/function"
import * as t from "io-ts"

import { isFieldDef, WithKey } from "../../utils"
import { NestedGroupDef } from "../GroupDef"
import { NestableDef } from "../nestable"

const codec = t.type({
	name: t.string,
	widget: t.union([NestedGroupDef, NestableDef]),
})

export const LegacySliceDef = new t.Type<WithKey<LegacySlice>>(
	"LegacySliceDef",
	(u: unknown): u is WithKey<LegacySlice> => isFieldDef(u) && LegacySlice.is(u.def),
	(u: unknown) => {
		return pipe(
			codec.decode(u),
			either.map(
				({ name, widget }): WithKey<LegacySlice> => ({
					key: name,
					def: widget.def,
				}),
			),
		)
	},
	(s) => s,
)
