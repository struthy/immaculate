import { Link } from "@prismicio/types-internal/lib/customtypes/widgets/nestable"
import { either } from "fp-ts"
import { pipe } from "fp-ts/lib/function"
import * as t from "io-ts"

import { isFieldDef, WithKey } from "../../../utils"
import { AnyLinkDef, defaultAnyLinkDef } from "./AnyLinkDef"
import { defaultDocumentLinkDef, DocumentLinkDef } from "./DocumentLinkDef"
import { defaultMediaLinkDef, MediaLinkDef } from "./MediaLinkDef"
import { defaultWebLinkDef, WebLinkDef } from "./WebLinkDef"

const LinkConfig = t.union([MediaLinkDef, DocumentLinkDef, WebLinkDef, AnyLinkDef])
type LinkConfig = t.TypeOf<typeof LinkConfig>

const codec = t.strict({
	link: t.string,
	config: LinkConfig,
})

export const LinkDef = new t.Type<WithKey<Link>>(
	"LinkDef",
	(u: unknown): u is WithKey<Link> => isFieldDef(u) && Link.is(u.def),
	(u: unknown) => {
		return pipe(
			codec.decode(u),
			either.map(({ link, config }): WithKey<Link> => {
				return {
					key: link,
					def: {
						type: "Link",
						config,
					},
				}
			}),
		)
	},
	(l) => l,
)

export function defaultLink(type: LinkConfig["select"]): Link {
	const config: LinkConfig = (() => {
		switch (type) {
			case "document":
				return defaultDocumentLinkDef()
			case "media":
				return defaultMediaLinkDef()
			case "web":
				return defaultWebLinkDef()
			case null:
				return defaultAnyLinkDef()
		}
	})()

	return {
		type: "Link",
		config,
	}
}

export function isMediaLinkDef(def: Link): boolean {
	return def.type === "Link" && def?.config?.select === "media"
}

export function isAnyLinkDef(def: Link): boolean {
	return def.type === "Link" && def?.config?.select === null
}

export function isDocumentLinkDef(def: Link): boolean {
	return def.type === "Link" && def?.config?.select === "document"
}

export function isWebLinkDef(def: Link): boolean {
	return def.type === "Link" && def?.config?.select === "web"
}

export * from "./AnyLinkDef"
export * from "./DocumentLinkDef"
export * from "./MediaLinkDef"
export * from "./WebLinkDef"
