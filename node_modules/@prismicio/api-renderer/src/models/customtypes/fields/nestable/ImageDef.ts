import { Image } from "@prismicio/types-internal/lib/customtypes"
import { either } from "fp-ts"
import { pipe } from "fp-ts/lib/function"
import * as t from "io-ts"

import { isFieldDef, WithKey } from "../../utils"

const codec = t.strict({
	image: t.string,
	config: t.strict({
		thumbnails: t.array(t.string),
	}),
})

export const ImageDef = new t.Type<WithKey<Image>>(
	"ImageDef",
	(u: unknown): u is WithKey<Image> => isFieldDef(u) && Image.is(u.def),
	(u: unknown) => {
		return pipe(
			codec.decode(u),
			either.map(
				({ image, config }): WithKey<Image> => ({
					key: image,
					def: {
						type: "Image",
						config: {
							thumbnails: config.thumbnails.map((t) => ({ name: t })),
						},
					},
				}),
			),
		)
	},
	(n) => n,
)
