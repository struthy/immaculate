import { BooleanField } from "@prismicio/types-internal/lib/customtypes"
import { either } from "fp-ts"
import { pipe } from "fp-ts/lib/function"
import * as t from "io-ts"

import { isFieldDef, WithKey } from "../../utils"

const codec = t.strict({
	booleanField: t.string,
	config: t.strict({
		default_value: t.boolean,
	}),
})

export const BooleanDef = new t.Type<WithKey<BooleanField>>(
	"BooleanDef",
	(u: unknown): u is WithKey<BooleanField> => isFieldDef(u) && BooleanField.is(u.def),
	(u: unknown) => {
		return pipe(
			codec.decode(u),
			either.map(
				({ booleanField: key, config }): WithKey<BooleanField> => ({
					key,
					def: {
						type: "Boolean",
						config,
					},
				}),
			),
		)
	},
	(n) => n,
)
