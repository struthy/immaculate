"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withObjectRenderers = void 0;
const tslib_1 = require("tslib");
const content_1 = require("@prismicio/types-internal/lib/content");
const Array_1 = require("fp-ts/lib/Array");
const O = tslib_1.__importStar(require("fp-ts/lib/Option"));
const utils_1 = require("./utils");
function withObjectRenderers(renderer) {
    return {
        ...renderer,
        renderV1Object(content, fetch) {
            const c = content instanceof Array ? content : Object.entries(content);
            return Object.fromEntries((0, Array_1.compact)(c.map(([key, widget]) => {
                if (content_1.EmptyContent.is(widget)) {
                    return O.none;
                }
                return (0, utils_1.renderIfNoFetchOrFetchDefined)(fetch, key, (f) => O.some([key, renderer.renderV1(widget, f)]));
            })));
        },
        renderV2Object(content, fetch, fieldsDef, renderIfUndefined, renderIfNull) {
            const itemByKey = content instanceof Array ? Object.fromEntries(content) : content;
            const result = {};
            Object.entries(fieldsDef).forEach(([key, def]) => {
                const item = itemByKey[key];
                if (item === undefined) {
                    if ((fetch && key in fetch) || !fetch) {
                        result[key] = renderer.renderDefault(def);
                    }
                    else if (fetch) {
                        if (renderIfUndefined.withFetch === "default") {
                            result[key] = renderer.renderDefault(def);
                        }
                    }
                }
                else if (content_1.EmptyContent.is(item)) {
                    if (fetch && key in fetch) {
                        if (renderIfNull.withFetchField === "default") {
                            result[key] = renderer.renderDefault(def);
                        }
                        else if (renderIfNull.withFetchField === "render") {
                            result[key] = renderer.renderV2(def, item, fetch[key]);
                        }
                    }
                    else if (fetch) {
                        if (renderIfNull.withFetch === "default") {
                            result[key] = renderer.renderDefault(def);
                        }
                    }
                    else {
                        if (renderIfNull.default === "default") {
                            result[key] = renderer.renderDefault(def);
                        }
                        else if (renderIfNull.default === "render") {
                            result[key] = renderer.renderV2(def, item);
                        }
                    }
                }
                else {
                    const renderedO = (0, utils_1.renderIfNoFetchOrFetchDefined)(fetch, key, (f) => O.some(renderer.renderV2(def, item, f)));
                    if (O.isSome(renderedO)) {
                        result[key] = renderedO.value;
                    }
                }
            });
            return result;
        },
        renderMocksObject(content, fieldsDef) {
            const itemByKey = content instanceof Array ? Object.fromEntries(content) : content;
            const result = {};
            Object.entries(fieldsDef).forEach(([name, def]) => {
                const key = name;
                const item = itemByKey[key];
                if (item === undefined) {
                    result[key] = renderer.renderDefault(def);
                }
                else if (content_1.EmptyContent.is(item)) {
                    result[key] = renderer.renderDefault(def);
                }
                else {
                    const renderedO = (0, utils_1.renderIfNoFetchOrFetchDefined)(undefined, key, () => O.some(renderer.renderMocks(def, item)));
                    if (O.isSome(renderedO)) {
                        result[key] = renderedO.value;
                    }
                }
            });
            return result;
        },
    };
}
exports.withObjectRenderers = withObjectRenderers;
