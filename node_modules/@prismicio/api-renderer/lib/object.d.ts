import { type WidgetContent } from "@prismicio/types-internal/lib/content";
import type { StaticWidget } from "@prismicio/types-internal/lib/customtypes";
import type { Renderer } from "./models";
import type { Field } from "./models/fetch";
export type WithObjectRenderers<R extends Renderer<StaticWidget, WidgetContent, Field | undefined>, D extends StaticWidget = R extends Renderer<infer U, WidgetContent, Field | undefined> ? U : never, C extends WidgetContent = R extends Renderer<StaticWidget, infer U, Field | undefined> ? U : never, F extends Field | undefined = R extends Renderer<StaticWidget, WidgetContent, infer U> ? U : never> = R & {
    renderV1Object(content: Array<[string, C]> | Record<string, C>, fetch: Record<string, F> | undefined): object;
    renderV2Object(content: Array<[string, C]> | Record<string, C>, fetch: Record<string, F> | undefined, fieldsDef: Record<string, D>, renderIfUndefined: {
        withFetch: "default" | "filter";
    }, renderIfNull: {
        default: "default" | "render" | "filter";
        withFetch: "default" | "filter";
        withFetchField: "default" | "render" | "filter";
    }): Record<string, unknown>;
    renderMocksObject(content: Array<[string, C]> | Record<string, C>, fieldsDef: Record<string, D>): Record<string, unknown>;
};
export declare function withObjectRenderers<D extends StaticWidget, C extends WidgetContent, F extends Field | undefined = undefined>(renderer: Renderer<D, C, F>): WithObjectRenderers<Renderer<D, C, F>>;
