"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../utils");
const TIMESTAMP_INPUT_REGEX = /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(?:(?:[+-]{1}[0-9]{2}:?[0-9]{2})|Z)$/;
const DATE_INPUT_REGEX = /^(\d{1,4})-([0-9]{1,2})-([0-9]{1,2})$/;
function DATE_INPUT_REFORMATER(v) {
    const [year, month, day] = [v[1], v[2], v[3]];
    /* eslint-disable  @typescript-eslint/no-non-null-assertion */
    return `${year.padStart(4, "0")}-${month.padStart(2, "0")}-${day.padStart(2, "0")}T00:00:00.000+0000`;
}
const FieldRenderer = {
    renderV1(content) {
        const partialResult = { type: content.type, value: null };
        switch (content.type) {
            case "Number": {
                const number = (0, utils_1.filterDouble)(content.value);
                return {
                    ...partialResult,
                    value: number,
                };
            }
            case "Date":
                try {
                    const maybeInputDate = DATE_INPUT_REGEX.exec(content.value);
                    if (maybeInputDate) {
                        const date = new Date(DATE_INPUT_REFORMATER(maybeInputDate));
                        return {
                            ...partialResult,
                            value: (0, utils_1.formatDate)(date),
                        };
                    }
                    return partialResult;
                }
                catch (e) {
                    console.warn(`Unable to render Date value with ${content.value}: ${e.toString()}`);
                    return partialResult;
                }
            case "Timestamp":
                try {
                    if (TIMESTAMP_INPUT_REGEX.test(content.value)) {
                        const date = new Date(content.value);
                        return {
                            ...partialResult,
                            value: (0, utils_1.formatDateTime)(date),
                        };
                    }
                    return partialResult;
                }
                catch (e) {
                    console.warn(`Unable to render Timestamp value with ${content.value}: ${e.toString()}`);
                    return partialResult;
                }
            default:
                return {
                    ...partialResult,
                    value: content.value,
                };
        }
    },
    renderV2(_def, content) {
        switch (content.type) {
            case "Number":
                return (0, utils_1.filterDouble)(content.value);
            case "Date":
                try {
                    const maybeInputDate = DATE_INPUT_REGEX.exec(content.value);
                    if (maybeInputDate) {
                        const date = new Date(DATE_INPUT_REFORMATER(maybeInputDate));
                        return (0, utils_1.formatDate)(date);
                    }
                    return null;
                }
                catch (e) {
                    console.warn(`Unable to render Date value with ${content.value}: ${e.toString()}`);
                    return null;
                }
            case "Timestamp":
                try {
                    if (TIMESTAMP_INPUT_REGEX.test(content.value)) {
                        const date = new Date(content.value);
                        return (0, utils_1.formatDateTime)(date);
                    }
                    return null;
                }
                catch (e) {
                    console.warn(`Unable to render Timestamp value with ${content.value}: ${e.toString()}`);
                    return null;
                }
            default:
                return content.value;
        }
    },
    renderDefault(_def) {
        return null;
    },
    renderMocks(def, content) {
        return this.renderV2(def, content);
    },
};
exports.default = FieldRenderer;
