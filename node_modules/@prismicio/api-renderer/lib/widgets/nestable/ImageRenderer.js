"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const models_1 = require("../../models");
const utils_1 = require("../../utils");
function renderImageContentView(imageContentView, ctx, apiVersion) {
    const contentV2 = apiVersion === "v2"
        ? {
            id: imageContentView.origin.id,
            edit: {
                x: imageContentView.edit.crop.x,
                y: imageContentView.edit.crop.y,
                zoom: imageContentView.edit.zoom,
                background: imageContentView.edit.background,
            },
        }
        : {};
    return {
        dimensions: {
            width: imageContentView.width,
            height: imageContentView.height,
        },
        alt: (0, utils_1.writeEmptyStringOrNull)(imageContentView.alt, ctx.emptyStringInsteadOfNull),
        copyright: (0, utils_1.writeEmptyStringOrNull)(imageContentView.credits, ctx.emptyStringInsteadOfNull),
        url: ctx.urlRewriter.rewriteImageUrl(imageContentView),
        ...contentV2,
    };
}
const ImageRenderer = (ctx) => ({
    renderV1(content) {
        if (content.thumbnails) {
            const views = Object.entries(content.thumbnails).reduce((acc, [k, v]) => {
                return {
                    ...acc,
                    [k.toLowerCase()]: renderImageContentView(v, ctx, models_1.ApiVersion.v1),
                };
            }, {});
            return {
                type: "Image",
                value: { main: renderImageContentView(content, ctx, models_1.ApiVersion.v1), views: views },
            };
        }
        return {
            type: "Image",
            value: { main: renderImageContentView(content, ctx, models_1.ApiVersion.v1), views: [] },
        };
    },
    renderV2(_def, content) {
        const main = renderImageContentView(content, ctx, models_1.ApiVersion.v2);
        if (content.thumbnails && content.thumbnails) {
            const views = Object.entries(content.thumbnails).reduce((acc, [k, v]) => {
                return Object.assign(acc, { [k]: renderImageContentView(v, ctx, models_1.ApiVersion.v2) });
            }, {});
            return Object.assign(main, views);
        }
        return main;
    },
    renderDefault(def) {
        var _a;
        return (((_a = def.config) === null || _a === void 0 ? void 0 : _a.thumbnails) || []).reduce((acc, { name }) => {
            return {
                ...acc,
                [name]: {},
            };
        }, {});
    },
    renderMocks(def, content) {
        return this.renderV2(def, content);
    },
});
exports.default = ImageRenderer;
