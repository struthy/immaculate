"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const content_1 = require("@prismicio/types-internal/lib/content");
const fetch_1 = require("../models/fetch");
const object_1 = require("../object");
const GroupRenderer_1 = tslib_1.__importDefault(require("./GroupRenderer"));
const SimpleWidgetRenderer_1 = tslib_1.__importDefault(require("./SimpleWidgetRenderer"));
function extractFetchGroupIfAny(fetch) {
    if (fetch !== undefined && fetch.TYPE === fetch_1.GroupType) {
        return fetch;
    }
    else {
        return undefined;
    }
}
function extractFetchFieldIfAny(fetch) {
    if (fetch !== undefined && fetch.TYPE !== fetch_1.GroupType) {
        return fetch;
    }
    else {
        return undefined;
    }
}
const StaticWidgetRenderer = (ctx) => (0, object_1.withObjectRenderers)({
    renderV1(content, fetch) {
        if ((0, content_1.isGroupContent)(content)) {
            return (0, GroupRenderer_1.default)(ctx).renderV1(content, extractFetchGroupIfAny(fetch));
        }
        else {
            return (0, SimpleWidgetRenderer_1.default)(ctx).renderV1(content, extractFetchFieldIfAny(fetch));
        }
    },
    renderV2(def, content, fetch) {
        if (def.type !== "Group" && (0, content_1.isNestableContent)(content)) {
            // todo maybe find an other condition
            return (0, SimpleWidgetRenderer_1.default)(ctx).renderV2(def, content, extractFetchFieldIfAny(fetch));
        }
        else if (def.type === "Group" && (0, content_1.isGroupContent)(content)) {
            return (0, GroupRenderer_1.default)(ctx).renderV2(def, content, extractFetchGroupIfAny(fetch));
        }
        else {
            return this.renderDefault(def);
        }
    },
    renderDefault(def) {
        if (def.type === "Group") {
            return (0, GroupRenderer_1.default)(ctx).renderDefault(def);
        }
        else {
            return (0, SimpleWidgetRenderer_1.default)(ctx).renderDefault(def);
        }
    },
    renderMocks(def, content) {
        if ((0, content_1.isNestableContent)(content) && def.type !== "Group") {
            return (0, SimpleWidgetRenderer_1.default)(ctx).renderMocks(def, content);
        }
        else if ((0, content_1.isGroupContent)(content) && def.type === "Group") {
            return (0, GroupRenderer_1.default)(ctx).renderMocks(def, content);
        }
        else {
            return this.renderDefault(def);
        }
    },
});
exports.default = StaticWidgetRenderer;
