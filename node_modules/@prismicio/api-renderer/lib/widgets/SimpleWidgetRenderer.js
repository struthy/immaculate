"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const content_1 = require("@prismicio/types-internal/lib/content");
const fetch_1 = require("../models/fetch");
const object_1 = require("../object");
const nestable_1 = require("./nestable");
const UIDRenderer_1 = tslib_1.__importDefault(require("./UIDRenderer"));
function extractSimpleFieldIfAny(field) {
    if (field !== undefined && field.TYPE === fetch_1.SimpleFieldType) {
        return field;
    }
    else {
        return undefined;
    }
}
function extractFetchDocRelationIfAny(field) {
    if (field !== undefined && field.TYPE === fetch_1.DocRelationType) {
        return field;
    }
    else {
        return undefined;
    }
}
const SimpleWidgetRenderer = (ctx) => (0, object_1.withObjectRenderers)({
    renderV1(content, fetch) {
        if ((0, content_1.isRichTextContent)(content)) {
            return (0, nestable_1.StructuredTextRenderer)(ctx).renderV1(content, extractSimpleFieldIfAny(fetch));
        }
        else if ((0, content_1.isImageContent)(content)) {
            return (0, nestable_1.ImageRenderer)(ctx).renderV1(content);
        }
        else if (
        // We should split the renderers of each
        (0, content_1.isRangeContent)(content) ||
            (0, content_1.isNumberContent)(content) ||
            (0, content_1.isTimestampContent)(content) ||
            (0, content_1.isDateContent)(content) ||
            (0, content_1.isTextContent)(content) ||
            (0, content_1.isColorContent)(content) ||
            (0, content_1.isSelectContent)(content)) {
            return nestable_1.FieldRenderer.renderV1(content);
        }
        else if ((0, content_1.isLinkContent)(content)) {
            return (0, nestable_1.LinkRenderer)(ctx).renderV1(content, extractFetchDocRelationIfAny(fetch));
        }
        else if ((0, content_1.isEmbedContent)(content)) {
            return nestable_1.EmbedRenderer.renderV1(content);
        }
        else if ((0, content_1.isGeoPointContent)(content)) {
            return nestable_1.GeoPointRenderer.renderV1(content);
        }
        else if ((0, content_1.isUIDContent)(content)) {
            return UIDRenderer_1.default.renderV1(content);
        }
        else if ((0, content_1.isIntegrationFieldContent)(content)) {
            return (0, nestable_1.IntegrationFieldsRenderer)(ctx).renderV1(content);
        }
        else if ((0, content_1.isSeparatorContent)(content)) {
            return nestable_1.SeparatorRenderer.renderV1(content);
        }
        else if ((0, content_1.isBooleanContent)(content)) {
            return nestable_1.BooleanRenderer.renderV1(content);
        }
        else {
            return null;
        }
    },
    renderV2(def, content, fetch) {
        if (def.type === "StructuredText" && (0, content_1.isRichTextContent)(content)) {
            return (0, nestable_1.StructuredTextRenderer)(ctx).renderV2(def, content, extractSimpleFieldIfAny(fetch));
        }
        else if (def.type === "Image" && (0, content_1.isImageContent)(content)) {
            return (0, nestable_1.ImageRenderer)(ctx).renderV2(def, content);
        }
        else if (def.type === "Link" && (0, content_1.isLinkContent)(content)) {
            return (0, nestable_1.LinkRenderer)(ctx).renderV2(def, content, extractFetchDocRelationIfAny(fetch));
        }
        else if (def.type === "Embed" && (0, content_1.isEmbedContent)(content)) {
            return nestable_1.EmbedRenderer.renderV2(def, content);
        }
        else if (def.type === "GeoPoint" && (0, content_1.isGeoPointContent)(content)) {
            return nestable_1.GeoPointRenderer.renderV2(def, content);
        }
        else if (def.type === "IntegrationFields" && (0, content_1.isIntegrationFieldContent)(content)) {
            return (0, nestable_1.IntegrationFieldsRenderer)(ctx).renderV2(def, content);
        }
        else if (def.type === "Separator" && (0, content_1.isSeparatorContent)(content)) {
            return nestable_1.SeparatorRenderer.renderV2(def, content);
        }
        else if (def.type === "Boolean" && (0, content_1.isBooleanContent)(content)) {
            return nestable_1.BooleanRenderer.renderV2(def, content);
        }
        else if ((0, content_1.isRangeContent)(content) ||
            (0, content_1.isNumberContent)(content) ||
            (0, content_1.isTimestampContent)(content) ||
            (0, content_1.isDateContent)(content) ||
            (0, content_1.isTextContent)(content) ||
            (0, content_1.isColorContent)(content) ||
            (0, content_1.isSelectContent)(content)) {
            // TODO: because of an old bug, we have to cast the type here to maintain backward compatibility
            // We should check that `def.type` is matching FieldDef or fallback to the null case.
            return nestable_1.FieldRenderer.renderV2(def, content);
        }
        else {
            return null;
        }
    },
    renderDefault(def) {
        if (def.type === "Link") {
            return (0, nestable_1.LinkRenderer)(ctx).renderDefault(def);
        }
        else if (def.type === "Embed") {
            return nestable_1.EmbedRenderer.renderDefault(def);
        }
        else if (def.type === "GeoPoint") {
            return nestable_1.GeoPointRenderer.renderDefault(def);
        }
        else if (def.type === "StructuredText") {
            return (0, nestable_1.StructuredTextRenderer)(ctx).renderDefault(def);
        }
        else if (def.type === "Image") {
            return (0, nestable_1.ImageRenderer)(ctx).renderDefault(def);
        }
        else if (def.type === "Separator") {
            return nestable_1.SeparatorRenderer.renderDefault(def);
        }
        else if (def.type === "Boolean") {
            return nestable_1.BooleanRenderer.renderDefault(def);
        }
        else if (def.type === "IntegrationFields") {
            return (0, nestable_1.IntegrationFieldsRenderer)(ctx).renderDefault(def);
        }
        else {
            return nestable_1.FieldRenderer.renderDefault(def);
        }
    },
    renderMocks(def, content) {
        if (def.type === "StructuredText" && (0, content_1.isRichTextContent)(content)) {
            return (0, nestable_1.StructuredTextRenderer)(ctx).renderMocks(def, content);
        }
        else if (def.type === "Image" && (0, content_1.isImageContent)(content)) {
            return (0, nestable_1.ImageRenderer)(ctx).renderMocks(def, content);
        }
        else if (def.type === "Link" && (0, content_1.isLinkContent)(content)) {
            return (0, nestable_1.LinkRenderer)(ctx).renderMocks(def, content);
        }
        else if (def.type === "Embed" && (0, content_1.isEmbedContent)(content)) {
            return nestable_1.EmbedRenderer.renderMocks(def, content);
        }
        else if (def.type === "GeoPoint" && (0, content_1.isGeoPointContent)(content)) {
            return nestable_1.GeoPointRenderer.renderMocks(def, content);
        }
        else if (def.type === "IntegrationFields" && (0, content_1.isIntegrationFieldContent)(content)) {
            return (0, nestable_1.IntegrationFieldsRenderer)(ctx).renderMocks(def, content);
        }
        else if (def.type === "Separator" && (0, content_1.isSeparatorContent)(content)) {
            return nestable_1.SeparatorRenderer.renderMocks(def, content);
        }
        else if (def.type === "Boolean" && (0, content_1.isBooleanContent)(content)) {
            return nestable_1.BooleanRenderer.renderMocks(def, content);
        }
        else if (((0, content_1.isRangeContent)(content) && def.type === "Range") ||
            ((0, content_1.isNumberContent)(content) && def.type === "Number") ||
            ((0, content_1.isTimestampContent)(content) && def.type === "Timestamp") ||
            ((0, content_1.isDateContent)(content) && def.type === "Date") ||
            ((0, content_1.isTextContent)(content) && def.type === "Text") ||
            ((0, content_1.isColorContent)(content) && def.type === "Color") ||
            ((0, content_1.isSelectContent)(content) && def.type === "Select")) {
            return nestable_1.FieldRenderer.renderMocks(def, content);
        }
        else {
            return null;
        }
    },
});
exports.default = SimpleWidgetRenderer;
