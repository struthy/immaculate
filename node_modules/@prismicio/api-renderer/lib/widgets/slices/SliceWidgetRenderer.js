"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const content_1 = require("@prismicio/types-internal/lib/content");
const customtypes_1 = require("@prismicio/types-internal/lib/customtypes");
const O = tslib_1.__importStar(require("fp-ts/lib/Option"));
const fetch_1 = require("../../models/fetch");
const CompositeSliceRenderer_1 = tslib_1.__importDefault(require("./CompositeSliceRenderer"));
const SharedSliceRenderer_1 = tslib_1.__importDefault(require("./SharedSliceRenderer"));
const SimpleSliceRenderer_1 = tslib_1.__importDefault(require("./SimpleSliceRenderer"));
const Fetch = {
    extractCompositeSlice(fetch) {
        if (fetch !== undefined && fetch.TYPE === fetch_1.CompositeSliceType) {
            return fetch;
        }
        return undefined;
    },
    extractSharedSlice(fetch) {
        if (fetch !== undefined && fetch.TYPE === fetch_1.SharedSliceType) {
            return fetch;
        }
        return undefined;
    },
    extractGroupOrField(fetch) {
        if (fetch !== undefined && fetch.TYPE !== fetch_1.CompositeSliceType && fetch.TYPE !== fetch_1.SharedSliceType) {
            return fetch;
        }
        return undefined;
    },
};
const SliceWidgetRenderer = (ctx) => ({
    renderV1(content, fetch) {
        if ((0, content_1.isCompositeSliceContent)(content)) {
            return O.some((0, CompositeSliceRenderer_1.default)(ctx).renderV1(content, Fetch.extractCompositeSlice(fetch)));
        }
        else if ((0, content_1.isSharedSliceContent)(content)) {
            return O.some((0, SharedSliceRenderer_1.default)(ctx).renderV1(content, Fetch.extractSharedSlice(fetch)));
        }
        else {
            return (0, SimpleSliceRenderer_1.default)(ctx).renderV1(content, Fetch.extractGroupOrField(fetch));
        }
    },
    renderV2(def, content, fetch) {
        if ((0, content_1.isCompositeSliceContent)(content) && customtypes_1.CompositeSlice.is(def)) {
            return O.some((0, CompositeSliceRenderer_1.default)(ctx).renderV2(def, content, Fetch.extractCompositeSlice(fetch)));
        }
        else if ((0, content_1.isSharedSliceContent)(content) && customtypes_1.SharedSlice.is(def)) {
            return O.some((0, SharedSliceRenderer_1.default)(ctx).renderV2(def, content, Fetch.extractSharedSlice(fetch)));
        }
        else if ((0, content_1.isSimpleSliceContent)(content) && customtypes_1.LegacySlice.is(def)) {
            return (0, SimpleSliceRenderer_1.default)(ctx).renderV2(def, content, Fetch.extractGroupOrField(fetch));
        }
        return O.some(this.renderDefault(def));
    },
    renderDefault(_def) {
        return {};
    },
    renderMocks(def, content) {
        if ((0, content_1.isCompositeSliceContent)(content) && customtypes_1.CompositeSlice.is(def)) {
            return O.some((0, CompositeSliceRenderer_1.default)(ctx).renderMocks(def, content));
        }
        else if ((0, content_1.isSharedSliceContent)(content) && customtypes_1.SharedSlice.is(def)) {
            return O.some((0, SharedSliceRenderer_1.default)(ctx).renderMocks(def, content));
        }
        else if ((0, content_1.isSimpleSliceContent)(content) && customtypes_1.LegacySlice.is(def)) {
            return (0, SimpleSliceRenderer_1.default)(ctx).renderMocks(def, content);
        }
        return O.some(this.renderDefault(def));
    },
});
exports.default = SliceWidgetRenderer;
