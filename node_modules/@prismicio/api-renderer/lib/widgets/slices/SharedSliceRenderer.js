"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const StaticWidgetRenderer_1 = tslib_1.__importDefault(require("../StaticWidgetRenderer"));
function getFetchField(variation, part, fetch) {
    var _a, _b, _c;
    return (_c = (_b = (_a = fetch === null || fetch === void 0 ? void 0 : fetch.variations) === null || _a === void 0 ? void 0 : _a[variation]) === null || _b === void 0 ? void 0 : _b[part]) === null || _c === void 0 ? void 0 : _c.fields;
}
const SharedSliceRenderer = (ctx) => ({
    renderV1(content, fetch) {
        const itemsValue = content.items.map((groupItem) => {
            return (0, StaticWidgetRenderer_1.default)(ctx).renderV1Object(groupItem.value, getFetchField(content.variation, "repeat", fetch));
        });
        const primaryValue = (0, StaticWidgetRenderer_1.default)(ctx).renderV1Object(content.primary, getFetchField(content.variation, "nonRepeat", fetch));
        return {
            variation: content.variation,
            items: itemsValue,
            primary: primaryValue,
        };
    },
    renderV2(def, content, fetch) {
        const variation = def.variations.find((variation) => variation.id === content.variation);
        if (variation === undefined) {
            return this.renderDefault(def);
        }
        const itemsValue = content.items.map((groupItem) => {
            return (0, StaticWidgetRenderer_1.default)(ctx).renderV2Object(groupItem.value, getFetchField(content.variation, "repeat", fetch), variation.items || {}, {
                withFetch: "filter",
            }, {
                default: "default",
                withFetch: "filter",
                withFetchField: "render",
            });
        });
        const primaryValue = (0, StaticWidgetRenderer_1.default)(ctx).renderV2Object(content.primary, getFetchField(content.variation, "nonRepeat", fetch), variation.primary || {}, {
            withFetch: "filter",
        }, {
            default: "default",
            withFetch: "filter",
            withFetchField: "render",
        });
        return {
            variation: content.variation,
            version: variation.version,
            items: itemsValue,
            primary: primaryValue,
        };
    },
    renderDefault(_def) {
        return {};
    },
    renderMocks(def, content) {
        const variation = def.variations.find((variation) => variation.id === content.variation);
        if (variation === undefined) {
            return this.renderDefault(def);
        }
        const itemsValue = content.items.map((groupItem) => {
            return (0, StaticWidgetRenderer_1.default)(ctx).renderMocksObject(groupItem.value, variation.items || {});
        });
        const primaryValue = (0, StaticWidgetRenderer_1.default)(ctx).renderMocksObject(content.primary, variation.primary || {});
        return {
            variation: content.variation,
            version: variation.version,
            items: itemsValue,
            primary: primaryValue,
        };
    },
});
exports.default = SharedSliceRenderer;
