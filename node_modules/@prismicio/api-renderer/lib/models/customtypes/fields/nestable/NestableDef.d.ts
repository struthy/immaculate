import * as t from "io-ts";
export declare const NestableDef: t.UnionC<[t.Type<import("../..").WithKey<{
    type: "Boolean";
} & {
    config?: {
        label?: string | null | undefined;
        default_value?: boolean | undefined;
        placeholder_true?: string | undefined;
        placeholder_false?: string | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "Boolean";
} & {
    config?: {
        label?: string | null | undefined;
        default_value?: boolean | undefined;
        placeholder_true?: string | undefined;
        placeholder_false?: string | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "Color";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "Color";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "Date";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        default?: string | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "Date";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        default?: string | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "Embed";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        useAsTitle?: boolean | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "Embed";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        useAsTitle?: boolean | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "GeoPoint";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "GeoPoint";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "Image";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        constraint?: {
            width?: number | null | undefined;
            height?: number | null | undefined;
        } | undefined;
        thumbnails?: readonly ({
            name: string;
        } & {
            width?: number | null | undefined;
            height?: number | null | undefined;
        })[] | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "Image";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        constraint?: {
            width?: number | null | undefined;
            height?: number | null | undefined;
        } | undefined;
        thumbnails?: readonly ({
            name: string;
        } & {
            width?: number | null | undefined;
            height?: number | null | undefined;
        })[] | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "IntegrationFields";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        catalog?: string | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "IntegrationFields";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        catalog?: string | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "Number";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        min?: number | undefined;
        max?: number | undefined;
        step?: number | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "Number";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        min?: number | undefined;
        max?: number | undefined;
        step?: number | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "Range";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        min?: number | undefined;
        max?: number | undefined;
        step?: number | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "Range";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        min?: number | undefined;
        max?: number | undefined;
        step?: number | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "StructuredText";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        useAsTitle?: boolean | undefined;
        single?: string | undefined;
        multi?: string | undefined;
        imageConstraint?: {
            width?: number | null | undefined;
            height?: number | null | undefined;
        } | undefined;
        labels?: readonly string[] | undefined;
        allowTargetBlank?: boolean | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "StructuredText";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        useAsTitle?: boolean | undefined;
        single?: string | undefined;
        multi?: string | undefined;
        imageConstraint?: {
            width?: number | null | undefined;
            height?: number | null | undefined;
        } | undefined;
        labels?: readonly string[] | undefined;
        allowTargetBlank?: boolean | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "Select";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        default_value?: string | undefined;
        options?: readonly string[] | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "Select";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        default_value?: string | undefined;
        options?: readonly string[] | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "Separator";
} & {
    config?: {
        label?: string | null | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "Separator";
} & {
    config?: {
        label?: string | null | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "Text";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        useAsTitle?: boolean | undefined;
        placeholder?: string | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "Text";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        useAsTitle?: boolean | undefined;
        placeholder?: string | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "Timestamp";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        default?: string | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "Timestamp";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        placeholder?: string | undefined;
        default?: string | undefined;
    } | undefined;
}>, unknown>, t.Type<import("../..").WithKey<{
    type: "Link";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        useAsTitle?: boolean | undefined;
        placeholder?: string | undefined;
        select?: "document" | "media" | "web" | null | undefined;
        customtypes?: readonly string[] | undefined;
        masks?: readonly string[] | undefined;
        tags?: readonly string[] | undefined;
        allowTargetBlank?: boolean | undefined;
    } | undefined;
}>, import("../..").WithKey<{
    type: "Link";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        useAsTitle?: boolean | undefined;
        placeholder?: string | undefined;
        select?: "document" | "media" | "web" | null | undefined;
        customtypes?: readonly string[] | undefined;
        masks?: readonly string[] | undefined;
        tags?: readonly string[] | undefined;
        allowTargetBlank?: boolean | undefined;
    } | undefined;
}>, unknown>]>;
