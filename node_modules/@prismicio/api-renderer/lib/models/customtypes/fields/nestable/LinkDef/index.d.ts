import { Link } from "@prismicio/types-internal/lib/customtypes/widgets/nestable";
import * as t from "io-ts";
import { WithKey } from "../../../utils";
import { AnyLinkDef } from "./AnyLinkDef";
declare const LinkConfig: t.UnionC<[t.ExactC<t.TypeC<{
    select: t.LiteralC<"media">;
}>>, t.ExactC<t.TypeC<{
    select: t.LiteralC<"document">;
    customtypes: t.ReadonlyArrayC<t.StringC>;
}>>, t.ExactC<t.TypeC<{
    select: t.LiteralC<"web">;
}>>, t.Type<AnyLinkDef, AnyLinkDef, unknown>]>;
type LinkConfig = t.TypeOf<typeof LinkConfig>;
export declare const LinkDef: t.Type<WithKey<{
    type: "Link";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        useAsTitle?: boolean | undefined;
        placeholder?: string | undefined;
        select?: "document" | "media" | "web" | null | undefined;
        customtypes?: readonly string[] | undefined;
        masks?: readonly string[] | undefined;
        tags?: readonly string[] | undefined;
        allowTargetBlank?: boolean | undefined;
    } | undefined;
}>, WithKey<{
    type: "Link";
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        useAsTitle?: boolean | undefined;
        placeholder?: string | undefined;
        select?: "document" | "media" | "web" | null | undefined;
        customtypes?: readonly string[] | undefined;
        masks?: readonly string[] | undefined;
        tags?: readonly string[] | undefined;
        allowTargetBlank?: boolean | undefined;
    } | undefined;
}>, unknown>;
export declare function defaultLink(type: LinkConfig["select"]): Link;
export declare function isMediaLinkDef(def: Link): boolean;
export declare function isAnyLinkDef(def: Link): boolean;
export declare function isDocumentLinkDef(def: Link): boolean;
export declare function isWebLinkDef(def: Link): boolean;
export * from "./AnyLinkDef";
export * from "./DocumentLinkDef";
export * from "./MediaLinkDef";
export * from "./WebLinkDef";
