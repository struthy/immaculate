"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedSliceDef = exports.VariationDef = void 0;
const tslib_1 = require("tslib");
const customtypes_1 = require("@prismicio/types-internal/lib/customtypes");
const fp_ts_1 = require("fp-ts");
const function_1 = require("fp-ts/lib/function");
const t = tslib_1.__importStar(require("io-ts"));
const utils_1 = require("../../utils");
const GroupDef_1 = require("../GroupDef");
const NestableDef_1 = require("../nestable/NestableDef");
const variationCodec = t.strict({
    id: t.string,
    primary: t.array(t.union([GroupDef_1.GroupDef, NestableDef_1.NestableDef])),
    items: t.array(NestableDef_1.NestableDef),
    version: t.string,
});
exports.VariationDef = new t.Type("VariationDef", (u) => (0, utils_1.hasType)(u) && customtypes_1.Variation.is(u), (u) => {
    return (0, function_1.pipe)(variationCodec.decode(u), fp_ts_1.either.map((v) => {
        return {
            id: v.id,
            name: v.id,
            description: v.id,
            imageUrl: "",
            docURL: "",
            version: v.version,
            primary: v.primary.reduce((acc, { key, def }) => ({ ...acc, [key]: def }), {}),
            items: v.items.reduce((acc, { key, def }) => ({ ...acc, [key]: def }), {}),
        };
    }));
}, (v) => v);
const LegacyPath = t.string;
const VariationId = t.string;
const sliceCodec = t.intersection([
    t.strict({
        name: t.string,
        variations: t.array(exports.VariationDef),
    }),
    t.partial({
        legacyPaths: t.record(LegacyPath, VariationId),
    }),
]);
exports.SharedSliceDef = new t.Type("SharedSliceDef", (u) => (0, utils_1.isFieldDef)(u) && customtypes_1.SharedSlice.is(u.def), (u) => {
    return (0, function_1.pipe)(sliceCodec.decode(u), fp_ts_1.either.map(({ name, variations, legacyPaths }) => ({
        key: name,
        def: {
            id: name,
            name,
            type: "SharedSlice",
            variations,
            ...(legacyPaths ? { legacyPaths } : {}),
        },
    })));
}, (s) => s);
