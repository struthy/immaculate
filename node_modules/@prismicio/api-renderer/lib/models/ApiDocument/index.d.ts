import * as t from "io-ts";
import type { CustomTypeDef } from "../customtypes";
import { DocumentContent } from "./DocumentContent";
export declare const GroupLangId: t.StringC;
declare const RawApiDocument: t.ExactC<t.IntersectionC<[t.TypeC<{
    id: t.StringC;
    version: t.StringC;
    type: t.StringC;
    groupLangId: t.StringC;
    tags: t.ArrayC<t.StringC>;
    data: t.UnknownRecordC;
    language: t.StringC;
}>, t.PartialC<{
    first_publication_date: t.UnionC<[t.Type<Date, Date, unknown>, t.NullC, t.UndefinedC]>;
    last_publication_date: t.UnionC<[t.Type<Date, Date, unknown>, t.NullC, t.UndefinedC]>;
    metadata: t.UnionC<[t.Type<{
        title: string;
        description: string;
    } & {
        imageURL?: string | null | undefined;
    }, {
        title: string;
        description: string;
    } & {
        imageURL?: string | null | undefined;
    }, unknown>, t.NullC, t.UndefinedC]>;
}>]>>;
export type RawApiDocument = t.TypeOf<typeof RawApiDocument>;
declare const ApiDocument: (customType?: CustomTypeDef | undefined) => t.Type<{
    id: string;
    version: string;
    type: string;
    groupLangId: string;
    tags: string[];
    data: {
        [key: string]: unknown;
    };
    language: string;
} & {
    first_publication_date?: Date | null | undefined;
    last_publication_date?: Date | null | undefined;
    metadata?: ({
        title: string;
        description: string;
    } & {
        imageURL?: string | null | undefined;
    }) | null | undefined;
}, {
    id: string;
    version: string;
    type: string;
    groupLangId: string;
    tags: string[];
    data: DocumentContent;
    language: string;
    first_publication_date: Date | null | undefined;
    last_publication_date: Date | null | undefined;
    metadata: ({
        title: string;
        description: string;
    } & {
        imageURL?: string | null | undefined;
    }) | null | undefined;
}, unknown>;
export type ApiDocument = t.OutputOf<ReturnType<typeof ApiDocument>>;
export declare const ApiDocumentCodec: (customTypes?: ReadonlyArray<CustomTypeDef> | undefined) => t.Type<{
    id: string;
    version: string;
    type: string;
    groupLangId: string;
    tags: string[];
    data: DocumentContent;
    language: string;
    first_publication_date: Date | null | undefined;
    last_publication_date: Date | null | undefined;
    metadata: ({
        title: string;
        description: string;
    } & {
        imageURL?: string | null | undefined;
    }) | null | undefined;
}, {
    id: string;
    version: string;
    type: string;
    groupLangId: string;
    tags: string[];
    data: DocumentContent;
    language: string;
    first_publication_date: Date | null | undefined;
    last_publication_date: Date | null | undefined;
    metadata: ({
        title: string;
        description: string;
    } & {
        imageURL?: string | null | undefined;
    }) | null | undefined;
}, unknown>;
export { DocumentContent } from "./DocumentContent";
export { DocumentMetadata } from "./DocumentMetadata";
export { RelatedDocument } from "./RelatedDocument";
