"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelatedDocument = exports.DocumentMetadata = exports.DocumentContent = exports.ApiDocumentCodec = exports.GroupLangId = void 0;
const tslib_1 = require("tslib");
const validators_1 = require("@prismicio/types-internal/lib/validators");
const fp_ts_1 = require("fp-ts");
const function_1 = require("fp-ts/function");
const t = tslib_1.__importStar(require("io-ts"));
const io_ts_types_1 = require("io-ts-types");
const mapOutput_1 = require("io-ts-types/lib/mapOutput");
const DocumentContent_1 = require("./DocumentContent");
const DocumentMetadata_1 = require("./DocumentMetadata");
exports.GroupLangId = t.string;
const RawApiDocument = t.exact(t.intersection([
    t.type({
        id: t.string,
        version: t.string,
        type: t.string,
        groupLangId: exports.GroupLangId,
        tags: t.array(t.string),
        data: t.UnknownRecord,
        language: t.string,
    }),
    t.partial({
        first_publication_date: validators_1.Function.nullable(validators_1.DateFromStringOrNumber),
        last_publication_date: validators_1.Function.nullable(validators_1.DateFromStringOrNumber),
        metadata: (0, io_ts_types_1.withFallback)(validators_1.Function.nullable(DocumentMetadata_1.DocumentMetadata.codec), DocumentMetadata_1.DocumentMetadata.empty),
    }),
]));
const ApiDocument = (customType) => (0, mapOutput_1.mapOutput)(RawApiDocument, (rawDoc) => {
    return {
        id: rawDoc.id,
        version: rawDoc.version,
        type: rawDoc.type,
        groupLangId: rawDoc.groupLangId,
        tags: rawDoc.tags,
        data: new DocumentContent_1.DocumentContent(rawDoc.data, customType),
        language: rawDoc.language,
        first_publication_date: rawDoc.first_publication_date,
        last_publication_date: rawDoc.last_publication_date,
        metadata: rawDoc.metadata,
    };
});
const ApiDocumentCodec = (customTypes) => new t.Type("DocCodec", (u) => ApiDocument().is(u), (u, c) => (0, function_1.pipe)(RawApiDocument.validate(u, c), fp_ts_1.either.chain((s) => {
    const customType = customTypes && customTypes.find((c) => c.customTypeId === s.type);
    return t.success(ApiDocument(customType).encode(s));
})), (doc) => doc);
exports.ApiDocumentCodec = ApiDocumentCodec;
var DocumentContent_2 = require("./DocumentContent");
Object.defineProperty(exports, "DocumentContent", { enumerable: true, get: function () { return DocumentContent_2.DocumentContent; } });
var DocumentMetadata_2 = require("./DocumentMetadata");
Object.defineProperty(exports, "DocumentMetadata", { enumerable: true, get: function () { return DocumentMetadata_2.DocumentMetadata; } });
var RelatedDocument_1 = require("./RelatedDocument");
Object.defineProperty(exports, "RelatedDocument", { enumerable: true, get: function () { return RelatedDocument_1.RelatedDocument; } });
