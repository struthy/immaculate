import * as t from "io-ts";
declare const CustomParam: t.TypeC<{
    isOptional: t.BooleanC;
    name: t.StringC;
    type: t.LiteralC<"custom">;
}>;
export type CustomParam = t.TypeOf<typeof CustomParam>;
declare const UIDParam: t.TypeC<{
    isOptional: t.BooleanC;
    type: t.LiteralC<"uid">;
}>;
export type UIDParam = t.TypeOf<typeof UIDParam>;
declare const LangParam: t.TypeC<{
    isOptional: t.BooleanC;
    type: t.LiteralC<"lang">;
}>;
export type LangParam = t.TypeOf<typeof LangParam>;
declare const DynamicParam: t.UnionC<[t.TypeC<{
    isOptional: t.BooleanC;
    name: t.StringC;
    type: t.LiteralC<"custom">;
}>, t.TypeC<{
    isOptional: t.BooleanC;
    type: t.LiteralC<"uid">;
}>, t.TypeC<{
    isOptional: t.BooleanC;
    type: t.LiteralC<"lang">;
}>]>;
export type DynamicParam = t.TypeOf<typeof DynamicParam>;
declare const StaticParam: t.TypeC<{
    value: t.StringC;
    type: t.LiteralC<"static">;
}>;
export type StaticParam = t.TypeOf<typeof StaticParam>;
declare const URLParam: t.UnionC<[t.TypeC<{
    value: t.StringC;
    type: t.LiteralC<"static">;
}>, t.UnionC<[t.TypeC<{
    isOptional: t.BooleanC;
    name: t.StringC;
    type: t.LiteralC<"custom">;
}>, t.TypeC<{
    isOptional: t.BooleanC;
    type: t.LiteralC<"uid">;
}>, t.TypeC<{
    isOptional: t.BooleanC;
    type: t.LiteralC<"lang">;
}>]>]>;
export type URLParam = t.TypeOf<typeof URLParam>;
declare const URLPattern: t.TypeC<{
    trailingSlash: t.BooleanC;
    params: t.ArrayC<t.UnionC<[t.TypeC<{
        value: t.StringC;
        type: t.LiteralC<"static">;
    }>, t.UnionC<[t.TypeC<{
        isOptional: t.BooleanC;
        name: t.StringC;
        type: t.LiteralC<"custom">;
    }>, t.TypeC<{
        isOptional: t.BooleanC;
        type: t.LiteralC<"uid">;
    }>, t.TypeC<{
        isOptional: t.BooleanC;
        type: t.LiteralC<"lang">;
    }>]>]>>;
}>;
export type URLPattern = t.TypeOf<typeof URLPattern>;
declare const URLResolver: t.RecordC<t.StringC, t.ArrayC<t.TypeC<{
    customTypeID: t.StringC;
    relationName: t.StringC;
    targetCustomTypeID: t.StringC;
}>>>;
export type URLResolver = t.TypeOf<typeof URLResolver>;
export declare const Rule: t.TypeC<{
    pattern: t.TypeC<{
        trailingSlash: t.BooleanC;
        params: t.ArrayC<t.UnionC<[t.TypeC<{
            value: t.StringC;
            type: t.LiteralC<"static">;
        }>, t.UnionC<[t.TypeC<{
            isOptional: t.BooleanC;
            name: t.StringC;
            type: t.LiteralC<"custom">;
        }>, t.TypeC<{
            isOptional: t.BooleanC;
            type: t.LiteralC<"uid">;
        }>, t.TypeC<{
            isOptional: t.BooleanC;
            type: t.LiteralC<"lang">;
        }>]>]>>;
    }>;
    resolvers: t.RecordC<t.StringC, t.ArrayC<t.TypeC<{
        customTypeID: t.StringC;
        relationName: t.StringC;
        targetCustomTypeID: t.StringC;
    }>>>;
}>;
export type Rule = t.TypeOf<typeof Rule>;
export declare const LinkResolver: t.RecordC<t.StringC, t.RecordC<t.StringC, t.RecordC<t.StringC, t.TypeC<{
    pattern: t.TypeC<{
        trailingSlash: t.BooleanC;
        params: t.ArrayC<t.UnionC<[t.TypeC<{
            value: t.StringC;
            type: t.LiteralC<"static">;
        }>, t.UnionC<[t.TypeC<{
            isOptional: t.BooleanC;
            name: t.StringC;
            type: t.LiteralC<"custom">;
        }>, t.TypeC<{
            isOptional: t.BooleanC;
            type: t.LiteralC<"uid">;
        }>, t.TypeC<{
            isOptional: t.BooleanC;
            type: t.LiteralC<"lang">;
        }>]>]>>;
    }>;
    resolvers: t.RecordC<t.StringC, t.ArrayC<t.TypeC<{
        customTypeID: t.StringC;
        relationName: t.StringC;
        targetCustomTypeID: t.StringC;
    }>>>;
}>>>>;
export type LinkResolver = t.TypeOf<typeof LinkResolver>;
export type URLPart = {
    value: string;
    withSeparator: boolean;
};
export declare function staticParam(value: string): StaticParam;
export declare function uidParam(isOptional: boolean): UIDParam;
export declare function langParam(isOptional: boolean): LangParam;
export declare function customParam(name: string, isOptional: boolean): CustomParam;
export {};
