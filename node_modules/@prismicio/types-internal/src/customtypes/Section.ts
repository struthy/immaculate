import * as t from "io-ts"

import { WidgetKey } from "../common"
import type { SharedSlice } from "./widgets/slices"
import { DynamicWidget, StaticWidget, Widgets } from "./widgets/Widget"

export function sectionReader<T extends StaticWidget | DynamicWidget>(
	codec: t.Type<T, unknown>,
) {
	return t.record(WidgetKey, codec) // WidgetId -> Widget Data
}

export const StaticSection = sectionReader(StaticWidget)
export type StaticSection = t.TypeOf<typeof StaticSection>

export const DynamicSection = sectionReader(DynamicWidget)
export type DynamicSection = t.TypeOf<typeof DynamicSection>

export const Sections = {
	toStatic(
		dynamic: DynamicSection,
		sharedSlices: Map<string, SharedSlice>,
	): StaticSection {
		const section = Object.entries(dynamic).reduce(
			(
				acc: { [key: string]: StaticWidget },
				[widgetKey, widget]: [string, DynamicWidget],
			) => {
				return { ...acc, [widgetKey]: Widgets.toStatic(widget, sharedSlices) }
			},
			{},
		)
		return section as StaticSection
	},
}
