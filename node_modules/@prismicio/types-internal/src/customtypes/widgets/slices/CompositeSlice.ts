import * as t from "io-ts"

import { WidgetKey } from "../../../common"
import { StringOrNull } from "../../../validators"
import { NestableWidget } from "../nestable/NestableWidget"
import type { DynamicSlice, StaticSlice } from "./Slice"

export const CompositeSliceType = "Slice"

export const CompositeSliceConfig = t.exact(
	t.partial({
		label: StringOrNull,
	}),
)
export type CompositeSliceConfig = t.TypeOf<typeof CompositeSliceConfig>

export const CompositeSlice = t.exact(
	t.intersection([
		t.type({
			type: t.literal(CompositeSliceType),
		}),
		t.partial({
			fieldset: StringOrNull,
			description: t.string,
			icon: t.string,
			display: t.string,
			"non-repeat": t.record(WidgetKey, NestableWidget),
			repeat: t.record(WidgetKey, NestableWidget),
			config: CompositeSliceConfig,
		}),
	]),
)
export type CompositeSlice = t.TypeOf<typeof CompositeSlice>

export function isCompositeSlice(
	slice: DynamicSlice | StaticSlice,
): slice is CompositeSlice {
	return slice.type === "Slice"
}
