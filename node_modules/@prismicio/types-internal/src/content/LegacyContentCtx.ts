import * as t from "io-ts"

import { FieldType, SlicesTypes } from "../customtypes/widgets"

export const FieldOrSliceType = t.union([FieldType, SlicesTypes])
export type FieldOrSliceType = t.TypeOf<typeof FieldOrSliceType>
export class LegacyContentCtx {
	fieldKey: string
	prefixedKey: string
	keyOfType: string
	fieldPath: Array<string>
	fieldType?: FieldOrSliceType | undefined
	allTypes: Map<string, FieldOrSliceType>

	constructor(
		fieldKey: string,
		fieldPath?: Array<string>,
		allTypes?: Map<string, FieldOrSliceType>,
	) {
		this.fieldKey = fieldKey
		this.fieldPath = fieldPath || []
		this.allTypes = allTypes || new Map<string, FieldOrSliceType>()

		const prefixedKey = Array.of(this.fieldPath, [this.fieldKey])
			.flat()
			.join(".")

		this.prefixedKey = prefixedKey
		this.keyOfType = `${prefixedKey}_TYPE`

		this.fieldType = this.allTypes.get(this.prefixedKey)
	}
}

export function getFieldCtx(
	fieldKey: string,
	ctx: LegacyContentCtx,
	prefixes?: Array<string>,
): LegacyContentCtx {
	return new LegacyContentCtx(
		fieldKey,
		[...ctx.fieldPath, ctx.fieldKey, ...(prefixes || [])],
		ctx.allTypes,
	)
}

export function defaultCtx(
	key: string,
	allTypes: Map<string, FieldOrSliceType> = new Map(),
): LegacyContentCtx {
	return new LegacyContentCtx(key, [], allTypes)
}

export type WithTypes<T> = {
	types: Record<string, FieldOrSliceType>
	content: T
}
