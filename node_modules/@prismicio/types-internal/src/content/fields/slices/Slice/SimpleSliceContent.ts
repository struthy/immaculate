import * as t from "io-ts"

import type {
	ContentPath,
	TraverseSliceContentFn,
	TraverseWidgetContentFn,
} from "../../../../_internal/utils"
import type {
	Group,
	NestableWidget,
	VariationFields,
} from "../../../../customtypes"
import type { LegacyContentCtx } from "../../../LegacyContentCtx"
import {
	GroupContent,
	GroupItemContent,
	GroupLegacy,
	isGroupContent,
	traverseGroupContent,
} from "../../GroupContent"
import {
	isNestableContent,
	NestableContent,
	NestableLegacy,
} from "../../nestable"
import type {
	SharedSliceItemContent,
	SimpleSliceItemContent,
} from "../SliceItem"

export const SimpleSliceContent = t.union([NestableContent, GroupContent])
export type SimpleSliceContent = t.TypeOf<typeof SimpleSliceContent>

export const isSimpleSliceContent = (u: unknown): u is SimpleSliceContent =>
	isNestableContent(u) || isGroupContent(u)

export const SimpleSliceLegacy = (ctx: LegacyContentCtx) => {
	return {
		decode: (() => {
			if (ctx.fieldType === "Group") return GroupLegacy(ctx).decode.bind(null)
			return NestableLegacy(ctx).decode.bind(null)
		})(),

		encode: (value: SimpleSliceContent) => {
			switch (value.__TYPE__) {
				case "GroupContentType":
					return GroupLegacy(ctx).encode(value)
				default:
					return NestableLegacy(ctx).encode(value)
			}
		},
	}
}

export function traverseSimpleSliceContent({
	path,
	sliceKey,
	sliceName,
	model,
	content,
}: {
	path: ContentPath
	sliceKey: string
	sliceName: string
	content: SimpleSliceItemContent
	model?: VariationFields | Group | NestableWidget | undefined
}) {
	return (
		transformWidget: TraverseWidgetContentFn,
		transformSlice: TraverseSliceContentFn,
	): SharedSliceItemContent | SimpleSliceItemContent | undefined => {
		if (isGroupContent(content.widget)) {
			const convertedGroupWidget: GroupContent | undefined =
				traverseGroupContent({
					path,
					key: content.key,
					apiId: content.name,
					model: (() => {
						if (model?.type === "Group") return model
						if (model?.type === "SharedSlice")
							return {
								type: "Group",
								config: { fields: model.fields.items || {} },
							}
						return
					})(),
					content: content.widget,
				})(transformWidget)

			return (
				convertedGroupWidget &&
				transformSlice({
					key: content.key,
					apiId: content.name,
					path,
					model,
					content: {
						...content,
						widget: convertedGroupWidget,
					},
				})
			)
		}

		const convertedNestable: NestableContent | undefined = transformWidget({
			key: content.key,
			apiId: content.name,
			path,
			model: (() => {
				if (model?.type === "SharedSlice")
					return model.fields.primary?.[content.name]
				if (model?.type !== "Group") return model
				return
			})(),
			content: content.widget,
		})

		return (
			convertedNestable &&
			transformSlice({
				key: sliceKey,
				apiId: sliceName,
				path,
				model,
				content: {
					...content,
					widget: convertedNestable,
				},
			})
		)
	}
}

export function migrateSimpleSlice(
	model: VariationFields,
	content: SimpleSliceItemContent,
): SharedSliceItemContent {
	const [, sliceUUID] = content.key.split("$")
	const key = `${model.sliceName}$${sliceUUID}`

	if (content.widget.__TYPE__ === "GroupContentType") {
		return {
			key,
			name: model.sliceName,
			maybeLabel: content.maybeLabel,
			widget: {
				__TYPE__: "SharedSliceContent",
				variation: model.variationId,
				primary: {},
				items: content.widget.value.map((groupItem) => {
					return {
						__TYPE__: "GroupItemContent",
						value: groupItem.value.reduce<GroupItemContent["value"]>(
							(acc, [fieldKey, fieldContent]) => {
								return model.fields.items?.[fieldKey]
									? acc.concat([[fieldKey, fieldContent]])
									: acc
							},
							[],
						),
					}
				}, []),
			},
		}
	}
	return {
		key,
		name: model.sliceName,
		maybeLabel: content.maybeLabel,
		widget: {
			__TYPE__: "SharedSliceContent",
			variation: model.variationId,
			primary: model.fields.primary?.[content.name]
				? { [content.name]: content.widget }
				: {},
			items: [],
		},
	}
}
