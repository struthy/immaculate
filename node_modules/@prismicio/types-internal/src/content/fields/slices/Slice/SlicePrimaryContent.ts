import * as t from "io-ts"

import { GroupFieldType } from "../../../../customtypes"
import type { LegacyContentCtx } from "../../../LegacyContentCtx"
import { GroupContent, GroupLegacy, isGroupContent } from "../../GroupContent"
import {
	isNestableContent,
	NestableContent,
	NestableLegacy,
} from "../../nestable"

export const SlicePrimaryContent = t.union([NestableContent, GroupContent])

export type SlicePrimaryContent = t.TypeOf<typeof SlicePrimaryContent>
export type SlicePrimaryContentType = SlicePrimaryContent["__TYPE__"]

export const SlicePrimaryLegacy = (ctx: LegacyContentCtx) => {
	const groupCodec = GroupLegacy(ctx)
	const nestableCodec = NestableLegacy(ctx)

	return {
		decode(value: unknown) {
			if (ctx.fieldType === GroupFieldType) {
				return groupCodec.decode(value)
			}

			return nestableCodec.decode(value)
		},
		encode(value: SlicePrimaryContent) {
			if (isGroupContent(value)) {
				return groupCodec.encode(value)
			}

			return nestableCodec.encode(value)
		},
	}
}

export const isSlicePrimaryContent = (u: unknown): u is SlicePrimaryContent =>
	isNestableContent(u) || isGroupContent(u)
