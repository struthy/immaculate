import * as t from "io-ts"

import type { LegacyContentCtx } from "../../../LegacyContentCtx"
import {
	CompositeSliceContent,
	CompositeSliceLegacy,
} from "./CompositeSliceContent"
import { SharedSliceContent, SharedSliceLegacy } from "./SharedSliceContent"
import { SimpleSliceContent, SimpleSliceLegacy } from "./SimpleSliceContent"

export const SliceLegacy = (ctx: LegacyContentCtx) => {
	return {
		decode: (value: unknown) => {
			const codec = (() => {
				switch (ctx.fieldType) {
					case "Slice":
						return CompositeSliceLegacy(ctx)
					case "SharedSlice":
						return SharedSliceLegacy(ctx)
					default:
						return SimpleSliceLegacy(ctx)
				}
			})()

			return codec.decode(value)
		},

		encode: (value: SliceContent) => {
			switch (value.__TYPE__) {
				case "SharedSliceContent":
					return SharedSliceLegacy(ctx).encode(value)
				case "CompositeSliceContent":
					return CompositeSliceLegacy(ctx).encode(value)
				default:
					return SimpleSliceLegacy(ctx).encode(value)
			}
		},
	}
}

export const SliceContent = t.union([
	CompositeSliceContent,
	SharedSliceContent,
	SimpleSliceContent,
])

export type SliceContent = t.TypeOf<typeof SliceContent>

export * from "./CompositeSliceContent"
export * from "./SharedSliceContent"
export * from "./SimpleSliceContent"
export * from "./SlicePrimaryContent"
