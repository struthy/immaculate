import { either } from "fp-ts"
import { pipe } from "fp-ts/lib/function"
import * as t from "io-ts"

import type { LegacyContentCtx, WithTypes } from "../../../LegacyContentCtx"
import { hasContentType } from "../../../utils"
import { Block, BlockLegacy } from "./Blocks"

export const RichTextContentType = "StructuredTextContent"
export const isRichTextContent = (u: unknown): u is RichTextContent =>
	hasContentType(u) && u.__TYPE__ === RichTextContentType

const legacyReader = t.array(BlockLegacy)
type RichTextLegacy = t.TypeOf<typeof legacyReader>

export const RichTextContent = t.strict({
	__TYPE__: t.literal(RichTextContentType),
	value: t.array(Block),
})
export type RichTextContent = t.TypeOf<typeof RichTextContent>

export * from "./Blocks"

export const RichTextLegacy = (ctx: LegacyContentCtx) =>
	new t.Type<RichTextContent, WithTypes<RichTextLegacy>, unknown>(
		"RichTextLegacy",
		isRichTextContent,
		(u) => {
			return pipe(
				legacyReader.decode(u),
				either.map((r) => ({ value: r, __TYPE__: RichTextContentType })),
			)
		},

		(r: RichTextContent): WithTypes<RichTextLegacy> => {
			return {
				content: legacyReader.encode(r.value),
				types: { [ctx.keyOfType]: "StructuredText" },
			}
		},
	)
