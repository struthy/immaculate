import { either } from "fp-ts"
import { pipe } from "fp-ts/lib/function"
import * as t from "io-ts"

import { Select, SelectFieldType } from "../../../../customtypes/widgets"
import TrimmedString from "../../../../validators/TrimmedString"
import type { LegacyContentCtx, WithTypes } from "../../../LegacyContentCtx"
import { hasContentType, hasFieldContentType } from "../../../utils"
import { FieldContentType } from "./common"

export const isSelectContent = (u: unknown): u is SelectContent =>
	hasContentType(u) &&
	u.__TYPE__ === FieldContentType &&
	hasFieldContentType(u) &&
	u.type === "Select"

export const SelectLegacy = (ctx: LegacyContentCtx) =>
	new t.Type<SelectContent, WithTypes<string>, unknown>(
		"SelectLegacy",
		isSelectContent,
		(u) => {
			return pipe(
				TrimmedString.decode(u),
				either.map((f) =>
					SelectContent.encode({
						value: f,
						type: SelectFieldType,
						__TYPE__: FieldContentType,
					}),
				),
			)
		},

		(b: SelectContent) => {
			return {
				content: b.value,
				types: { [ctx.keyOfType]: SelectFieldType },
			}
		},
	)

export const SelectContent = t.strict({
	type: t.literal(SelectFieldType),
	value: TrimmedString,
	__TYPE__: t.literal(FieldContentType),
})

export type SelectContent = t.TypeOf<typeof SelectContent>

export const SelectContentDefaultValue = (
	field: Select,
): SelectContent | undefined =>
	field.config?.default_value
		? {
				__TYPE__: FieldContentType,
				type: SelectFieldType,
				value: field.config.default_value || "",
		  }
		: undefined
