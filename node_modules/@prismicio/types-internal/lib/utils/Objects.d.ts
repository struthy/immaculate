export declare function zipObjects<A, B = A>(objLeft?: Partial<Record<string, A>> | undefined, objRight?: Partial<Record<string, B>> | undefined): Partial<Record<string, {
    left?: A | undefined;
    right?: B | undefined;
}>>;
export declare function isNotEmpty<A extends object>(obj: A): boolean;
export declare function withOptionals<T extends object>(object: T, optionals: Array<[keyof T, T[keyof T] | null | undefined]>): T;
export declare function isObject(value: unknown): value is Record<string, unknown>;
export declare function mapValues<T, O>(record: Record<string, T>, fn: (value: T, key: string) => O): Record<string, O>;
