import * as t from "io-ts";
import { SharedSlice } from "./SharedSlice";
import { SharedSliceRef } from "./SharedSliceRef";
export declare const LegacySlicesFieldType = "Choice";
export declare const SlicesFieldType = "Slices";
export declare const SlicesLabels: t.UnionC<[t.RecordC<t.StringC, t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
    name: t.StringC;
}>, t.PartialC<{
    display: t.StringC;
}>]>>>>, t.NullC]>;
export declare type SlicesLabels = t.TypeOf<typeof SlicesLabels>;
export declare function slicesConfigReader<T extends SharedSlice | SharedSliceRef>(codec: t.Type<T, unknown>): t.ExactC<t.PartialC<{
    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    labels: t.UnionC<[t.RecordC<t.StringC, t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
        name: t.StringC;
    }>, t.PartialC<{
        display: t.StringC;
    }>]>>>>, t.NullC]>;
    choices: t.RecordC<t.Type<string, string, unknown>, t.UnionC<[t.UnionC<[t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Color">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Boolean">;
    }>, t.PartialC<{
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            default_value: t.BooleanC;
            placeholder_true: t.StringC;
            placeholder_false: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Embed">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            useAsTitle: t.BooleanC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"GeoPoint">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Date">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            default: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Number">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Range">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"StructuredText">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            useAsTitle: t.BooleanC;
            single: t.Type<string, string, unknown>;
            multi: t.Type<string, string, unknown>;
            imageConstraint: t.PartialC<{
                width: t.Type<number | null, unknown, unknown>;
                height: t.Type<number | null, unknown, unknown>;
            }>;
            labels: t.Type<readonly string[], object, unknown>;
            allowTargetBlank: t.BooleanC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Select">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            default_value: t.StringC;
            options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Separator">;
    }>, t.PartialC<{
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Text">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            useAsTitle: t.BooleanC;
            placeholder: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Timestamp">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            default: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Link">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            useAsTitle: t.BooleanC;
            placeholder: t.StringC;
            select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
            customtypes: t.ReadonlyArrayC<t.StringC>;
            masks: t.Type<readonly string[], object, unknown>;
            tags: t.Type<readonly string[], object, unknown>;
            allowTargetBlank: t.BooleanC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Image">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            constraint: t.PartialC<{
                width: t.Type<number | null, unknown, unknown>;
                height: t.Type<number | null, unknown, unknown>;
            }>;
            thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                name: t.StringC;
            }>, t.PartialC<{
                width: t.Type<number | null, unknown, unknown>;
                height: t.Type<number | null, unknown, unknown>;
            }>]>>>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"IntegrationFields">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            catalog: t.StringC;
        }>>;
    }>]>>]>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Group">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        icon: t.StringC;
        description: t.StringC;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            repeat: t.BooleanC;
            fields: t.RecordC<t.Type<string, string, unknown>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Color">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Boolean">;
            }>, t.PartialC<{
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    default_value: t.BooleanC;
                    placeholder_true: t.StringC;
                    placeholder_false: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Embed">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    useAsTitle: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"GeoPoint">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Date">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Number">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Range">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"StructuredText">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    useAsTitle: t.BooleanC;
                    single: t.Type<string, string, unknown>;
                    multi: t.Type<string, string, unknown>;
                    imageConstraint: t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>;
                    labels: t.Type<readonly string[], object, unknown>;
                    allowTargetBlank: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Select">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default_value: t.StringC;
                    options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Separator">;
            }>, t.PartialC<{
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Text">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    useAsTitle: t.BooleanC;
                    placeholder: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Timestamp">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Link">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    useAsTitle: t.BooleanC;
                    placeholder: t.StringC;
                    select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                    customtypes: t.ReadonlyArrayC<t.StringC>;
                    masks: t.Type<readonly string[], object, unknown>;
                    tags: t.Type<readonly string[], object, unknown>;
                    allowTargetBlank: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Image">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    constraint: t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>;
                    thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                        name: t.StringC;
                    }>, t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>]>>>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"IntegrationFields">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    catalog: t.StringC;
                }>>;
            }>]>>]>>;
        }>>;
    }>]>>]>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Slice">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        description: t.StringC;
        icon: t.StringC;
        display: t.StringC;
        "non-repeat": t.RecordC<t.Type<string, string, unknown>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Color">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Boolean">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                default_value: t.BooleanC;
                placeholder_true: t.StringC;
                placeholder_false: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Embed">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"GeoPoint">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Date">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Number">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Range">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"StructuredText">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
                single: t.Type<string, string, unknown>;
                multi: t.Type<string, string, unknown>;
                imageConstraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                labels: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Select">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default_value: t.StringC;
                options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Separator">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Text">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Timestamp">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Link">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
                select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                customtypes: t.ReadonlyArrayC<t.StringC>;
                masks: t.Type<readonly string[], object, unknown>;
                tags: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Image">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                constraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                    name: t.StringC;
                }>, t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>]>>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"IntegrationFields">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                catalog: t.StringC;
            }>>;
        }>]>>]>>;
        repeat: t.RecordC<t.Type<string, string, unknown>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Color">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Boolean">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                default_value: t.BooleanC;
                placeholder_true: t.StringC;
                placeholder_false: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Embed">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"GeoPoint">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Date">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Number">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Range">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"StructuredText">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
                single: t.Type<string, string, unknown>;
                multi: t.Type<string, string, unknown>;
                imageConstraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                labels: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Select">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default_value: t.StringC;
                options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Separator">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Text">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Timestamp">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Link">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
                select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                customtypes: t.ReadonlyArrayC<t.StringC>;
                masks: t.Type<readonly string[], object, unknown>;
                tags: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Image">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                constraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                    name: t.StringC;
                }>, t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>]>>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"IntegrationFields">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                catalog: t.StringC;
            }>>;
        }>]>>]>>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        }>>;
    }>]>>, t.Type<T, unknown, unknown>]>>;
}>>;
export declare const StaticSlicesConfig: t.ExactC<t.PartialC<{
    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    labels: t.UnionC<[t.RecordC<t.StringC, t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
        name: t.StringC;
    }>, t.PartialC<{
        display: t.StringC;
    }>]>>>>, t.NullC]>;
    choices: t.RecordC<t.Type<string, string, unknown>, t.UnionC<[t.UnionC<[t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Color">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Boolean">;
    }>, t.PartialC<{
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            default_value: t.BooleanC;
            placeholder_true: t.StringC;
            placeholder_false: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Embed">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            useAsTitle: t.BooleanC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"GeoPoint">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Date">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            default: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Number">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Range">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"StructuredText">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            useAsTitle: t.BooleanC;
            single: t.Type<string, string, unknown>;
            multi: t.Type<string, string, unknown>;
            imageConstraint: t.PartialC<{
                width: t.Type<number | null, unknown, unknown>;
                height: t.Type<number | null, unknown, unknown>;
            }>;
            labels: t.Type<readonly string[], object, unknown>;
            allowTargetBlank: t.BooleanC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Select">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            default_value: t.StringC;
            options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Separator">;
    }>, t.PartialC<{
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Text">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            useAsTitle: t.BooleanC;
            placeholder: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Timestamp">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            default: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Link">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            useAsTitle: t.BooleanC;
            placeholder: t.StringC;
            select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
            customtypes: t.ReadonlyArrayC<t.StringC>;
            masks: t.Type<readonly string[], object, unknown>;
            tags: t.Type<readonly string[], object, unknown>;
            allowTargetBlank: t.BooleanC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Image">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            constraint: t.PartialC<{
                width: t.Type<number | null, unknown, unknown>;
                height: t.Type<number | null, unknown, unknown>;
            }>;
            thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                name: t.StringC;
            }>, t.PartialC<{
                width: t.Type<number | null, unknown, unknown>;
                height: t.Type<number | null, unknown, unknown>;
            }>]>>>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"IntegrationFields">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            catalog: t.StringC;
        }>>;
    }>]>>]>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Group">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        icon: t.StringC;
        description: t.StringC;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            repeat: t.BooleanC;
            fields: t.RecordC<t.Type<string, string, unknown>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Color">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Boolean">;
            }>, t.PartialC<{
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    default_value: t.BooleanC;
                    placeholder_true: t.StringC;
                    placeholder_false: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Embed">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    useAsTitle: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"GeoPoint">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Date">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Number">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Range">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"StructuredText">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    useAsTitle: t.BooleanC;
                    single: t.Type<string, string, unknown>;
                    multi: t.Type<string, string, unknown>;
                    imageConstraint: t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>;
                    labels: t.Type<readonly string[], object, unknown>;
                    allowTargetBlank: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Select">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default_value: t.StringC;
                    options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Separator">;
            }>, t.PartialC<{
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Text">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    useAsTitle: t.BooleanC;
                    placeholder: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Timestamp">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Link">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    useAsTitle: t.BooleanC;
                    placeholder: t.StringC;
                    select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                    customtypes: t.ReadonlyArrayC<t.StringC>;
                    masks: t.Type<readonly string[], object, unknown>;
                    tags: t.Type<readonly string[], object, unknown>;
                    allowTargetBlank: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Image">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    constraint: t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>;
                    thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                        name: t.StringC;
                    }>, t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>]>>>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"IntegrationFields">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    catalog: t.StringC;
                }>>;
            }>]>>]>>;
        }>>;
    }>]>>]>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Slice">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        description: t.StringC;
        icon: t.StringC;
        display: t.StringC;
        "non-repeat": t.RecordC<t.Type<string, string, unknown>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Color">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Boolean">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                default_value: t.BooleanC;
                placeholder_true: t.StringC;
                placeholder_false: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Embed">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"GeoPoint">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Date">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Number">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Range">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"StructuredText">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
                single: t.Type<string, string, unknown>;
                multi: t.Type<string, string, unknown>;
                imageConstraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                labels: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Select">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default_value: t.StringC;
                options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Separator">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Text">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Timestamp">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Link">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
                select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                customtypes: t.ReadonlyArrayC<t.StringC>;
                masks: t.Type<readonly string[], object, unknown>;
                tags: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Image">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                constraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                    name: t.StringC;
                }>, t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>]>>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"IntegrationFields">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                catalog: t.StringC;
            }>>;
        }>]>>]>>;
        repeat: t.RecordC<t.Type<string, string, unknown>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Color">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Boolean">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                default_value: t.BooleanC;
                placeholder_true: t.StringC;
                placeholder_false: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Embed">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"GeoPoint">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Date">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Number">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Range">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"StructuredText">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
                single: t.Type<string, string, unknown>;
                multi: t.Type<string, string, unknown>;
                imageConstraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                labels: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Select">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default_value: t.StringC;
                options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Separator">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Text">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Timestamp">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Link">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
                select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                customtypes: t.ReadonlyArrayC<t.StringC>;
                masks: t.Type<readonly string[], object, unknown>;
                tags: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Image">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                constraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                    name: t.StringC;
                }>, t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>]>>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"IntegrationFields">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                catalog: t.StringC;
            }>>;
        }>]>>]>>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        }>>;
    }>]>>, t.Type<{
        id: string;
        type: "SharedSlice";
        name: string;
        variations: readonly ({
            id: string;
            name: string;
            description: string;
            imageUrl: string;
            docURL: string;
            version: string;
        } & {
            display?: string;
            primary?: {
                [x: string]: ({
                    type: "Boolean";
                } & {
                    config?: {
                        label?: string | null | undefined;
                        default_value?: boolean;
                        placeholder_true?: string;
                        placeholder_false?: string;
                    };
                }) | ({
                    type: "Color";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                    };
                }) | ({
                    type: "Date";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        default?: string;
                    };
                }) | ({
                    type: "Embed";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        useAsTitle?: boolean;
                    };
                }) | ({
                    type: "GeoPoint";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                    };
                }) | ({
                    type: "Image";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        constraint?: {
                            width?: number | null;
                            height?: number | null;
                        };
                        thumbnails?: readonly ({
                            name: string;
                        } & {
                            width?: number | null;
                            height?: number | null;
                        })[];
                    };
                }) | ({
                    type: "IntegrationFields";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        catalog?: string;
                    };
                }) | ({
                    type: "Link";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        useAsTitle?: boolean;
                        placeholder?: string;
                        select?: "media" | "document" | "web" | null;
                        customtypes?: readonly string[];
                        masks?: readonly string[];
                        tags?: readonly string[];
                        allowTargetBlank?: boolean;
                    };
                }) | ({
                    type: "Number";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        min?: number;
                        max?: number;
                        step?: number;
                    };
                }) | ({
                    type: "Range";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        min?: number;
                        max?: number;
                        step?: number;
                    };
                }) | ({
                    type: "StructuredText";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        useAsTitle?: boolean;
                        single?: string;
                        multi?: string;
                        imageConstraint?: {
                            width?: number | null;
                            height?: number | null;
                        };
                        labels?: readonly string[];
                        allowTargetBlank?: boolean;
                    };
                }) | ({
                    type: "Select";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        default_value?: string;
                        options?: readonly string[];
                    };
                }) | ({
                    type: "Separator";
                } & {
                    config?: {
                        label?: string | null | undefined;
                    };
                }) | ({
                    type: "Text";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        useAsTitle?: boolean;
                        placeholder?: string;
                    };
                }) | ({
                    type: "Timestamp";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        default?: string;
                    };
                }) | ({
                    type: "Group";
                } & {
                    fieldset?: string | null | undefined;
                    icon?: string;
                    description?: string;
                    config?: {
                        label?: string | null | undefined;
                        repeat?: boolean;
                        fields?: {
                            [x: string]: ({
                                type: "Boolean";
                            } & {
                                config?: {
                                    label?: string | null | undefined;
                                    default_value?: boolean;
                                    placeholder_true?: string;
                                    placeholder_false?: string;
                                };
                            }) | ({
                                type: "Color";
                            } & {
                                fieldset?: string | null | undefined;
                                config?: {
                                    label?: string | null | undefined;
                                    placeholder?: string;
                                };
                            }) | ({
                                type: "Date";
                            } & {
                                fieldset?: string | null | undefined;
                                config?: {
                                    label?: string | null | undefined;
                                    placeholder?: string;
                                    default?: string;
                                };
                            }) | ({
                                type: "Embed";
                            } & {
                                fieldset?: string | null | undefined;
                                config?: {
                                    label?: string | null | undefined;
                                    placeholder?: string;
                                    useAsTitle?: boolean;
                                };
                            }) | ({
                                type: "GeoPoint";
                            } & {
                                fieldset?: string | null | undefined;
                                config?: {
                                    label?: string | null | undefined;
                                };
                            }) | ({
                                type: "Image";
                            } & {
                                fieldset?: string | null | undefined;
                                config?: {
                                    label?: string | null | undefined;
                                    placeholder?: string;
                                    constraint?: {
                                        width?: number | null;
                                        height?: number | null;
                                    };
                                    thumbnails?: readonly ({
                                        name: string;
                                    } & {
                                        width?: number | null;
                                        height?: number | null;
                                    })[];
                                };
                            }) | ({
                                type: "IntegrationFields";
                            } & {
                                fieldset?: string | null | undefined;
                                config?: {
                                    label?: string | null | undefined;
                                    placeholder?: string;
                                    catalog?: string;
                                };
                            }) | ({
                                type: "Link";
                            } & {
                                fieldset?: string | null | undefined;
                                config?: {
                                    label?: string | null | undefined;
                                    useAsTitle?: boolean;
                                    placeholder?: string;
                                    select?: "media" | "document" | "web" | null;
                                    customtypes?: readonly string[];
                                    masks?: readonly string[];
                                    tags?: readonly string[];
                                    allowTargetBlank?: boolean;
                                };
                            }) | ({
                                type: "Number";
                            } & {
                                fieldset?: string | null | undefined;
                                config?: {
                                    label?: string | null | undefined;
                                    placeholder?: string;
                                    min?: number;
                                    max?: number;
                                    step?: number;
                                };
                            }) | ({
                                type: "Range";
                            } & {
                                fieldset?: string | null | undefined;
                                config?: {
                                    label?: string | null | undefined;
                                    placeholder?: string;
                                    min?: number;
                                    max?: number;
                                    step?: number;
                                };
                            }) | ({
                                type: "StructuredText";
                            } & {
                                fieldset?: string | null | undefined;
                                config?: {
                                    label?: string | null | undefined;
                                    placeholder?: string;
                                    useAsTitle?: boolean;
                                    single?: string;
                                    multi?: string;
                                    imageConstraint?: {
                                        width?: number | null;
                                        height?: number | null;
                                    };
                                    labels?: readonly string[];
                                    allowTargetBlank?: boolean;
                                };
                            }) | ({
                                type: "Select";
                            } & {
                                fieldset?: string | null | undefined;
                                config?: {
                                    label?: string | null | undefined;
                                    placeholder?: string;
                                    default_value?: string;
                                    options?: readonly string[];
                                };
                            }) | ({
                                type: "Separator";
                            } & {
                                config?: {
                                    label?: string | null | undefined;
                                };
                            }) | ({
                                type: "Text";
                            } & {
                                fieldset?: string | null | undefined;
                                config?: {
                                    label?: string | null | undefined;
                                    useAsTitle?: boolean;
                                    placeholder?: string;
                                };
                            }) | ({
                                type: "Timestamp";
                            } & {
                                fieldset?: string | null | undefined;
                                config?: {
                                    label?: string | null | undefined;
                                    placeholder?: string;
                                    default?: string;
                                };
                            }) | ({
                                type: "Group";
                            } & {
                                fieldset?: string | null | undefined;
                                icon?: string;
                                description?: string;
                                config?: {
                                    label?: string | null | undefined;
                                    repeat?: boolean;
                                    fields?: {
                                        [x: string]: ({
                                            type: "Boolean";
                                        } & {
                                            config?: {
                                                label?: string | null | undefined;
                                                default_value?: boolean;
                                                placeholder_true?: string;
                                                placeholder_false?: string;
                                            };
                                        }) | ({
                                            type: "Color";
                                        } & {
                                            fieldset?: string | null | undefined;
                                            config?: {
                                                label?: string | null | undefined;
                                                placeholder?: string;
                                            };
                                        }) | ({
                                            type: "Date";
                                        } & {
                                            fieldset?: string | null | undefined;
                                            config?: {
                                                label?: string | null | undefined;
                                                placeholder?: string;
                                                default?: string;
                                            };
                                        }) | ({
                                            type: "Embed";
                                        } & {
                                            fieldset?: string | null | undefined;
                                            config?: {
                                                label?: string | null | undefined;
                                                placeholder?: string;
                                                useAsTitle?: boolean;
                                            };
                                        }) | ({
                                            type: "GeoPoint";
                                        } & {
                                            fieldset?: string | null | undefined;
                                            config?: {
                                                label?: string | null | undefined;
                                            };
                                        }) | ({
                                            type: "Image";
                                        } & {
                                            fieldset?: string | null | undefined;
                                            config?: {
                                                label?: string | null | undefined;
                                                placeholder?: string;
                                                constraint?: {
                                                    width?: number | null;
                                                    height?: number | null;
                                                };
                                                thumbnails?: readonly ({
                                                    name: string;
                                                } & {
                                                    width?: number | null;
                                                    height?: number | null;
                                                })[];
                                            };
                                        }) | ({
                                            type: "IntegrationFields";
                                        } & {
                                            fieldset?: string | null | undefined;
                                            config?: {
                                                label?: string | null | undefined;
                                                placeholder?: string;
                                                catalog?: string;
                                            };
                                        }) | ({
                                            type: "Link";
                                        } & {
                                            fieldset?: string | null | undefined;
                                            config?: {
                                                label?: string | null | undefined;
                                                useAsTitle?: boolean;
                                                placeholder?: string;
                                                select?: "media" | "document" | "web" | null;
                                                customtypes?: readonly string[];
                                                masks?: readonly string[];
                                                tags?: readonly string[];
                                                allowTargetBlank?: boolean;
                                            };
                                        }) | ({
                                            type: "Number";
                                        } & {
                                            fieldset?: string | null | undefined;
                                            config?: {
                                                label?: string | null | undefined;
                                                placeholder?: string;
                                                min?: number;
                                                max?: number;
                                                step?: number;
                                            };
                                        }) | ({
                                            type: "Range";
                                        } & {
                                            fieldset?: string | null | undefined;
                                            config?: {
                                                label?: string | null | undefined;
                                                placeholder?: string;
                                                min?: number;
                                                max?: number;
                                                step?: number;
                                            };
                                        }) | ({
                                            type: "StructuredText";
                                        } & {
                                            fieldset?: string | null | undefined;
                                            config?: {
                                                label?: string | null | undefined;
                                                placeholder?: string;
                                                useAsTitle?: boolean;
                                                single?: string;
                                                multi?: string;
                                                imageConstraint?: {
                                                    width?: number | null;
                                                    height?: number | null;
                                                };
                                                labels?: readonly string[];
                                                allowTargetBlank?: boolean;
                                            };
                                        }) | ({
                                            type: "Select";
                                        } & {
                                            fieldset?: string | null | undefined;
                                            config?: {
                                                label?: string | null | undefined;
                                                placeholder?: string;
                                                default_value?: string;
                                                options?: readonly string[];
                                            };
                                        }) | ({
                                            type: "Separator";
                                        } & {
                                            config?: {
                                                label?: string | null | undefined;
                                            };
                                        }) | ({
                                            type: "Text";
                                        } & {
                                            fieldset?: string | null | undefined;
                                            config?: {
                                                label?: string | null | undefined;
                                                useAsTitle?: boolean;
                                                placeholder?: string;
                                            };
                                        }) | ({
                                            type: "Timestamp";
                                        } & {
                                            fieldset?: string | null | undefined;
                                            config?: {
                                                label?: string | null | undefined;
                                                placeholder?: string;
                                                default?: string;
                                            };
                                        });
                                    };
                                };
                            });
                        };
                    };
                });
            };
            items?: {
                [x: string]: ({
                    type: "Boolean";
                } & {
                    config?: {
                        label?: string | null | undefined;
                        default_value?: boolean;
                        placeholder_true?: string;
                        placeholder_false?: string;
                    };
                }) | ({
                    type: "Color";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                    };
                }) | ({
                    type: "Date";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        default?: string;
                    };
                }) | ({
                    type: "Embed";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        useAsTitle?: boolean;
                    };
                }) | ({
                    type: "GeoPoint";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                    };
                }) | ({
                    type: "Image";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        constraint?: {
                            width?: number | null;
                            height?: number | null;
                        };
                        thumbnails?: readonly ({
                            name: string;
                        } & {
                            width?: number | null;
                            height?: number | null;
                        })[];
                    };
                }) | ({
                    type: "IntegrationFields";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        catalog?: string;
                    };
                }) | ({
                    type: "Link";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        useAsTitle?: boolean;
                        placeholder?: string;
                        select?: "media" | "document" | "web" | null;
                        customtypes?: readonly string[];
                        masks?: readonly string[];
                        tags?: readonly string[];
                        allowTargetBlank?: boolean;
                    };
                }) | ({
                    type: "Number";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        min?: number;
                        max?: number;
                        step?: number;
                    };
                }) | ({
                    type: "Range";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        min?: number;
                        max?: number;
                        step?: number;
                    };
                }) | ({
                    type: "StructuredText";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        useAsTitle?: boolean;
                        single?: string;
                        multi?: string;
                        imageConstraint?: {
                            width?: number | null;
                            height?: number | null;
                        };
                        labels?: readonly string[];
                        allowTargetBlank?: boolean;
                    };
                }) | ({
                    type: "Select";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        default_value?: string;
                        options?: readonly string[];
                    };
                }) | ({
                    type: "Separator";
                } & {
                    config?: {
                        label?: string | null | undefined;
                    };
                }) | ({
                    type: "Text";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        useAsTitle?: boolean;
                        placeholder?: string;
                    };
                }) | ({
                    type: "Timestamp";
                } & {
                    fieldset?: string | null | undefined;
                    config?: {
                        label?: string | null | undefined;
                        placeholder?: string;
                        default?: string;
                    };
                });
            };
        })[];
    } & {
        description?: string;
        legacyPaths?: {
            [x: string]: string;
        };
    }, unknown, unknown>]>>;
}>>;
export declare type StaticSlicesConfig = t.TypeOf<typeof StaticSlicesConfig>;
export declare const DynamicSlicesConfig: t.ExactC<t.PartialC<{
    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    labels: t.UnionC<[t.RecordC<t.StringC, t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
        name: t.StringC;
    }>, t.PartialC<{
        display: t.StringC;
    }>]>>>>, t.NullC]>;
    choices: t.RecordC<t.Type<string, string, unknown>, t.UnionC<[t.UnionC<[t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Color">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Boolean">;
    }>, t.PartialC<{
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            default_value: t.BooleanC;
            placeholder_true: t.StringC;
            placeholder_false: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Embed">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            useAsTitle: t.BooleanC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"GeoPoint">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Date">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            default: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Number">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Range">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"StructuredText">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            useAsTitle: t.BooleanC;
            single: t.Type<string, string, unknown>;
            multi: t.Type<string, string, unknown>;
            imageConstraint: t.PartialC<{
                width: t.Type<number | null, unknown, unknown>;
                height: t.Type<number | null, unknown, unknown>;
            }>;
            labels: t.Type<readonly string[], object, unknown>;
            allowTargetBlank: t.BooleanC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Select">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            default_value: t.StringC;
            options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Separator">;
    }>, t.PartialC<{
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Text">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            useAsTitle: t.BooleanC;
            placeholder: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Timestamp">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            default: t.StringC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Link">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            useAsTitle: t.BooleanC;
            placeholder: t.StringC;
            select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
            customtypes: t.ReadonlyArrayC<t.StringC>;
            masks: t.Type<readonly string[], object, unknown>;
            tags: t.Type<readonly string[], object, unknown>;
            allowTargetBlank: t.BooleanC;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Image">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            constraint: t.PartialC<{
                width: t.Type<number | null, unknown, unknown>;
                height: t.Type<number | null, unknown, unknown>;
            }>;
            thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                name: t.StringC;
            }>, t.PartialC<{
                width: t.Type<number | null, unknown, unknown>;
                height: t.Type<number | null, unknown, unknown>;
            }>]>>>;
        }>>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"IntegrationFields">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            placeholder: t.StringC;
            catalog: t.StringC;
        }>>;
    }>]>>]>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Group">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        icon: t.StringC;
        description: t.StringC;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            repeat: t.BooleanC;
            fields: t.RecordC<t.Type<string, string, unknown>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Color">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Boolean">;
            }>, t.PartialC<{
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    default_value: t.BooleanC;
                    placeholder_true: t.StringC;
                    placeholder_false: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Embed">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    useAsTitle: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"GeoPoint">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Date">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Number">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Range">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"StructuredText">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    useAsTitle: t.BooleanC;
                    single: t.Type<string, string, unknown>;
                    multi: t.Type<string, string, unknown>;
                    imageConstraint: t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>;
                    labels: t.Type<readonly string[], object, unknown>;
                    allowTargetBlank: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Select">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default_value: t.StringC;
                    options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Separator">;
            }>, t.PartialC<{
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Text">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    useAsTitle: t.BooleanC;
                    placeholder: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Timestamp">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Link">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    useAsTitle: t.BooleanC;
                    placeholder: t.StringC;
                    select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                    customtypes: t.ReadonlyArrayC<t.StringC>;
                    masks: t.Type<readonly string[], object, unknown>;
                    tags: t.Type<readonly string[], object, unknown>;
                    allowTargetBlank: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"Image">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    constraint: t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>;
                    thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                        name: t.StringC;
                    }>, t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>]>>>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<"IntegrationFields">;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    catalog: t.StringC;
                }>>;
            }>]>>]>>;
        }>>;
    }>]>>]>, t.ExactC<t.IntersectionC<[t.TypeC<{
        type: t.LiteralC<"Slice">;
    }>, t.PartialC<{
        fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        description: t.StringC;
        icon: t.StringC;
        display: t.StringC;
        "non-repeat": t.RecordC<t.Type<string, string, unknown>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Color">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Boolean">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                default_value: t.BooleanC;
                placeholder_true: t.StringC;
                placeholder_false: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Embed">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"GeoPoint">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Date">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Number">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Range">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"StructuredText">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
                single: t.Type<string, string, unknown>;
                multi: t.Type<string, string, unknown>;
                imageConstraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                labels: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Select">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default_value: t.StringC;
                options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Separator">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Text">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Timestamp">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Link">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
                select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                customtypes: t.ReadonlyArrayC<t.StringC>;
                masks: t.Type<readonly string[], object, unknown>;
                tags: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Image">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                constraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                    name: t.StringC;
                }>, t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>]>>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"IntegrationFields">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                catalog: t.StringC;
            }>>;
        }>]>>]>>;
        repeat: t.RecordC<t.Type<string, string, unknown>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Color">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Boolean">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                default_value: t.BooleanC;
                placeholder_true: t.StringC;
                placeholder_false: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Embed">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"GeoPoint">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Date">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Number">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Range">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"StructuredText">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
                single: t.Type<string, string, unknown>;
                multi: t.Type<string, string, unknown>;
                imageConstraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                labels: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Select">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default_value: t.StringC;
                options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Separator">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Text">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Timestamp">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Link">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
                select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                customtypes: t.ReadonlyArrayC<t.StringC>;
                masks: t.Type<readonly string[], object, unknown>;
                tags: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Image">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                constraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                    name: t.StringC;
                }>, t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>]>>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"IntegrationFields">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                catalog: t.StringC;
            }>>;
        }>]>>]>>;
        config: t.ExactC<t.PartialC<{
            label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        }>>;
    }>]>>, t.Type<{
        type: "SharedSlice";
    }, unknown, unknown>]>>;
}>>;
export declare type DynamicSlicesConfig = t.TypeOf<typeof DynamicSlicesConfig>;
export declare function slicesReader<T extends StaticSlicesConfig | DynamicSlicesConfig>(codec: t.Type<T, unknown>): t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.KeyofC<{
        Slices: null;
        Choice: null;
    }>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.Type<T, unknown, unknown>;
}>]>>;
export declare const StaticSlices: t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.KeyofC<{
        Slices: null;
        Choice: null;
    }>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.Type<{
        label?: string | null | undefined;
        labels?: {
            [x: string]: readonly ({
                name: string;
            } & {
                display?: string;
            })[];
        } | null;
        choices?: {
            [x: string]: ({
                type: "Boolean";
            } & {
                config?: {
                    label?: string | null | undefined;
                    default_value?: boolean;
                    placeholder_true?: string;
                    placeholder_false?: string;
                };
            }) | ({
                type: "Color";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                };
            }) | ({
                type: "Date";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default?: string;
                };
            }) | ({
                type: "Embed";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    useAsTitle?: boolean;
                };
            }) | ({
                type: "GeoPoint";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                };
            }) | ({
                type: "Image";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    constraint?: {
                        width?: number | null;
                        height?: number | null;
                    };
                    thumbnails?: readonly ({
                        name: string;
                    } & {
                        width?: number | null;
                        height?: number | null;
                    })[];
                };
            }) | ({
                type: "IntegrationFields";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    catalog?: string;
                };
            }) | ({
                type: "Link";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    useAsTitle?: boolean;
                    placeholder?: string;
                    select?: "media" | "document" | "web" | null;
                    customtypes?: readonly string[];
                    masks?: readonly string[];
                    tags?: readonly string[];
                    allowTargetBlank?: boolean;
                };
            }) | ({
                type: "Number";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    min?: number;
                    max?: number;
                    step?: number;
                };
            }) | ({
                type: "Range";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    min?: number;
                    max?: number;
                    step?: number;
                };
            }) | ({
                type: "StructuredText";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    useAsTitle?: boolean;
                    single?: string;
                    multi?: string;
                    imageConstraint?: {
                        width?: number | null;
                        height?: number | null;
                    };
                    labels?: readonly string[];
                    allowTargetBlank?: boolean;
                };
            }) | ({
                type: "Select";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default_value?: string;
                    options?: readonly string[];
                };
            }) | ({
                type: "Separator";
            } & {
                config?: {
                    label?: string | null | undefined;
                };
            }) | ({
                type: "Text";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    useAsTitle?: boolean;
                    placeholder?: string;
                };
            }) | ({
                type: "Timestamp";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default?: string;
                };
            }) | ({
                type: "Group";
            } & {
                fieldset?: string | null | undefined;
                icon?: string;
                description?: string;
                config?: {
                    label?: string | null | undefined;
                    repeat?: boolean;
                    fields?: {
                        [x: string]: ({
                            type: "Boolean";
                        } & {
                            config?: {
                                label?: string | null | undefined;
                                default_value?: boolean;
                                placeholder_true?: string;
                                placeholder_false?: string;
                            };
                        }) | ({
                            type: "Color";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                            };
                        }) | ({
                            type: "Date";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        }) | ({
                            type: "Embed";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                            };
                        }) | ({
                            type: "GeoPoint";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: "Image";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                constraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                thumbnails?: readonly ({
                                    name: string;
                                } & {
                                    width?: number | null;
                                    height?: number | null;
                                })[];
                            };
                        }) | ({
                            type: "IntegrationFields";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                catalog?: string;
                            };
                        }) | ({
                            type: "Link";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                                select?: "media" | "document" | "web" | null;
                                customtypes?: readonly string[];
                                masks?: readonly string[];
                                tags?: readonly string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: "Number";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: "Range";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: "StructuredText";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                                single?: string;
                                multi?: string;
                                imageConstraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                labels?: readonly string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: "Select";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default_value?: string;
                                options?: readonly string[];
                            };
                        }) | ({
                            type: "Separator";
                        } & {
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: "Text";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                            };
                        }) | ({
                            type: "Timestamp";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        });
                    };
                };
            }) | ({
                type: "Slice";
            } & {
                fieldset?: string | null | undefined;
                description?: string;
                icon?: string;
                display?: string;
                "non-repeat"?: {
                    [x: string]: ({
                        type: "Boolean";
                    } & {
                        config?: {
                            label?: string | null | undefined;
                            default_value?: boolean;
                            placeholder_true?: string;
                            placeholder_false?: string;
                        };
                    }) | ({
                        type: "Color";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                        };
                    }) | ({
                        type: "Date";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    }) | ({
                        type: "Embed";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                        };
                    }) | ({
                        type: "GeoPoint";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: "Image";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            constraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            thumbnails?: readonly ({
                                name: string;
                            } & {
                                width?: number | null;
                                height?: number | null;
                            })[];
                        };
                    }) | ({
                        type: "IntegrationFields";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            catalog?: string;
                        };
                    }) | ({
                        type: "Link";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                            select?: "media" | "document" | "web" | null;
                            customtypes?: readonly string[];
                            masks?: readonly string[];
                            tags?: readonly string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: "Number";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: "Range";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: "StructuredText";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                            single?: string;
                            multi?: string;
                            imageConstraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            labels?: readonly string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: "Select";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default_value?: string;
                            options?: readonly string[];
                        };
                    }) | ({
                        type: "Separator";
                    } & {
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: "Text";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                        };
                    }) | ({
                        type: "Timestamp";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    });
                };
                repeat?: {
                    [x: string]: ({
                        type: "Boolean";
                    } & {
                        config?: {
                            label?: string | null | undefined;
                            default_value?: boolean;
                            placeholder_true?: string;
                            placeholder_false?: string;
                        };
                    }) | ({
                        type: "Color";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                        };
                    }) | ({
                        type: "Date";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    }) | ({
                        type: "Embed";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                        };
                    }) | ({
                        type: "GeoPoint";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: "Image";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            constraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            thumbnails?: readonly ({
                                name: string;
                            } & {
                                width?: number | null;
                                height?: number | null;
                            })[];
                        };
                    }) | ({
                        type: "IntegrationFields";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            catalog?: string;
                        };
                    }) | ({
                        type: "Link";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                            select?: "media" | "document" | "web" | null;
                            customtypes?: readonly string[];
                            masks?: readonly string[];
                            tags?: readonly string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: "Number";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: "Range";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: "StructuredText";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                            single?: string;
                            multi?: string;
                            imageConstraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            labels?: readonly string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: "Select";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default_value?: string;
                            options?: readonly string[];
                        };
                    }) | ({
                        type: "Separator";
                    } & {
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: "Text";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                        };
                    }) | ({
                        type: "Timestamp";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    });
                };
                config?: {
                    label?: string | null | undefined;
                };
            }) | ({
                id: string;
                type: "SharedSlice";
                name: string;
                variations: readonly ({
                    id: string;
                    name: string;
                    description: string;
                    imageUrl: string;
                    docURL: string;
                    version: string;
                } & {
                    display?: string;
                    primary?: {
                        [x: string]: ({
                            type: "Boolean";
                        } & {
                            config?: {
                                label?: string | null | undefined;
                                default_value?: boolean;
                                placeholder_true?: string;
                                placeholder_false?: string;
                            };
                        }) | ({
                            type: "Color";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                            };
                        }) | ({
                            type: "Date";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        }) | ({
                            type: "Embed";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                            };
                        }) | ({
                            type: "GeoPoint";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: "Image";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                constraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                thumbnails?: readonly ({
                                    name: string;
                                } & {
                                    width?: number | null;
                                    height?: number | null;
                                })[];
                            };
                        }) | ({
                            type: "IntegrationFields";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                catalog?: string;
                            };
                        }) | ({
                            type: "Link";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                                select?: "media" | "document" | "web" | null;
                                customtypes?: readonly string[];
                                masks?: readonly string[];
                                tags?: readonly string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: "Number";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: "Range";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: "StructuredText";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                                single?: string;
                                multi?: string;
                                imageConstraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                labels?: readonly string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: "Select";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default_value?: string;
                                options?: readonly string[];
                            };
                        }) | ({
                            type: "Separator";
                        } & {
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: "Text";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                            };
                        }) | ({
                            type: "Timestamp";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        }) | ({
                            type: "Group";
                        } & {
                            fieldset?: string | null | undefined;
                            icon?: string;
                            description?: string;
                            config?: {
                                label?: string | null | undefined;
                                repeat?: boolean;
                                fields?: {
                                    [x: string]: ({
                                        type: "Boolean";
                                    } & {
                                        config?: {
                                            label?: string | null | undefined;
                                            default_value?: boolean;
                                            placeholder_true?: string;
                                            placeholder_false?: string;
                                        };
                                    }) | ({
                                        type: "Color";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        config?: {
                                            label?: string | null | undefined;
                                            placeholder?: string;
                                        };
                                    }) | ({
                                        type: "Date";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        config?: {
                                            label?: string | null | undefined;
                                            placeholder?: string;
                                            default?: string;
                                        };
                                    }) | ({
                                        type: "Embed";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        config?: {
                                            label?: string | null | undefined;
                                            placeholder?: string;
                                            useAsTitle?: boolean;
                                        };
                                    }) | ({
                                        type: "GeoPoint";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        config?: {
                                            label?: string | null | undefined;
                                        };
                                    }) | ({
                                        type: "Image";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        config?: {
                                            label?: string | null | undefined;
                                            placeholder?: string;
                                            constraint?: {
                                                width?: number | null;
                                                height?: number | null;
                                            };
                                            thumbnails?: readonly ({
                                                name: string;
                                            } & {
                                                width?: number | null;
                                                height?: number | null;
                                            })[];
                                        };
                                    }) | ({
                                        type: "IntegrationFields";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        config?: {
                                            label?: string | null | undefined;
                                            placeholder?: string;
                                            catalog?: string;
                                        };
                                    }) | ({
                                        type: "Link";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        config?: {
                                            label?: string | null | undefined;
                                            useAsTitle?: boolean;
                                            placeholder?: string;
                                            select?: "media" | "document" | "web" | null;
                                            customtypes?: readonly string[];
                                            masks?: readonly string[];
                                            tags?: readonly string[];
                                            allowTargetBlank?: boolean;
                                        };
                                    }) | ({
                                        type: "Number";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        config?: {
                                            label?: string | null | undefined;
                                            placeholder?: string;
                                            min?: number;
                                            max?: number;
                                            step?: number;
                                        };
                                    }) | ({
                                        type: "Range";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        config?: {
                                            label?: string | null | undefined;
                                            placeholder?: string;
                                            min?: number;
                                            max?: number;
                                            step?: number;
                                        };
                                    }) | ({
                                        type: "StructuredText";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        config?: {
                                            label?: string | null | undefined;
                                            placeholder?: string;
                                            useAsTitle?: boolean;
                                            single?: string;
                                            multi?: string;
                                            imageConstraint?: {
                                                width?: number | null;
                                                height?: number | null;
                                            };
                                            labels?: readonly string[];
                                            allowTargetBlank?: boolean;
                                        };
                                    }) | ({
                                        type: "Select";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        config?: {
                                            label?: string | null | undefined;
                                            placeholder?: string;
                                            default_value?: string;
                                            options?: readonly string[];
                                        };
                                    }) | ({
                                        type: "Separator";
                                    } & {
                                        config?: {
                                            label?: string | null | undefined;
                                        };
                                    }) | ({
                                        type: "Text";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        config?: {
                                            label?: string | null | undefined;
                                            useAsTitle?: boolean;
                                            placeholder?: string;
                                        };
                                    }) | ({
                                        type: "Timestamp";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        config?: {
                                            label?: string | null | undefined;
                                            placeholder?: string;
                                            default?: string;
                                        };
                                    }) | ({
                                        type: "Group";
                                    } & {
                                        fieldset?: string | null | undefined;
                                        icon?: string;
                                        description?: string;
                                        config?: {
                                            label?: string | null | undefined;
                                            repeat?: boolean;
                                            fields?: {
                                                [x: string]: ({
                                                    type: "Boolean";
                                                } & {
                                                    config?: {
                                                        label?: string | null | undefined;
                                                        default_value?: boolean;
                                                        placeholder_true?: string;
                                                        placeholder_false?: string;
                                                    };
                                                }) | ({
                                                    type: "Color";
                                                } & {
                                                    fieldset?: string | null | undefined;
                                                    config?: {
                                                        label?: string | null | undefined;
                                                        placeholder?: string;
                                                    };
                                                }) | ({
                                                    type: "Date";
                                                } & {
                                                    fieldset?: string | null | undefined;
                                                    config?: {
                                                        label?: string | null | undefined;
                                                        placeholder?: string;
                                                        default?: string;
                                                    };
                                                }) | ({
                                                    type: "Embed";
                                                } & {
                                                    fieldset?: string | null | undefined;
                                                    config?: {
                                                        label?: string | null | undefined;
                                                        placeholder?: string;
                                                        useAsTitle?: boolean;
                                                    };
                                                }) | ({
                                                    type: "GeoPoint";
                                                } & {
                                                    fieldset?: string | null | undefined;
                                                    config?: {
                                                        label?: string | null | undefined;
                                                    };
                                                }) | ({
                                                    type: "Image";
                                                } & {
                                                    fieldset?: string | null | undefined;
                                                    config?: {
                                                        label?: string | null | undefined;
                                                        placeholder?: string;
                                                        constraint?: {
                                                            width?: number | null;
                                                            height?: number | null;
                                                        };
                                                        thumbnails?: readonly ({
                                                            name: string;
                                                        } & {
                                                            width?: number | null;
                                                            height?: number | null;
                                                        })[];
                                                    };
                                                }) | ({
                                                    type: "IntegrationFields";
                                                } & {
                                                    fieldset?: string | null | undefined;
                                                    config?: {
                                                        label?: string | null | undefined;
                                                        placeholder?: string;
                                                        catalog?: string;
                                                    };
                                                }) | ({
                                                    type: "Link";
                                                } & {
                                                    fieldset?: string | null | undefined;
                                                    config?: {
                                                        label?: string | null | undefined;
                                                        useAsTitle?: boolean;
                                                        placeholder?: string;
                                                        select?: "media" | "document" | "web" | null;
                                                        customtypes?: readonly string[];
                                                        masks?: readonly string[];
                                                        tags?: readonly string[];
                                                        allowTargetBlank?: boolean;
                                                    };
                                                }) | ({
                                                    type: "Number";
                                                } & {
                                                    fieldset?: string | null | undefined;
                                                    config?: {
                                                        label?: string | null | undefined;
                                                        placeholder?: string;
                                                        min?: number;
                                                        max?: number;
                                                        step?: number;
                                                    };
                                                }) | ({
                                                    type: "Range";
                                                } & {
                                                    fieldset?: string | null | undefined;
                                                    config?: {
                                                        label?: string | null | undefined;
                                                        placeholder?: string;
                                                        min?: number;
                                                        max?: number;
                                                        step?: number;
                                                    };
                                                }) | ({
                                                    type: "StructuredText";
                                                } & {
                                                    fieldset?: string | null | undefined;
                                                    config?: {
                                                        label?: string | null | undefined;
                                                        placeholder?: string;
                                                        useAsTitle?: boolean;
                                                        single?: string;
                                                        multi?: string;
                                                        imageConstraint?: {
                                                            width?: number | null;
                                                            height?: number | null;
                                                        };
                                                        labels?: readonly string[];
                                                        allowTargetBlank?: boolean;
                                                    };
                                                }) | ({
                                                    type: "Select";
                                                } & {
                                                    fieldset?: string | null | undefined;
                                                    config?: {
                                                        label?: string | null | undefined;
                                                        placeholder?: string;
                                                        default_value?: string;
                                                        options?: readonly string[];
                                                    };
                                                }) | ({
                                                    type: "Separator";
                                                } & {
                                                    config?: {
                                                        label?: string | null | undefined;
                                                    };
                                                }) | ({
                                                    type: "Text";
                                                } & {
                                                    fieldset?: string | null | undefined;
                                                    config?: {
                                                        label?: string | null | undefined;
                                                        useAsTitle?: boolean;
                                                        placeholder?: string;
                                                    };
                                                }) | ({
                                                    type: "Timestamp";
                                                } & {
                                                    fieldset?: string | null | undefined;
                                                    config?: {
                                                        label?: string | null | undefined;
                                                        placeholder?: string;
                                                        default?: string;
                                                    };
                                                });
                                            };
                                        };
                                    });
                                };
                            };
                        });
                    };
                    items?: {
                        [x: string]: ({
                            type: "Boolean";
                        } & {
                            config?: {
                                label?: string | null | undefined;
                                default_value?: boolean;
                                placeholder_true?: string;
                                placeholder_false?: string;
                            };
                        }) | ({
                            type: "Color";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                            };
                        }) | ({
                            type: "Date";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        }) | ({
                            type: "Embed";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                            };
                        }) | ({
                            type: "GeoPoint";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: "Image";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                constraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                thumbnails?: readonly ({
                                    name: string;
                                } & {
                                    width?: number | null;
                                    height?: number | null;
                                })[];
                            };
                        }) | ({
                            type: "IntegrationFields";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                catalog?: string;
                            };
                        }) | ({
                            type: "Link";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                                select?: "media" | "document" | "web" | null;
                                customtypes?: readonly string[];
                                masks?: readonly string[];
                                tags?: readonly string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: "Number";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: "Range";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: "StructuredText";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                                single?: string;
                                multi?: string;
                                imageConstraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                labels?: readonly string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: "Select";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default_value?: string;
                                options?: readonly string[];
                            };
                        }) | ({
                            type: "Separator";
                        } & {
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: "Text";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                            };
                        }) | ({
                            type: "Timestamp";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        });
                    };
                })[];
            } & {
                description?: string;
                legacyPaths?: {
                    [x: string]: string;
                };
            });
        };
    }, unknown, unknown>;
}>]>>;
export declare type StaticSlices = t.TypeOf<typeof StaticSlices>;
export declare const DynamicSlices: t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.KeyofC<{
        Slices: null;
        Choice: null;
    }>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.Type<{
        label?: string | null | undefined;
        labels?: {
            [x: string]: readonly ({
                name: string;
            } & {
                display?: string;
            })[];
        } | null;
        choices?: {
            [x: string]: ({
                type: "Boolean";
            } & {
                config?: {
                    label?: string | null | undefined;
                    default_value?: boolean;
                    placeholder_true?: string;
                    placeholder_false?: string;
                };
            }) | ({
                type: "Color";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                };
            }) | ({
                type: "Date";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default?: string;
                };
            }) | ({
                type: "Embed";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    useAsTitle?: boolean;
                };
            }) | ({
                type: "GeoPoint";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                };
            }) | ({
                type: "Image";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    constraint?: {
                        width?: number | null;
                        height?: number | null;
                    };
                    thumbnails?: readonly ({
                        name: string;
                    } & {
                        width?: number | null;
                        height?: number | null;
                    })[];
                };
            }) | ({
                type: "IntegrationFields";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    catalog?: string;
                };
            }) | ({
                type: "Link";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    useAsTitle?: boolean;
                    placeholder?: string;
                    select?: "media" | "document" | "web" | null;
                    customtypes?: readonly string[];
                    masks?: readonly string[];
                    tags?: readonly string[];
                    allowTargetBlank?: boolean;
                };
            }) | ({
                type: "Number";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    min?: number;
                    max?: number;
                    step?: number;
                };
            }) | ({
                type: "Range";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    min?: number;
                    max?: number;
                    step?: number;
                };
            }) | ({
                type: "StructuredText";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    useAsTitle?: boolean;
                    single?: string;
                    multi?: string;
                    imageConstraint?: {
                        width?: number | null;
                        height?: number | null;
                    };
                    labels?: readonly string[];
                    allowTargetBlank?: boolean;
                };
            }) | ({
                type: "Select";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default_value?: string;
                    options?: readonly string[];
                };
            }) | ({
                type: "Separator";
            } & {
                config?: {
                    label?: string | null | undefined;
                };
            }) | ({
                type: "Text";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    useAsTitle?: boolean;
                    placeholder?: string;
                };
            }) | ({
                type: "Timestamp";
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default?: string;
                };
            }) | ({
                type: "Group";
            } & {
                fieldset?: string | null | undefined;
                icon?: string;
                description?: string;
                config?: {
                    label?: string | null | undefined;
                    repeat?: boolean;
                    fields?: {
                        [x: string]: ({
                            type: "Boolean";
                        } & {
                            config?: {
                                label?: string | null | undefined;
                                default_value?: boolean;
                                placeholder_true?: string;
                                placeholder_false?: string;
                            };
                        }) | ({
                            type: "Color";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                            };
                        }) | ({
                            type: "Date";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        }) | ({
                            type: "Embed";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                            };
                        }) | ({
                            type: "GeoPoint";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: "Image";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                constraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                thumbnails?: readonly ({
                                    name: string;
                                } & {
                                    width?: number | null;
                                    height?: number | null;
                                })[];
                            };
                        }) | ({
                            type: "IntegrationFields";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                catalog?: string;
                            };
                        }) | ({
                            type: "Link";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                                select?: "media" | "document" | "web" | null;
                                customtypes?: readonly string[];
                                masks?: readonly string[];
                                tags?: readonly string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: "Number";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: "Range";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: "StructuredText";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                                single?: string;
                                multi?: string;
                                imageConstraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                labels?: readonly string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: "Select";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default_value?: string;
                                options?: readonly string[];
                            };
                        }) | ({
                            type: "Separator";
                        } & {
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: "Text";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                            };
                        }) | ({
                            type: "Timestamp";
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        });
                    };
                };
            }) | ({
                type: "Slice";
            } & {
                fieldset?: string | null | undefined;
                description?: string;
                icon?: string;
                display?: string;
                "non-repeat"?: {
                    [x: string]: ({
                        type: "Boolean";
                    } & {
                        config?: {
                            label?: string | null | undefined;
                            default_value?: boolean;
                            placeholder_true?: string;
                            placeholder_false?: string;
                        };
                    }) | ({
                        type: "Color";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                        };
                    }) | ({
                        type: "Date";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    }) | ({
                        type: "Embed";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                        };
                    }) | ({
                        type: "GeoPoint";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: "Image";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            constraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            thumbnails?: readonly ({
                                name: string;
                            } & {
                                width?: number | null;
                                height?: number | null;
                            })[];
                        };
                    }) | ({
                        type: "IntegrationFields";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            catalog?: string;
                        };
                    }) | ({
                        type: "Link";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                            select?: "media" | "document" | "web" | null;
                            customtypes?: readonly string[];
                            masks?: readonly string[];
                            tags?: readonly string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: "Number";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: "Range";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: "StructuredText";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                            single?: string;
                            multi?: string;
                            imageConstraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            labels?: readonly string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: "Select";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default_value?: string;
                            options?: readonly string[];
                        };
                    }) | ({
                        type: "Separator";
                    } & {
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: "Text";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                        };
                    }) | ({
                        type: "Timestamp";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    });
                };
                repeat?: {
                    [x: string]: ({
                        type: "Boolean";
                    } & {
                        config?: {
                            label?: string | null | undefined;
                            default_value?: boolean;
                            placeholder_true?: string;
                            placeholder_false?: string;
                        };
                    }) | ({
                        type: "Color";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                        };
                    }) | ({
                        type: "Date";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    }) | ({
                        type: "Embed";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                        };
                    }) | ({
                        type: "GeoPoint";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: "Image";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            constraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            thumbnails?: readonly ({
                                name: string;
                            } & {
                                width?: number | null;
                                height?: number | null;
                            })[];
                        };
                    }) | ({
                        type: "IntegrationFields";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            catalog?: string;
                        };
                    }) | ({
                        type: "Link";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                            select?: "media" | "document" | "web" | null;
                            customtypes?: readonly string[];
                            masks?: readonly string[];
                            tags?: readonly string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: "Number";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: "Range";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: "StructuredText";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                            single?: string;
                            multi?: string;
                            imageConstraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            labels?: readonly string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: "Select";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default_value?: string;
                            options?: readonly string[];
                        };
                    }) | ({
                        type: "Separator";
                    } & {
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: "Text";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                        };
                    }) | ({
                        type: "Timestamp";
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    });
                };
                config?: {
                    label?: string | null | undefined;
                };
            }) | {
                type: "SharedSlice";
            };
        };
    }, unknown, unknown>;
}>]>>;
export declare type DynamicSlices = t.TypeOf<typeof DynamicSlices>;
export declare const Slices: {
    toStatic(slices: DynamicSlices, sharedSlices: Map<string, SharedSlice>): StaticSlices;
};
