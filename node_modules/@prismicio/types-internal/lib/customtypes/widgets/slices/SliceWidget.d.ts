import * as t from "io-ts";
export declare const SliceWidget: t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Group">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    icon: t.StringC;
    description: t.StringC;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        repeat: t.BooleanC;
        fields: t.RecordC<t.Type<string, string, unknown>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Color">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Boolean">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                default_value: t.BooleanC;
                placeholder_true: t.StringC;
                placeholder_false: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Embed">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"GeoPoint">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Date">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Number">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Range">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"StructuredText">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
                single: t.Type<string, string, unknown>;
                multi: t.Type<string, string, unknown>;
                imageConstraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                labels: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Select">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default_value: t.StringC;
                options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Separator">;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Text">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Timestamp">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Link">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
                select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                customtypes: t.ReadonlyArrayC<t.StringC>;
                masks: t.Type<readonly string[], object, unknown>;
                tags: t.Type<readonly string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"Image">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                constraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                    name: t.StringC;
                }>, t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>]>>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<"IntegrationFields">;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                catalog: t.StringC;
            }>>;
        }>]>>]>>;
    }>>;
}>]>>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Color">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Boolean">;
}>, t.PartialC<{
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        default_value: t.BooleanC;
        placeholder_true: t.StringC;
        placeholder_false: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Embed">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        useAsTitle: t.BooleanC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"GeoPoint">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Date">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        default: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Number">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Range">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"StructuredText">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        useAsTitle: t.BooleanC;
        single: t.Type<string, string, unknown>;
        multi: t.Type<string, string, unknown>;
        imageConstraint: t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>;
        labels: t.Type<readonly string[], object, unknown>;
        allowTargetBlank: t.BooleanC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Select">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        default_value: t.StringC;
        options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Separator">;
}>, t.PartialC<{
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Text">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        useAsTitle: t.BooleanC;
        placeholder: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Timestamp">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        default: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Link">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        useAsTitle: t.BooleanC;
        placeholder: t.StringC;
        select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
        customtypes: t.ReadonlyArrayC<t.StringC>;
        masks: t.Type<readonly string[], object, unknown>;
        tags: t.Type<readonly string[], object, unknown>;
        allowTargetBlank: t.BooleanC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Image">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        constraint: t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>;
        thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
            name: t.StringC;
        }>, t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>]>>>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"IntegrationFields">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        catalog: t.StringC;
    }>>;
}>]>>]>]>;
export declare type SliceWidget = t.TypeOf<typeof SliceWidget>;
export declare type SliceFieldTypes = SliceWidget["type"];
