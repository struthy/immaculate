import * as t from "io-ts";
export declare const ImageFieldType = "Image";
export declare const Thumbnail: t.ExactC<t.IntersectionC<[t.TypeC<{
    name: t.StringC;
}>, t.PartialC<{
    width: t.Type<number | null, unknown, unknown>;
    height: t.Type<number | null, unknown, unknown>;
}>]>>;
export declare type Thumbnail = t.TypeOf<typeof Thumbnail>;
export declare const ImageConfig: t.ExactC<t.PartialC<{
    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    placeholder: t.StringC;
    constraint: t.PartialC<{
        width: t.Type<number | null, unknown, unknown>;
        height: t.Type<number | null, unknown, unknown>;
    }>;
    thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
        name: t.StringC;
    }>, t.PartialC<{
        width: t.Type<number | null, unknown, unknown>;
        height: t.Type<number | null, unknown, unknown>;
    }>]>>>;
}>>;
export declare type ImageConfig = t.TypeOf<typeof ImageConfig>;
export declare const Image: t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Image">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        constraint: t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>;
        thumbnails: t.ReadonlyArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
            name: t.StringC;
        }>, t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>]>>>;
    }>>;
}>]>>;
export declare type Image = t.TypeOf<typeof Image>;
