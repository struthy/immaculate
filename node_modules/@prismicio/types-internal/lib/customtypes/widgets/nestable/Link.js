"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Link = exports.LinkConfig = exports.LinkFieldType = void 0;
const tslib_1 = require("tslib");
const Either_1 = require("fp-ts/lib/Either");
const t = (0, tslib_1.__importStar)(require("io-ts"));
const withFallback_1 = require("io-ts-types/lib/withFallback");
const validators_1 = require("../../../validators");
const arrayString = (entries) => {
    if (entries instanceof Array) {
        const isValidEntries = entries.reduce((acc, l) => acc && typeof l === "string", true);
        if (isValidEntries)
            return t.success(entries);
    }
    return;
};
const plainString = (entries) => {
    if (typeof entries === "string") {
        return t.success([entries]);
    }
    return;
};
const MasksArrayString = new t.Type("MasksArrayString", (u) => {
    return u instanceof Array;
}, (u, context) => {
    return Either_1.either.chain(t.union([t.array(t.string), t.string]).validate(u, context), (masks) => {
        return arrayString(masks) || plainString(masks) || t.failure(u, context);
    });
}, (res) => res);
exports.LinkFieldType = "Link";
exports.LinkConfig = t.exact(t.partial({
    label: validators_1.StringOrNull,
    useAsTitle: t.boolean,
    placeholder: t.string,
    select: (0, withFallback_1.withFallback)(t.union([
        t.literal("media"),
        t.literal("document"),
        t.literal("web"),
        t.null,
    ]), null),
    customtypes: t.readonlyArray(t.string),
    masks: MasksArrayString,
    tags: MasksArrayString,
    allowTargetBlank: t.boolean,
}));
exports.Link = t.exact(t.intersection([
    t.type({
        type: t.literal(exports.LinkFieldType),
    }),
    t.partial({
        fieldset: validators_1.StringOrNull,
        config: exports.LinkConfig,
    }),
]));
