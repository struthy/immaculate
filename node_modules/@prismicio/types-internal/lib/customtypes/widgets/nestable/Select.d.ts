import * as t from "io-ts";
export declare const SelectFieldType = "Select";
export declare const SelectConfig: t.ExactC<t.PartialC<{
    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    placeholder: t.StringC;
    default_value: t.StringC;
    options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
}>>;
export declare type SelectConfig = t.TypeOf<typeof SelectConfig>;
export declare const Select: t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"Select">;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        default_value: t.StringC;
        options: t.ReadonlyArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
    }>>;
}>]>>;
export declare type Select = t.TypeOf<typeof Select>;
