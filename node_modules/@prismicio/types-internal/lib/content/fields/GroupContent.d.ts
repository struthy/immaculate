import * as t from "io-ts";
import type { ContentPath, TraverseWidgetContentFn } from "../../_internal/utils";
import { type Group, type NestableWidget } from "../../customtypes";
import { LegacyContentCtx, WithTypes } from "../LegacyContentCtx";
import { NestableContent } from "./nestable";
export declare const GroupItemContentType: "GroupItemContent";
export declare const GroupContentType: "GroupContentType";
export declare const GroupItemContent: t.Type<GroupItemContent>;
export declare type GroupItemContent = {
    __TYPE__: typeof GroupItemContentType;
    value: [string, NestableContent | GroupContent][];
};
export declare const GroupContent: t.Type<GroupContent>;
export declare type GroupContent = {
    __TYPE__: typeof GroupContentType;
    value: GroupItemContent[];
};
export declare const isGroupContent: t.Is<GroupContent>;
export declare const GroupContentDefaultValue: GroupContent;
declare const itemLegacyReader: t.RecordC<t.StringC, t.UnknownC>;
declare type GroupItemLegacy = t.TypeOf<typeof itemLegacyReader>;
export declare const GroupItemLegacy: (ctx: LegacyContentCtx) => t.Type<GroupItemContent, WithTypes<{
    [x: string]: unknown;
}>, unknown>;
declare type GroupLegacy = Array<GroupItemLegacy>;
export declare const GroupLegacy: (ctx: LegacyContentCtx) => t.Type<GroupContent, WithTypes<GroupLegacy>, unknown>;
export declare function groupContentWithDefaultValues(customType: Group, content: GroupContent): GroupContent;
export declare function traverseGroupContent({ path, key, apiId, model, content, }: {
    path: ContentPath;
    key: string;
    apiId: string;
    content: GroupContent;
    model?: Group | undefined;
}): (transform: TraverseWidgetContentFn) => GroupContent | undefined;
export declare function traverseGroupItemsContent({ path, model, content, }: {
    path: ContentPath;
    content: Array<GroupItemContent>;
    model?: Record<string, Group | NestableWidget> | undefined;
}): (transform: TraverseWidgetContentFn) => Array<GroupItemContent>;
export {};
