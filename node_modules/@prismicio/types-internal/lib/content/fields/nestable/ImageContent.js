"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageContent = exports.ImageLegacy = exports.ImageContentView = exports.isImageContent = exports.ImageContentType = void 0;
const tslib_1 = require("tslib");
const fp_ts_1 = require("fp-ts");
const function_1 = require("fp-ts/lib/function");
const t = (0, tslib_1.__importStar)(require("io-ts"));
const Objects_1 = require("../../../utils/Objects");
const validators_1 = require("../../../validators");
const utils_1 = require("../../utils");
exports.ImageContentType = "ImageContent";
const isImageContent = (u) => (0, utils_1.hasContentType)(u) && u.__TYPE__ === exports.ImageContentType;
exports.isImageContent = isImageContent;
const originReader = t.exact(t.type({
    id: t.string,
    url: t.string,
    width: t.number,
    height: t.number,
}));
exports.ImageContentView = t.exact(t.intersection([
    t.type({
        origin: originReader,
        width: t.number,
        height: t.number,
        edit: t.type({
            zoom: t.number,
            crop: t.type({
                x: t.number,
                y: t.number,
            }),
            background: t.string,
        }),
    }),
    t.partial({
        url: t.string,
        credits: validators_1.NonEmptyStringOrNull,
        alt: validators_1.NonEmptyStringOrNull,
        provider: validators_1.StringOrNull,
    }),
]));
const legacyReader = t.intersection([
    exports.ImageContentView,
    t.partial({
        thumbnails: t.record(t.string, exports.ImageContentView),
    }),
]);
const ImageLegacy = (ctx) => new t.Type("ImageLegacy", exports.isImageContent, (u) => {
    return (0, function_1.pipe)(legacyReader.decode(u), fp_ts_1.either.map((i) => exports.ImageContent.encode({ ...i, __TYPE__: exports.ImageContentType })));
}, (i) => {
    return {
        content: (0, Objects_1.withOptionals)({
            edit: i.edit,
            height: i.height,
            origin: i.origin,
            width: i.width,
        }, [
            ["alt", i.alt],
            ["credits", i.credits],
            ["provider", i.provider],
            ["thumbnails", i.thumbnails],
            ["url", i.url],
        ]),
        types: { [ctx.keyOfType]: "Image" },
    };
});
exports.ImageLegacy = ImageLegacy;
exports.ImageContent = t.intersection([
    legacyReader,
    t.strict({
        __TYPE__: t.literal(exports.ImageContentType),
    }),
]);
