import * as t from "io-ts";
export declare const Span: t.UnionC<[t.ExactC<t.TypeC<{
    data: t.UnionC<[t.IntersectionC<[t.ExactC<t.TypeC<{
        __TYPE__: t.LiteralC<"ImageLink">;
    }>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        id: t.StringC;
        url: t.StringC;
        height: t.StringC;
        width: t.StringC;
        size: t.StringC;
        name: t.StringC;
        kind: t.StringC;
    }>, t.PartialC<{
        date: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>]>>]>, t.IntersectionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
        id: t.StringC;
        url: t.StringC;
        name: t.StringC;
        kind: t.StringC;
        size: t.StringC;
    }>, t.PartialC<{
        date: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        __TYPE__: t.LiteralC<"FileLink">;
    }>, t.PartialC<{
        size: t.StringC;
    }>]>>]>, t.IntersectionC<[t.ExactC<t.TypeC<{
        __TYPE__: t.LiteralC<"DocumentLink">;
    }>>, t.ExactC<t.TypeC<{
        id: t.Type<string, string, unknown>;
    }>>]>, t.IntersectionC<[t.ExactC<t.TypeC<{
        __TYPE__: t.LiteralC<"ExternalLink">;
    }>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        url: t.StringC;
    }>, t.PartialC<{
        kind: t.LiteralC<"web">;
        target: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        preview: t.UnionC<[t.Type<{
            title?: string;
        }, {
            title?: string;
        }, unknown>, t.NullC, t.UndefinedC]>;
    }>]>>]>]> | t.UnionC<[t.Type<{
        __TYPE__: "ImageLink";
    } & {
        id: string;
        url: string;
        height: string;
        width: string;
        size: string;
        name: string;
        kind: string;
    } & {
        date?: string | null | undefined;
    }, {
        id: string;
        url: string;
        height: string;
        width: string;
        size: string;
        name: string;
        kind: string;
    } & {
        date?: string | null | undefined;
    }, unknown>, t.Type<{
        id: string;
        url: string;
        name: string;
        kind: string;
        size: string;
    } & {
        date?: string | null | undefined;
    } & {
        __TYPE__: "FileLink";
    } & {
        size?: string;
    }, {
        id: string;
        url: string;
        name: string;
        kind: string;
        size: string;
    } & {
        date?: string | null | undefined;
    }, unknown>, t.Type<{
        __TYPE__: "DocumentLink";
    } & {
        id: string;
    }, {
        id: string;
    }, unknown>, t.Type<{
        __TYPE__: "ExternalLink";
    } & {
        url: string;
    } & {
        kind?: "web";
        target?: string | null | undefined;
        preview?: {
            title?: string;
        } | null | undefined;
    }, {
        url: string;
    } & {
        kind?: "web";
        target?: string | null | undefined;
        preview?: {
            title?: string;
        } | null | undefined;
    }, unknown>]>;
    start: t.NumberC;
    end: t.NumberC;
    type: t.LiteralC<"hyperlink">;
}>>, t.ExactC<t.TypeC<{
    data: t.StringC;
    start: t.NumberC;
    end: t.NumberC;
    type: t.LiteralC<"label">;
}>>, t.ExactC<t.TypeC<{
    start: t.NumberC;
    end: t.NumberC;
    type: t.KeyofC<{
        strong: null;
        em: null;
        "list-item": null;
    }>;
}>>]>;
export declare type Span = t.TypeOf<typeof Span>;
export declare const SpanLegacy: t.UnionC<[t.ExactC<t.TypeC<{
    data: t.UnionC<[t.IntersectionC<[t.ExactC<t.TypeC<{
        __TYPE__: t.LiteralC<"ImageLink">;
    }>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        id: t.StringC;
        url: t.StringC;
        height: t.StringC;
        width: t.StringC;
        size: t.StringC;
        name: t.StringC;
        kind: t.StringC;
    }>, t.PartialC<{
        date: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>]>>]>, t.IntersectionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
        id: t.StringC;
        url: t.StringC;
        name: t.StringC;
        kind: t.StringC;
        size: t.StringC;
    }>, t.PartialC<{
        date: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        __TYPE__: t.LiteralC<"FileLink">;
    }>, t.PartialC<{
        size: t.StringC;
    }>]>>]>, t.IntersectionC<[t.ExactC<t.TypeC<{
        __TYPE__: t.LiteralC<"DocumentLink">;
    }>>, t.ExactC<t.TypeC<{
        id: t.Type<string, string, unknown>;
    }>>]>, t.IntersectionC<[t.ExactC<t.TypeC<{
        __TYPE__: t.LiteralC<"ExternalLink">;
    }>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        url: t.StringC;
    }>, t.PartialC<{
        kind: t.LiteralC<"web">;
        target: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        preview: t.UnionC<[t.Type<{
            title?: string;
        }, {
            title?: string;
        }, unknown>, t.NullC, t.UndefinedC]>;
    }>]>>]>]> | t.UnionC<[t.Type<{
        __TYPE__: "ImageLink";
    } & {
        id: string;
        url: string;
        height: string;
        width: string;
        size: string;
        name: string;
        kind: string;
    } & {
        date?: string | null | undefined;
    }, {
        id: string;
        url: string;
        height: string;
        width: string;
        size: string;
        name: string;
        kind: string;
    } & {
        date?: string | null | undefined;
    }, unknown>, t.Type<{
        id: string;
        url: string;
        name: string;
        kind: string;
        size: string;
    } & {
        date?: string | null | undefined;
    } & {
        __TYPE__: "FileLink";
    } & {
        size?: string;
    }, {
        id: string;
        url: string;
        name: string;
        kind: string;
        size: string;
    } & {
        date?: string | null | undefined;
    }, unknown>, t.Type<{
        __TYPE__: "DocumentLink";
    } & {
        id: string;
    }, {
        id: string;
    }, unknown>, t.Type<{
        __TYPE__: "ExternalLink";
    } & {
        url: string;
    } & {
        kind?: "web";
        target?: string | null | undefined;
        preview?: {
            title?: string;
        } | null | undefined;
    }, {
        url: string;
    } & {
        kind?: "web";
        target?: string | null | undefined;
        preview?: {
            title?: string;
        } | null | undefined;
    }, unknown>]>;
    start: t.NumberC;
    end: t.NumberC;
    type: t.LiteralC<"hyperlink">;
}>>, t.ExactC<t.TypeC<{
    data: t.StringC;
    start: t.NumberC;
    end: t.NumberC;
    type: t.LiteralC<"label">;
}>>, t.ExactC<t.TypeC<{
    start: t.NumberC;
    end: t.NumberC;
    type: t.KeyofC<{
        strong: null;
        em: null;
        "list-item": null;
    }>;
}>>]>;
export declare type SpanLegacy = t.TypeOf<typeof SpanLegacy>;
export declare const ValidatedSpans: <C extends t.UnionC<[t.ExactC<t.TypeC<{
    data: t.UnionC<[t.IntersectionC<[t.ExactC<t.TypeC<{
        __TYPE__: t.LiteralC<"ImageLink">;
    }>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        id: t.StringC;
        url: t.StringC;
        height: t.StringC;
        width: t.StringC;
        size: t.StringC;
        name: t.StringC;
        kind: t.StringC;
    }>, t.PartialC<{
        date: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>]>>]>, t.IntersectionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
        id: t.StringC;
        url: t.StringC;
        name: t.StringC;
        kind: t.StringC;
        size: t.StringC;
    }>, t.PartialC<{
        date: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        __TYPE__: t.LiteralC<"FileLink">;
    }>, t.PartialC<{
        size: t.StringC;
    }>]>>]>, t.IntersectionC<[t.ExactC<t.TypeC<{
        __TYPE__: t.LiteralC<"DocumentLink">;
    }>>, t.ExactC<t.TypeC<{
        id: t.Type<string, string, unknown>;
    }>>]>, t.IntersectionC<[t.ExactC<t.TypeC<{
        __TYPE__: t.LiteralC<"ExternalLink">;
    }>>, t.ExactC<t.IntersectionC<[t.TypeC<{
        url: t.StringC;
    }>, t.PartialC<{
        kind: t.LiteralC<"web">;
        target: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        preview: t.UnionC<[t.Type<{
            title?: string;
        }, {
            title?: string;
        }, unknown>, t.NullC, t.UndefinedC]>;
    }>]>>]>]> | t.UnionC<[t.Type<{
        __TYPE__: "ImageLink";
    } & {
        id: string;
        url: string;
        height: string;
        width: string;
        size: string;
        name: string;
        kind: string;
    } & {
        date?: string | null | undefined;
    }, {
        id: string;
        url: string;
        height: string;
        width: string;
        size: string;
        name: string;
        kind: string;
    } & {
        date?: string | null | undefined;
    }, unknown>, t.Type<{
        id: string;
        url: string;
        name: string;
        kind: string;
        size: string;
    } & {
        date?: string | null | undefined;
    } & {
        __TYPE__: "FileLink";
    } & {
        size?: string;
    }, {
        id: string;
        url: string;
        name: string;
        kind: string;
        size: string;
    } & {
        date?: string | null | undefined;
    }, unknown>, t.Type<{
        __TYPE__: "DocumentLink";
    } & {
        id: string;
    }, {
        id: string;
    }, unknown>, t.Type<{
        __TYPE__: "ExternalLink";
    } & {
        url: string;
    } & {
        kind?: "web";
        target?: string | null | undefined;
        preview?: {
            title?: string;
        } | null | undefined;
    }, {
        url: string;
    } & {
        kind?: "web";
        target?: string | null | undefined;
        preview?: {
            title?: string;
        } | null | undefined;
    }, unknown>]>;
    start: t.NumberC;
    end: t.NumberC;
    type: t.LiteralC<"hyperlink">;
}>>, t.ExactC<t.TypeC<{
    data: t.StringC;
    start: t.NumberC;
    end: t.NumberC;
    type: t.LiteralC<"label">;
}>>, t.ExactC<t.TypeC<{
    start: t.NumberC;
    end: t.NumberC;
    type: t.KeyofC<{
        strong: null;
        em: null;
        "list-item": null;
    }>;
}>>]>>(spanCodec: C) => t.Type<t.TypeOf<C>[], t.TypeOf<C>[], unknown>;
export declare const TextBlock: t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.Type<"image" | "paragraph" | "heading1" | "heading2" | "heading3" | "heading4" | "heading5" | "heading6" | "strong" | "em" | "preformatted" | "hyperlink" | "embed" | "list-item" | "o-list-item" | "rtl", "image" | "paragraph" | "heading1" | "heading2" | "heading3" | "heading4" | "heading5" | "heading6" | "strong" | "em" | "preformatted" | "hyperlink" | "embed" | "list-item" | "o-list-item" | "rtl", unknown>;
    content: t.IntersectionC<[t.TypeC<{
        text: t.StringC;
    }>, t.PartialC<{
        spans: t.Type<({
            data: ({
                __TYPE__: "ImageLink";
            } & {
                id: string;
                url: string;
                height: string;
                width: string;
                size: string;
                name: string;
                kind: string;
            } & {
                date?: string | null | undefined;
            }) | ({
                id: string;
                url: string;
                name: string;
                kind: string;
                size: string;
            } & {
                date?: string | null | undefined;
            } & {
                __TYPE__: "FileLink";
            } & {
                size?: string;
            }) | ({
                __TYPE__: "DocumentLink";
            } & {
                id: string;
            }) | ({
                __TYPE__: "ExternalLink";
            } & {
                url: string;
            } & {
                kind?: "web";
                target?: string | null | undefined;
                preview?: {
                    title?: string;
                } | null | undefined;
            });
            start: number;
            end: number;
            type: "hyperlink";
        } | {
            data: string;
            start: number;
            end: number;
            type: "label";
        } | {
            start: number;
            end: number;
            type: "strong" | "em" | "list-item";
        })[], ({
            data: ({
                __TYPE__: "ImageLink";
            } & {
                id: string;
                url: string;
                height: string;
                width: string;
                size: string;
                name: string;
                kind: string;
            } & {
                date?: string | null | undefined;
            }) | ({
                id: string;
                url: string;
                name: string;
                kind: string;
                size: string;
            } & {
                date?: string | null | undefined;
            } & {
                __TYPE__: "FileLink";
            } & {
                size?: string;
            }) | ({
                __TYPE__: "DocumentLink";
            } & {
                id: string;
            }) | ({
                __TYPE__: "ExternalLink";
            } & {
                url: string;
            } & {
                kind?: "web";
                target?: string | null | undefined;
                preview?: {
                    title?: string;
                } | null | undefined;
            });
            start: number;
            end: number;
            type: "hyperlink";
        } | {
            data: string;
            start: number;
            end: number;
            type: "label";
        } | {
            start: number;
            end: number;
            type: "strong" | "em" | "list-item";
        })[], unknown>;
    }>]>;
}>, t.PartialC<{
    label: t.StringC;
    direction: t.StringC;
}>]>>;
export declare type TextBlock = t.TypeOf<typeof TextBlock>;
/** A paragraph Text block. Paragraphs may contain spans. */
export declare const ParagraphBlock: t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.Type<"image" | "paragraph" | "heading1" | "heading2" | "heading3" | "heading4" | "heading5" | "heading6" | "strong" | "em" | "preformatted" | "hyperlink" | "embed" | "list-item" | "o-list-item" | "rtl", "image" | "paragraph" | "heading1" | "heading2" | "heading3" | "heading4" | "heading5" | "heading6" | "strong" | "em" | "preformatted" | "hyperlink" | "embed" | "list-item" | "o-list-item" | "rtl", unknown>;
    content: t.IntersectionC<[t.TypeC<{
        text: t.StringC;
    }>, t.PartialC<{
        spans: t.Type<({
            data: ({
                __TYPE__: "ImageLink";
            } & {
                id: string;
                url: string;
                height: string;
                width: string;
                size: string;
                name: string;
                kind: string;
            } & {
                date?: string | null | undefined;
            }) | ({
                id: string;
                url: string;
                name: string;
                kind: string;
                size: string;
            } & {
                date?: string | null | undefined;
            } & {
                __TYPE__: "FileLink";
            } & {
                size?: string;
            }) | ({
                __TYPE__: "DocumentLink";
            } & {
                id: string;
            }) | ({
                __TYPE__: "ExternalLink";
            } & {
                url: string;
            } & {
                kind?: "web";
                target?: string | null | undefined;
                preview?: {
                    title?: string;
                } | null | undefined;
            });
            start: number;
            end: number;
            type: "hyperlink";
        } | {
            data: string;
            start: number;
            end: number;
            type: "label";
        } | {
            start: number;
            end: number;
            type: "strong" | "em" | "list-item";
        })[], ({
            data: ({
                __TYPE__: "ImageLink";
            } & {
                id: string;
                url: string;
                height: string;
                width: string;
                size: string;
                name: string;
                kind: string;
            } & {
                date?: string | null | undefined;
            }) | ({
                id: string;
                url: string;
                name: string;
                kind: string;
                size: string;
            } & {
                date?: string | null | undefined;
            } & {
                __TYPE__: "FileLink";
            } & {
                size?: string;
            }) | ({
                __TYPE__: "DocumentLink";
            } & {
                id: string;
            }) | ({
                __TYPE__: "ExternalLink";
            } & {
                url: string;
            } & {
                kind?: "web";
                target?: string | null | undefined;
                preview?: {
                    title?: string;
                } | null | undefined;
            });
            start: number;
            end: number;
            type: "hyperlink";
        } | {
            data: string;
            start: number;
            end: number;
            type: "label";
        } | {
            start: number;
            end: number;
            type: "strong" | "em" | "list-item";
        })[], unknown>;
    }>]>;
}>, t.PartialC<{
    label: t.StringC;
    direction: t.StringC;
}>]>>;
export declare type ParagraphBlock = t.TypeOf<typeof ParagraphBlock>;
export declare const TextBlockLegacy: t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.Type<"image" | "paragraph" | "heading1" | "heading2" | "heading3" | "heading4" | "heading5" | "heading6" | "strong" | "em" | "preformatted" | "hyperlink" | "embed" | "list-item" | "o-list-item" | "rtl", "image" | "paragraph" | "heading1" | "heading2" | "heading3" | "heading4" | "heading5" | "heading6" | "strong" | "em" | "preformatted" | "hyperlink" | "embed" | "list-item" | "o-list-item" | "rtl", unknown>;
    content: t.IntersectionC<[t.TypeC<{
        text: t.StringC;
    }>, t.PartialC<{
        spans: t.Type<({
            data: ({
                __TYPE__: "ImageLink";
            } & {
                id: string;
                url: string;
                height: string;
                width: string;
                size: string;
                name: string;
                kind: string;
            } & {
                date?: string | null | undefined;
            }) | ({
                id: string;
                url: string;
                name: string;
                kind: string;
                size: string;
            } & {
                date?: string | null | undefined;
            } & {
                __TYPE__: "FileLink";
            } & {
                size?: string;
            }) | ({
                __TYPE__: "DocumentLink";
            } & {
                id: string;
            }) | ({
                __TYPE__: "ExternalLink";
            } & {
                url: string;
            } & {
                kind?: "web";
                target?: string | null | undefined;
                preview?: {
                    title?: string;
                } | null | undefined;
            });
            start: number;
            end: number;
            type: "hyperlink";
        } | {
            data: string;
            start: number;
            end: number;
            type: "label";
        } | {
            start: number;
            end: number;
            type: "strong" | "em" | "list-item";
        })[], ({
            data: ({
                __TYPE__: "ImageLink";
            } & {
                id: string;
                url: string;
                height: string;
                width: string;
                size: string;
                name: string;
                kind: string;
            } & {
                date?: string | null | undefined;
            }) | ({
                id: string;
                url: string;
                name: string;
                kind: string;
                size: string;
            } & {
                date?: string | null | undefined;
            } & {
                __TYPE__: "FileLink";
            } & {
                size?: string;
            }) | ({
                __TYPE__: "DocumentLink";
            } & {
                id: string;
            }) | ({
                __TYPE__: "ExternalLink";
            } & {
                url: string;
            } & {
                kind?: "web";
                target?: string | null | undefined;
                preview?: {
                    title?: string;
                } | null | undefined;
            });
            start: number;
            end: number;
            type: "hyperlink";
        } | {
            data: string;
            start: number;
            end: number;
            type: "label";
        } | {
            start: number;
            end: number;
            type: "strong" | "em" | "list-item";
        })[], unknown>;
    }>]>;
}>, t.PartialC<{
    label: t.StringC;
    direction: t.StringC;
}>]>>;
export declare type TextBlockLegacy = t.TypeOf<typeof TextBlockLegacy>;
