"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateSimpleSlice = exports.traverseSimpleSliceContent = exports.SimpleSliceLegacy = exports.isSimpleSliceContent = exports.SimpleSliceContent = void 0;
const tslib_1 = require("tslib");
const t = (0, tslib_1.__importStar)(require("io-ts"));
const GroupContent_1 = require("../../GroupContent");
const nestable_1 = require("../../nestable");
exports.SimpleSliceContent = t.union([nestable_1.NestableContent, GroupContent_1.GroupContent]);
const isSimpleSliceContent = (u) => (0, nestable_1.isNestableContent)(u) || (0, GroupContent_1.isGroupContent)(u);
exports.isSimpleSliceContent = isSimpleSliceContent;
const SimpleSliceLegacy = (ctx) => {
    return {
        decode: (() => {
            if (ctx.fieldType === "Group")
                return (0, GroupContent_1.GroupLegacy)(ctx).decode.bind(null);
            return (0, nestable_1.NestableLegacy)(ctx).decode.bind(null);
        })(),
        encode: (value) => {
            switch (value.__TYPE__) {
                case "GroupContentType":
                    return (0, GroupContent_1.GroupLegacy)(ctx).encode(value);
                default:
                    return (0, nestable_1.NestableLegacy)(ctx).encode(value);
            }
        },
    };
};
exports.SimpleSliceLegacy = SimpleSliceLegacy;
function traverseSimpleSliceContent({ path, sliceKey, sliceName, model, content, }) {
    return (transformWidget, transformSlice) => {
        if ((0, GroupContent_1.isGroupContent)(content.widget)) {
            const convertedGroupWidget = (0, GroupContent_1.traverseGroupContent)({
                path,
                key: content.key,
                apiId: content.name,
                model: (() => {
                    if ((model === null || model === void 0 ? void 0 : model.type) === "Group")
                        return model;
                    if ((model === null || model === void 0 ? void 0 : model.type) === "SharedSlice")
                        return {
                            type: "Group",
                            config: { fields: model.fields.items || {} },
                        };
                    return;
                })(),
                content: content.widget,
            })(transformWidget);
            return (convertedGroupWidget &&
                transformSlice({
                    key: content.key,
                    apiId: content.name,
                    path,
                    model,
                    content: {
                        ...content,
                        widget: convertedGroupWidget,
                    },
                }));
        }
        const convertedNestable = transformWidget({
            key: content.key,
            apiId: content.name,
            path,
            model: (() => {
                var _a;
                if ((model === null || model === void 0 ? void 0 : model.type) === "SharedSlice")
                    return (_a = model.fields.primary) === null || _a === void 0 ? void 0 : _a[content.name];
                if ((model === null || model === void 0 ? void 0 : model.type) !== "Group")
                    return model;
                return;
            })(),
            content: content.widget,
        });
        return (convertedNestable &&
            transformSlice({
                key: sliceKey,
                apiId: sliceName,
                path,
                model,
                content: {
                    ...content,
                    widget: convertedNestable,
                },
            }));
    };
}
exports.traverseSimpleSliceContent = traverseSimpleSliceContent;
function migrateSimpleSlice(model, content) {
    var _a;
    const [, sliceUUID] = content.key.split("$");
    const key = `${model.sliceName}$${sliceUUID}`;
    if (content.widget.__TYPE__ === "GroupContentType") {
        return {
            key,
            name: model.sliceName,
            maybeLabel: content.maybeLabel,
            widget: {
                __TYPE__: "SharedSliceContent",
                variation: model.variationId,
                primary: {},
                items: content.widget.value.map((groupItem) => {
                    return {
                        __TYPE__: "GroupItemContent",
                        value: groupItem.value.reduce((acc, [fieldKey, fieldContent]) => {
                            var _a;
                            return ((_a = model.fields.items) === null || _a === void 0 ? void 0 : _a[fieldKey])
                                ? acc.concat([[fieldKey, fieldContent]])
                                : acc;
                        }, []),
                    };
                }, []),
            },
        };
    }
    return {
        key,
        name: model.sliceName,
        maybeLabel: content.maybeLabel,
        widget: {
            __TYPE__: "SharedSliceContent",
            variation: model.variationId,
            primary: ((_a = model.fields.primary) === null || _a === void 0 ? void 0 : _a[content.name])
                ? { [content.name]: content.widget }
                : {},
            items: [],
        },
    };
}
exports.migrateSimpleSlice = migrateSimpleSlice;
