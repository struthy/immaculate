import * as t from "io-ts";
export declare const FieldOrSliceType: t.UnionC<[t.KeyofC<{
    Color: null;
    Boolean: null;
    Number: null;
    Embed: null;
    GeoPoint: null;
    Date: null;
    Range: null;
    StructuredText: null;
    Select: null;
    Separator: null;
    Text: null;
    Timestamp: null;
    Link: null;
    Image: null;
    IntegrationFields: null;
    UID: null;
    Group: null;
    Slices: null;
    Choice: null;
}>, t.KeyofC<{
    Slice: null;
    SharedSlice: null;
}>]>;
export declare type FieldOrSliceType = t.TypeOf<typeof FieldOrSliceType>;
export declare class LegacyContentCtx {
    fieldKey: string;
    prefixedKey: string;
    keyOfType: string;
    fieldPath: Array<string>;
    fieldType?: FieldOrSliceType | undefined;
    allTypes: Map<string, FieldOrSliceType>;
    constructor(fieldKey: string, fieldPath?: Array<string>, allTypes?: Map<string, FieldOrSliceType>);
}
export declare function getFieldCtx(fieldKey: string, ctx: LegacyContentCtx, prefixes?: Array<string>): LegacyContentCtx;
export declare function defaultCtx(key: string, allTypes?: Map<string, FieldOrSliceType>): LegacyContentCtx;
export declare type WithTypes<T> = {
    types: Record<string, FieldOrSliceType>;
    content: T;
};
