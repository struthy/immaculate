"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultCtx = exports.getFieldCtx = exports.LegacyContentCtx = exports.FieldOrSliceType = void 0;
const tslib_1 = require("tslib");
const t = (0, tslib_1.__importStar)(require("io-ts"));
const widgets_1 = require("../customtypes/widgets");
exports.FieldOrSliceType = t.union([widgets_1.FieldType, widgets_1.SlicesTypes]);
class LegacyContentCtx {
    constructor(fieldKey, fieldPath, allTypes) {
        Object.defineProperty(this, "fieldKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "prefixedKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "keyOfType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fieldPath", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fieldType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "allTypes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.fieldKey = fieldKey;
        this.fieldPath = fieldPath || [];
        this.allTypes = allTypes || new Map();
        const prefixedKey = Array.of(this.fieldPath, [this.fieldKey])
            .flat()
            .join(".");
        this.prefixedKey = prefixedKey;
        this.keyOfType = `${prefixedKey}_TYPE`;
        this.fieldType = this.allTypes.get(this.prefixedKey);
    }
}
exports.LegacyContentCtx = LegacyContentCtx;
function getFieldCtx(fieldKey, ctx, prefixes) {
    return new LegacyContentCtx(fieldKey, [...ctx.fieldPath, ctx.fieldKey, ...(prefixes || [])], ctx.allTypes);
}
exports.getFieldCtx = getFieldCtx;
function defaultCtx(key, allTypes = new Map()) {
    return new LegacyContentCtx(key, [], allTypes);
}
exports.defaultCtx = defaultCtx;
