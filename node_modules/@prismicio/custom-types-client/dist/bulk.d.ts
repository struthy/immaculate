import * as prismic from "@prismicio/client";
/**
 * The type of a bulk operation.
 */
export declare const BulkOperationType: {
    readonly CustomTypeInsert: "CUSTOM_TYPE_INSERT";
    readonly CustomTypeUpdate: "CUSTOM_TYPE_UPDATE";
    readonly CustomTypeDelete: "CUSTOM_TYPE_DELETE";
    readonly SliceInsert: "SLICE_INSERT";
    readonly SliceUpdate: "SLICE_UPDATE";
    readonly SliceDelete: "SLICE_DELETE";
};
export type BulkOperationType = (typeof BulkOperationType)[keyof typeof BulkOperationType];
/**
 * An object describing a bulk operation.
 */
export type BulkOperation = {
    type: typeof BulkOperationType.CustomTypeInsert;
    id: string;
    payload: prismic.CustomTypeModel;
} | {
    type: typeof BulkOperationType.CustomTypeUpdate;
    id: string;
    payload: prismic.CustomTypeModel;
} | {
    type: typeof BulkOperationType.CustomTypeDelete;
    id: string;
    payload: Pick<prismic.CustomTypeModel, "id">;
} | {
    type: typeof BulkOperationType.SliceInsert;
    id: string;
    payload: prismic.SharedSliceModel;
} | {
    type: typeof BulkOperationType.SliceUpdate;
    id: string;
    payload: prismic.SharedSliceModel;
} | {
    type: typeof BulkOperationType.SliceDelete;
    id: string;
    payload: Pick<prismic.SharedSliceModel, "id">;
};
export type BulkTransactionModels = {
    customTypes?: prismic.CustomTypeModel[];
    slices?: prismic.SharedSliceModel[];
};
/**
 * Create a bulk transaction instance to pass to a Custom Types Client `bulk()`
 * method.
 */
export declare const createBulkTransaction: (initialOperations?: BulkTransaction | BulkOperation[] | undefined) => BulkTransaction;
export declare class BulkTransaction {
    operations: BulkOperation[];
    constructor(initialOperations?: BulkTransaction | BulkOperation[]);
    fromDiff(before: BulkTransactionModels, after: BulkTransactionModels): void;
    insertCustomType(customType: prismic.CustomTypeModel): void;
    updateCustomType(customType: prismic.CustomTypeModel): void;
    deleteCustomType(customType: prismic.CustomTypeModel): void;
    insertSlice(slice: prismic.SharedSliceModel): void;
    updateSlice(slice: prismic.SharedSliceModel): void;
    deleteSlice(slice: prismic.SharedSliceModel): void;
}
