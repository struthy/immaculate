"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SliceZoneMock = void 0;
const content_1 = require("@prismicio/types-internal/lib/content");
const uuid_1 = require("uuid");
const _1 = require(".");
const nestable_1 = require("./nestable");
exports.SliceZoneMock = {
    generate(def, sharedSlices = {}, config) {
        var _a;
        if (!((_a = def.config) === null || _a === void 0 ? void 0 : _a.choices))
            return {
                __TYPE__: content_1.SlicesContentType,
                value: [],
            };
        const result = Object.entries(def.config.choices).reduce((acc, [sliceKey, sliceDef]) => {
            const sliceMockConfig = (config === null || config === void 0 ? void 0 : config.value) && config.value[sliceKey];
            const widget = (() => {
                switch (sliceDef.type) {
                    case "SharedSlice": {
                        const sharedSliceDef = sharedSlices[sliceKey];
                        if (!sharedSliceDef) {
                            console.error(`You must provide the definition of the Shared Slice ${sliceKey} to get mocks.`);
                            return;
                        }
                        return _1.SharedSliceMock.generate(sharedSliceDef, sliceMockConfig);
                    }
                    case "Slice":
                        return; // we don't generate mocks for composite slice yet.
                    case "Group":
                        return _1.GroupMock.generate(sliceDef);
                    default:
                        return nestable_1.NestableWidgetMock.generate(sliceDef);
                }
            })();
            if (!widget)
                return acc;
            return acc.concat({
                key: `${sliceKey}$${(0, uuid_1.v4)()}`,
                name: sliceKey,
                maybeLabel: undefined,
                widget,
            });
        }, []);
        return {
            __TYPE__: content_1.SlicesContentType,
            value: result,
        };
    },
};
