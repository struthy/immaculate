"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkMock = void 0;
const tslib_1 = require("tslib");
const content_1 = require("@prismicio/types-internal/lib/content");
const diff_1 = require("@prismicio/types-internal/lib/customtypes/diff");
const DocumentLink_1 = require("./DocumentLink");
const ExternalLink_1 = require("./ExternalLink");
const MediaLink_1 = require("./MediaLink");
exports.LinkMock = {
    generate(def, config) {
        const linkValue = (() => {
            var _a;
            switch ((_a = def.config) === null || _a === void 0 ? void 0 : _a.select) {
                case "document":
                    return DocumentLink_1.DocumentLinkMock.generate(def);
                case "web":
                    return ExternalLink_1.ExternalLinkMock.generate(def, (config === null || config === void 0 ? void 0 : config.value) && config.value);
                case "media":
                    return MediaLink_1.MediaLinkMock.generate(def, (config === null || config === void 0 ? void 0 : config.value) && config.value);
                default:
                    return ExternalLink_1.ExternalLinkMock.generate(def, (config === null || config === void 0 ? void 0 : config.value) && config.value);
            }
        })();
        return {
            __TYPE__: content_1.LinkContentType,
            value: linkValue,
        };
    },
    applyPatch(data) {
        var _a;
        if (data.diff.op === diff_1.DiffOperation.Removed)
            return { result: undefined };
        if (data.diff.value.type === "Link") {
            const patched = this.patch(data.diff, (0, content_1.isLinkContent)(data.content) ? data.content : undefined, ((_a = data.config) === null || _a === void 0 ? void 0 : _a.type) === "Link" ? data.config : undefined);
            return { result: patched };
        }
        return;
    },
    patch(diff, _content, config) {
        switch (diff.op) {
            case diff_1.DiffOperation.Removed:
                return;
            case diff_1.DiffOperation.Added:
            case diff_1.DiffOperation.Updated:
                return this.generate(diff.value, config);
        }
    },
};
(0, tslib_1.__exportStar)(require("./DocumentLink"), exports);
(0, tslib_1.__exportStar)(require("./ExternalLink"), exports);
(0, tslib_1.__exportStar)(require("./MediaLink"), exports);
