"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RichTextMockConfig = exports.Patterns = exports.LoremDefaultConfig = void 0;
const customtypes_1 = require("@prismicio/types-internal/lib/customtypes");
const lorem_ipsum_1 = require("lorem-ipsum");
const utils_1 = require("../../../utils");
exports.LoremDefaultConfig = {
    sentencesPerParagraph: {
        min: 1,
        max: 3,
    },
    wordsPerSentence: {
        min: 4,
        max: 16,
    },
};
exports.Patterns = {
    PARAGRAPH: {
        title: "Simple Paragraph",
        test: (options) => options.some((e) => e === customtypes_1.RichTextNodeType.paragraph),
        value: () => [customtypes_1.RichTextNodeType.paragraph],
        description: "A single paragraph with a variant number of words.",
    },
    HEADING: {
        title: "Section Title",
        test: (options) => options.some(exports.RichTextMockConfig.isHeading),
        value: (options) => [
            options.find(exports.RichTextMockConfig.isHeading) || customtypes_1.RichTextNodeType.heading1,
        ],
        description: "A single heading (h1 to h6) with a variant number of words.",
    },
    STORY: {
        title: "Story",
        test: (options) => options.some(exports.RichTextMockConfig.isHeading) &&
            options.some((e) => e === customtypes_1.RichTextNodeType.paragraph),
        value: (options) => [
            options.find(exports.RichTextMockConfig.isHeading) || customtypes_1.RichTextNodeType.heading1,
            ...exports.RichTextMockConfig.optionalType(options, customtypes_1.RichTextNodeType.image),
            customtypes_1.RichTextNodeType.paragraph,
        ],
        description: "Content with headings, texts and optional images",
    },
};
exports.RichTextMockConfig = {
    INITIAL_CONFIG: {
        pattern: exports.Patterns.PARAGRAPH,
        blocks: 1,
    },
    isHeading: (type) => type.indexOf("heading") === 0,
    isText: (type) => type === customtypes_1.RichTextNodeType.paragraph || exports.RichTextMockConfig.isHeading(type),
    isImage: (type) => type === customtypes_1.RichTextNodeType.image,
    optionalType: (options, type) => (options.find((e) => e === type) && Math.random() > 0.5 ? [type] : []),
    findMatchingPattern: (options) => {
        const PatternEntry = Object.entries(exports.Patterns).find(([, patt]) => patt.test(options));
        if (PatternEntry && PatternEntry.length) {
            return PatternEntry[1];
        }
        return exports.RichTextMockConfig.INITIAL_CONFIG.pattern;
    },
    generateText: (contentType, loremConfig) => {
        const lorem = new lorem_ipsum_1.LoremIpsum(loremConfig);
        if (exports.RichTextMockConfig.isHeading(contentType)) {
            const fake = (0, utils_1.slug)({ min: 5, max: 10 });
            return [fake[0] && fake[0].toUpperCase(), ...fake.slice(1)].join("");
        }
        return lorem.generateParagraphs(1);
    },
};
