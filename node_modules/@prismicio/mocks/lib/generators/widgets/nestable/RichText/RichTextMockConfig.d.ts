import type { Block } from "@prismicio/types-internal/lib/content";
import { RichText, RichTextNodeType } from "@prismicio/types-internal/lib/customtypes";
import type { MockConfig } from "../../../MockConfig";
export declare type RichTextMockPattern = "HEADING" | "PARAGRAPH" | "STORY";
export declare const LoremDefaultConfig: {
    readonly sentencesPerParagraph: {
        readonly min: 1;
        readonly max: 3;
    };
    readonly wordsPerSentence: {
        readonly min: 4;
        readonly max: 16;
    };
};
export interface RichTextMockConfig extends MockConfig<RichText["type"], Array<Block>> {
    nbBlocks?: number;
    pattern?: RichTextMockPattern;
}
export declare const Patterns: {
    PARAGRAPH: {
        title: string;
        test: (options: ReadonlyArray<RichTextNodeType>) => boolean;
        value: () => RichTextNodeType[];
        description: string;
    };
    HEADING: {
        title: string;
        test: (options: ReadonlyArray<RichTextNodeType>) => boolean;
        value: (options: ReadonlyArray<RichTextNodeType>) => RichTextNodeType[];
        description: string;
    };
    STORY: {
        title: string;
        test: (options: ReadonlyArray<RichTextNodeType>) => boolean;
        value: (options: ReadonlyArray<RichTextNodeType>) => RichTextNodeType[];
        description: string;
    };
};
export declare const RichTextMockConfig: {
    INITIAL_CONFIG: {
        pattern: {
            title: string;
            test: (options: ReadonlyArray<RichTextNodeType>) => boolean;
            value: () => RichTextNodeType[];
            description: string;
        };
        blocks: number;
    };
    isHeading: (type: string) => boolean;
    isText: (type: string) => boolean;
    isImage: (type: string) => boolean;
    optionalType: (options: ReadonlyArray<RichTextNodeType>, type: RichTextNodeType) => RichTextNodeType[];
    findMatchingPattern: (options: ReadonlyArray<RichTextNodeType>) => {
        title: string;
        test: (options: ReadonlyArray<RichTextNodeType>) => boolean;
        value: (options: ReadonlyArray<RichTextNodeType>) => RichTextNodeType[];
        description: string;
    };
    generateText: (contentType: string, loremConfig: typeof LoremDefaultConfig) => string;
};
