"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NestableWidgetMock = void 0;
const tslib_1 = require("tslib");
const diff_1 = require("@prismicio/types-internal/lib/customtypes/diff");
const BooleanField_1 = require("./BooleanField");
const Color_1 = require("./Color");
const Date_1 = require("./Date");
const Embed_1 = require("./Embed");
const GeoPoint_1 = require("./GeoPoint");
const Image_1 = require("./Image");
const IntegrationField_1 = require("./IntegrationField");
const Link_1 = require("./Link");
const Number_1 = require("./Number");
const Range_1 = require("./Range");
const RichText_1 = require("./RichText");
const Select_1 = require("./Select");
const Separator_1 = require("./Separator");
const Text_1 = require("./Text");
const Timestamp_1 = require("./Timestamp");
(0, tslib_1.__exportStar)(require("./BooleanField"), exports);
(0, tslib_1.__exportStar)(require("./Color"), exports);
(0, tslib_1.__exportStar)(require("./Date"), exports);
(0, tslib_1.__exportStar)(require("./Embed"), exports);
(0, tslib_1.__exportStar)(require("./GeoPoint"), exports);
(0, tslib_1.__exportStar)(require("./Image"), exports);
(0, tslib_1.__exportStar)(require("./IntegrationField"), exports);
(0, tslib_1.__exportStar)(require("./Link"), exports);
(0, tslib_1.__exportStar)(require("./Number"), exports);
(0, tslib_1.__exportStar)(require("./Range"), exports);
(0, tslib_1.__exportStar)(require("./RichText"), exports);
(0, tslib_1.__exportStar)(require("./Select"), exports);
(0, tslib_1.__exportStar)(require("./Separator"), exports);
(0, tslib_1.__exportStar)(require("./Text"), exports);
(0, tslib_1.__exportStar)(require("./Timestamp"), exports);
exports.NestableWidgetMock = {
    generate(def, config) {
        switch (def.type) {
            case "Boolean":
                return BooleanField_1.BooleanMock.generate(def, (config === null || config === void 0 ? void 0 : config.type) === "Boolean" ? config : undefined);
            case "Color":
                return Color_1.ColorMock.generate(def, (config === null || config === void 0 ? void 0 : config.type) === "Color" ? config : undefined);
            case "Link":
                return Link_1.LinkMock.generate(def, (config === null || config === void 0 ? void 0 : config.type) === "Link" ? config : undefined);
            case "Date":
                return Date_1.DateMock.generate(def, (config === null || config === void 0 ? void 0 : config.type) === "Date" ? config : undefined);
            case "Embed":
                return Embed_1.EmbedMock.generate(def, (config === null || config === void 0 ? void 0 : config.type) === "Embed" ? config : undefined);
            case "GeoPoint":
                return GeoPoint_1.GeoPointMock.generate(def, (config === null || config === void 0 ? void 0 : config.type) === "GeoPoint" ? config : undefined);
            case "Image":
                return Image_1.ImageMock.generate(def);
            case "IntegrationFields":
                return IntegrationField_1.IntegrationFieldMock.generate(def, (config === null || config === void 0 ? void 0 : config.type) === "IntegrationFields" ? config : undefined);
            case "Number":
                return Number_1.NumberMock.generate(def, (config === null || config === void 0 ? void 0 : config.type) === "Number" ? config : undefined);
            case "Range":
                return Range_1.RangeMock.generate(def, (config === null || config === void 0 ? void 0 : config.type) === "Range" ? config : undefined);
            case "StructuredText":
                return RichText_1.RichTextMock.generate(def, (config === null || config === void 0 ? void 0 : config.type) === "StructuredText" ? config : undefined);
            case "Select":
                return Select_1.SelectMock.generate(def, (config === null || config === void 0 ? void 0 : config.type) === "Select" ? config : undefined);
            case "Text":
                return Text_1.TextMock.generate(def, (config === null || config === void 0 ? void 0 : config.type) === "Text" ? config : undefined);
            case "Timestamp":
                return Timestamp_1.TimestampMock.generate(def, (config === null || config === void 0 ? void 0 : config.type) === "Timestamp" ? config : undefined);
            case "Separator":
                return Separator_1.SeparatorMock.generate(def);
        }
    },
    patch(diff, content, config) {
        if (diff.op === diff_1.DiffOperation.Removed)
            return;
        const data = { diff, content, config };
        const patched = Color_1.ColorMock.applyPatch(data) ||
            Date_1.DateMock.applyPatch(data) ||
            Timestamp_1.TimestampMock.applyPatch(data) ||
            Select_1.SelectMock.applyPatch(data) ||
            Range_1.RangeMock.applyPatch(data) ||
            Text_1.TextMock.applyPatch(data) ||
            Number_1.NumberMock.applyPatch(data) ||
            BooleanField_1.BooleanMock.applyPatch(data) ||
            RichText_1.RichTextMock.applyPatch(data) ||
            Link_1.LinkMock.applyPatch(data) ||
            Embed_1.EmbedMock.applyPatch(data) ||
            GeoPoint_1.GeoPointMock.applyPatch(data) ||
            Image_1.ImageMock.applyPatch(data) ||
            IntegrationField_1.IntegrationFieldMock.applyPatch(data) ||
            Separator_1.SeparatorMock.applyPatch(data);
        return patched === null || patched === void 0 ? void 0 : patched.result;
    },
};
