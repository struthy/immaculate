"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectMock = void 0;
const content_1 = require("@prismicio/types-internal/lib/content");
const diff_1 = require("@prismicio/types-internal/lib/customtypes/diff");
const DEFAULT_VALUE = "mock_option";
function random(def) {
    if (!def.config)
        return DEFAULT_VALUE;
    if (def.config.default_value && Math.random() < 0.5) {
        return def.config.default_value;
    }
    if (!def.config.options)
        return DEFAULT_VALUE;
    const index = Math.floor(Math.random() * def.config.options.length);
    return def.config.options[index] || DEFAULT_VALUE;
}
exports.SelectMock = {
    generate(def, config) {
        const value = (config === null || config === void 0 ? void 0 : config.value) || random(def);
        return {
            __TYPE__: content_1.FieldContentType,
            value,
            type: "Select",
        };
    },
    applyPatch(data) {
        var _a;
        if (data.diff.op === diff_1.DiffOperation.Removed)
            return { result: undefined };
        if (data.diff.value.type === "Select") {
            const patched = this.patch(data.diff, (0, content_1.isSelectContent)(data.content) ? data.content : undefined, ((_a = data.config) === null || _a === void 0 ? void 0 : _a.type) === "Select" ? data.config : undefined);
            return { result: patched };
        }
        return;
    },
    patch(diff, _content, config) {
        switch (diff.op) {
            case diff_1.DiffOperation.Removed:
                return;
            case diff_1.DiffOperation.Updated:
            case diff_1.DiffOperation.Added:
                return this.generate(diff.value, config);
        }
    },
};
