"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextMock = void 0;
const content_1 = require("@prismicio/types-internal/lib/content");
const diff_1 = require("@prismicio/types-internal/lib/customtypes/diff");
const utils_1 = require("../../utils");
function random(min, max) {
    const minConf = min ? { min } : {};
    const maxConf = max ? { max } : {};
    return (0, utils_1.slug)({ ...minConf, ...maxConf });
}
exports.TextMock = {
    generate(_def, config) {
        const value = (config === null || config === void 0 ? void 0 : config.value) || random(config === null || config === void 0 ? void 0 : config.minChar, config === null || config === void 0 ? void 0 : config.maxChar);
        return {
            __TYPE__: content_1.FieldContentType,
            value,
            type: "Text",
        };
    },
    applyPatch(data) {
        var _a;
        if (data.diff.op === diff_1.DiffOperation.Removed)
            return { result: undefined };
        if (data.diff.value.type === "Text") {
            const patched = this.patch(data.diff, (0, content_1.isTextContent)(data.content) ? data.content : undefined, ((_a = data.config) === null || _a === void 0 ? void 0 : _a.type) === "Text" ? data.config : undefined);
            return { result: patched };
        }
        return;
    },
    patch(diff, _content, config) {
        switch (diff.op) {
            case diff_1.DiffOperation.Removed:
                return;
            case diff_1.DiffOperation.Updated:
            case diff_1.DiffOperation.Added:
                return this.generate(diff.value, config);
        }
    },
};
