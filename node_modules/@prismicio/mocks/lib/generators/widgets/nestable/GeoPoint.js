"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeoPointMock = void 0;
const tslib_1 = require("tslib");
const content_1 = require("@prismicio/types-internal/lib/content");
const diff_1 = require("@prismicio/types-internal/lib/customtypes/diff");
const geopoint_json_1 = (0, tslib_1.__importDefault)(require("../../dataset/geopoint.json"));
function random() {
    const place = geopoint_json_1.default[Math.floor(Math.random() * geopoint_json_1.default.length)];
    if (!place)
        throw new Error("Something happened during GeoPoint generation.");
    return {
        latitude: place.points.latitude,
        longitude: place.points.longitude,
    };
}
exports.GeoPointMock = {
    generate(_def, config) {
        const value = (config === null || config === void 0 ? void 0 : config.value) || random();
        return {
            __TYPE__: content_1.GeoPointContentType,
            position: {
                lat: value.latitude,
                lng: value.longitude,
            },
        };
    },
    applyPatch(data) {
        var _a;
        if (data.diff.op === diff_1.DiffOperation.Removed)
            return { result: undefined };
        if (data.diff.value.type === "GeoPoint") {
            const patched = this.patch(data.diff, (0, content_1.isGeoPointContent)(data.content) ? data.content : undefined, ((_a = data.config) === null || _a === void 0 ? void 0 : _a.type) === "GeoPoint" ? data.config : undefined);
            return { result: patched };
        }
        return;
    },
    patch(diff, _content, config) {
        switch (diff.op) {
            case diff_1.DiffOperation.Removed:
                return;
            case diff_1.DiffOperation.Updated:
            case diff_1.DiffOperation.Added:
                return this.generate(diff.value, config);
        }
    },
};
