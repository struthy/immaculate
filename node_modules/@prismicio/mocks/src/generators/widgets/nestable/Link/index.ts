import {
	isLinkContent,
	LinkContent,
	LinkContentType,
} from "@prismicio/types-internal/lib/content"
import type { Link } from "@prismicio/types-internal/lib/customtypes"
import {
	DiffChange,
	DiffOperation,
} from "@prismicio/types-internal/lib/customtypes/diff"

import type { NestableMock, Patch } from "../../../Mock"
import type { MockConfig } from "../../../MockConfig"
import { DocumentLinkMock } from "./DocumentLink"
import { ExternalLinkConfig, ExternalLinkMock } from "./ExternalLink"
import { MediaLinkConfig, MediaLinkMock } from "./MediaLink"

export interface LinkMockConfig
	extends MockConfig<Link["type"], ExternalLinkConfig | MediaLinkConfig> {
	select?: "document" | "web" | "media"
}

export const LinkMock: NestableMock<Link, LinkContent, LinkMockConfig> = {
	generate(def: Link, config?: LinkMockConfig): LinkContent {
		const linkValue = (() => {
			switch (def.config?.select) {
				case "document":
					return DocumentLinkMock.generate(def)
				case "web":
					return ExternalLinkMock.generate(
						def,
						config?.value && (config.value as ExternalLinkConfig),
					)
				case "media":
					return MediaLinkMock.generate(
						def,
						config?.value && (config.value as MediaLinkConfig),
					)
				default:
					return ExternalLinkMock.generate(
						def,
						config?.value && (config.value as ExternalLinkConfig),
					)
			}
		})()

		return {
			__TYPE__: LinkContentType,
			value: linkValue,
		}
	},

	applyPatch(data: Patch):
		| {
				result: LinkContent | undefined
		  }
		| undefined {
		if (data.diff.op === DiffOperation.Removed) return { result: undefined }

		if (data.diff.value.type === "Link") {
			const patched = this.patch(
				data.diff,
				isLinkContent(data.content) ? data.content : undefined,
				data.config?.type === "Link" ? data.config : undefined,
			)
			return { result: patched }
		}
		return
	},

	patch(
		diff: DiffChange<Link, Link>,
		_content: LinkContent,
		config?: LinkMockConfig,
	): LinkContent | undefined {
		switch (diff.op) {
			case DiffOperation.Removed:
				return
			case DiffOperation.Added:
			case DiffOperation.Updated:
				return this.generate(diff.value, config)
		}
	},
}

export * from "./DocumentLink"
export * from "./ExternalLink"
export * from "./MediaLink"
