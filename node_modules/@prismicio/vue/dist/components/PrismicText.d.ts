import { RichTextField } from "@prismicio/client";
import { AllowedComponentProps, ComponentCustomProps, ComputedRef, ConcreteComponent, DefineComponent, PropType, Raw, VNode, VNodeProps } from "vue";
import { VueUseOptions } from "../types";
/**
 * Props for `<PrismicText />`.
 */
export type PrismicTextProps = {
    /**
     * The Prismic rich text or title field to render.
     */
    field: RichTextField | null | undefined;
    /**
     * Separator used to join each element.
     *
     * @defaultValue `" "` (a space)
     */
    separator?: string;
    /**
     * An HTML tag name, a component, or a functional component used to wrap the
     * output.
     *
     * @defaultValue `"div"`
     */
    wrapper?: string | ConcreteComponent | Raw<DefineComponent>;
    /**
     * The string value to be rendered when the field is empty. If a fallback is
     * not given, `""` (nothing) will be rendered.
     */
    fallback?: string;
};
/**
 * Options for {@link usePrismicText}.
 */
export type UsePrismicTextOptions = VueUseOptions<Omit<PrismicTextProps, "wrapper">>;
/**
 * Return type of {@link usePrismicText}.
 */
export type UsePrismicTextReturnType = {
    /**
     * Serialized rich text field as plain text.
     */
    text: ComputedRef<string>;
};
/**
 * A low level composable that returns a serialized rich text field as plain
 * text.
 *
 * @param props - {@link UsePrismicTextOptions}
 *
 * @returns - Serialized rich text field as plain text
 *   {@link UsePrismicTextReturnType}
 */
export declare const usePrismicText: (props: UsePrismicTextOptions) => UsePrismicTextReturnType;
/**
 * `<PrismicText />` implementation.
 *
 * @internal
 */
export declare const PrismicTextImpl: DefineComponent<{
    field: {
        type: PropType<RichTextField | null | undefined>;
        default: undefined;
        required: false;
    };
    separator: {
        type: PropType<string>;
        default: undefined;
        required: false;
    };
    wrapper: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
    fallback: {
        type: PropType<string>;
        default: undefined;
        required: false;
    };
}, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    field: {
        type: PropType<RichTextField | null | undefined>;
        default: undefined;
        required: false;
    };
    separator: {
        type: PropType<string>;
        default: undefined;
        required: false;
    };
    wrapper: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
    fallback: {
        type: PropType<string>;
        default: undefined;
        required: false;
    };
}>>, {
    wrapper: string | ConcreteComponent | Raw<DefineComponent>;
    field: RichTextField | null | undefined;
    separator: string;
    fallback: string;
}, {}>;
/**
 * Component to render a Prismic rich text field as plain text.
 *
 * @see Component props {@link PrismicTextProps}
 * @see Templating rich text and title fields {@link https://prismic.io/docs/technologies/vue-template-content#rich-text-and-titles}
 */
export declare const PrismicText: new () => {
    $props: AllowedComponentProps & ComponentCustomProps & VNodeProps & PrismicTextProps;
};
