import { Slice } from "@prismicio/client";
import { AllowedComponentProps, ComponentCustomProps, ConcreteComponent, DefineComponent, FunctionalComponent, PropType, Raw, VNodeProps, defineAsyncComponent } from "vue";
/**
 * Returns the type of a `SliceLike` type.
 *
 * @typeParam TSlice - The Slice from which the type will be extracted.
 */
type ExtractSliceType<TSlice extends SliceLike> = TSlice extends SliceLikeRestV2 ? TSlice["slice_type"] : TSlice extends SliceLikeGraphQL ? TSlice["type"] : never;
/**
 * The minimum required properties to represent a Prismic Slice from the Prismic
 * Rest API V2 for the `<SliceZone>` component.
 *
 * If using Prismic's Rest API V2, use the `Slice` export from
 * `@prismicio/client` for a full interface.
 *
 * @typeParam TSliceType - Type name of the Slice.
 */
export type SliceLikeRestV2<TSliceType extends string = string> = Pick<Slice<TSliceType>, "id" | "slice_type">;
/**
 * The minimum required properties to represent a Prismic Slice from the Prismic
 * GraphQL API for the `<SliceZone>` component.
 *
 * @typeParam TSliceType - Type name of the Slice.
 */
export type SliceLikeGraphQL<TSliceType extends string = string> = {
    type: Slice<TSliceType>["slice_type"];
};
/**
 * The minimum required properties to represent a Prismic Slice for the
 * `<SliceZone />` component.
 *
 * If using Prismic's Rest API V2, use the `Slice` export from
 * `@prismicio/client` for a full interface.
 *
 * @typeParam TSliceType - Type name of the Slice
 */
export type SliceLike<TSliceType extends string = string> = (SliceLikeRestV2<TSliceType> | SliceLikeGraphQL<TSliceType>) & {
    /**
     * If `true`, this Slice has been modified from its original value using a
     * mapper and `@prismicio/client`'s `mapSliceZone()`.
     *
     * @internal
     */
    __mapped?: true;
};
/**
 * A looser version of the `SliceZone` type from `@prismicio/client` using
 * `SliceLike`.
 *
 * If using Prismic's REST API, use the `SliceZone` export from
 * `@prismicio/client` for the full type.
 *
 * @typeParam TSlice - The type(s) of slices in the Slice Zone
 */
export type SliceZoneLike<TSlice extends SliceLike = SliceLike> = readonly TSlice[];
/**
 * Vue props for a component rendering content from a Prismic Slice using the
 * `<SliceZone />` component.
 *
 * @typeParam TSlice - The type(s) of slices in the Slice Zone
 * @typeParam TContext - Arbitrary data passed to `<SliceZone />` and made
 *   available to all Slice components
 */
export type SliceComponentProps<TSlice extends SliceLike = SliceLike, TContext = unknown> = {
    /**
     * Slice data for this component.
     */
    slice: TSlice;
    /**
     * The index of the Slice in the Slice Zone.
     */
    index: number;
    /**
     * All Slices from the Slice Zone to which the Slice belongs.
     */
    slices: SliceZoneLike<TSlice extends SliceLikeGraphQL ? SliceLikeGraphQL : SliceLikeRestV2>;
    /**
     * Arbitrary data passed to `<SliceZone />` and made available to all Slice
     * components.
     */
    context: TContext;
};
/**
 * Native Vue props for a component rendering content from a Prismic Slice using
 * the `<SliceZone />` component.
 *
 * @typeParam TSlice - The Slice type
 * @typeParam TContext - Arbitrary data passed to `<SliceZone />` and made
 *   available to all Slice components
 */
export type DefineComponentSliceComponentProps<TSlice extends SliceLike = any, TContext = unknown> = {
    slice: {
        type: PropType<SliceComponentProps<TSlice, TContext>["slice"]>;
        required: true;
    };
    index: {
        type: PropType<SliceComponentProps<TSlice, TContext>["index"]>;
        required: true;
    };
    slices: {
        type: PropType<SliceComponentProps<TSlice, TContext>["slices"]>;
        required: true;
    };
    context: {
        type: PropType<SliceComponentProps<TSlice, TContext>["context"]>;
        required: true;
    };
};
/**
 * Gets native Vue props for a component rendering content from a Prismic Slice
 * using the `<SliceZone />` component.
 *
 * Props are: `["slice", "index", "slices", "context"]`
 *
 * @example
 *
 * ```javascript
 * // Defining a new slice component
 * import { getSliceComponentProps } from "@prismicio/vue";
 *
 * export default {
 * 	props: getSliceComponentProps(),
 * };
 * ```
 *
 * @example
 *
 * ```javascript
 * // Defining a new slice component with visual hint
 * import { getSliceComponentProps } from "@prismicio/vue";
 *
 * export default {
 * 	props: getSliceComponentProps(["slice", "index", "slices", "context"]),
 * };
 * ```
 *
 * @typeParam TSlice - The Slice type
 * @typeParam TContext - Arbitrary data passed to `<SliceZone />` and made
 *   available to all Slice components
 * @param propsHint - An optional array of prop names used for the sole purpose
 *   of having a visual hint of which props are made available to the slice,
 *   this parameters doesn't have any effect
 *
 * @returns Props object to use with {@link defineComponent}
 */
export declare const getSliceComponentProps: <TSlice extends SliceLike<string> = any, TContext = unknown>(propsHint?: ["slice", "index", "slices", "context"]) => DefineComponentSliceComponentProps<TSlice, TContext>;
/**
 * A Vue component to be rendered for each instance of its Slice.
 *
 * @typeParam TSlice - The type(s) of slices in the Slice Zone
 * @typeParam TContext - Arbitrary data made available to all Slice components
 */
export type SliceComponentType<TSlice extends SliceLike = any, TContext = unknown> = DefineComponent<{}, {}, any> | ReturnType<typeof defineAsyncComponent> | DefineComponent<SliceComponentProps<TSlice, TContext>> | FunctionalComponent<SliceComponentProps<TSlice, TContext>>;
/**
 * This Slice component can be used as a reminder to provide a proper
 * implementation.
 *
 * This is also the default Vue component rendered when a component mapping
 * cannot be found in `<SliceZone />`.
 */
export declare const TODOSliceComponent: import("vue").ComponentOptions<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, any, any, any, any> | FunctionalComponent<any, {}, any, {}> | {
    new (...args: any[]): any;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} | FunctionalComponent<{
    slice: SliceLike;
}, {}, any, {}> | FunctionalComponent<SliceComponentProps<any, unknown>, {}, any, {}>;
/**
 * A record of Slice types mapped to Vue components. Each components will be
 * rendered for each instance of their Slice type.
 *
 * @typeParam TSlice - The type(s) of slices in the Slice Zone
 * @typeParam TContext - Arbitrary data made available to all Slice components
 */
export type SliceZoneComponents<TSlice extends SliceLike = SliceLike, TContext = unknown> = {
    [SliceType in ExtractSliceType<TSlice>]: SliceComponentType<Extract<TSlice, SliceLike<SliceType>>, TContext> | string;
};
/**
 * Gets an optimized record of Slice types mapped to Vue components. Each
 * components will be rendered for each instance of their Slice type.
 *
 * @remarks
 * This is essentially an helper function to ensure {@link markRaw} is correctly
 * applied on each components, improving performances.
 * @example
 *
 * ```javascript
 * // Defining a slice components
 * import { defineSliceZoneComponents } from "@prismicio/vue";
 *
 * export default {
 *   data() {
 *     components: defineSliceZoneComponents({
 *       foo: Foo,
 *       bar: defineAsyncComponent(
 *         () => new Promise((res) => res(Bar)),
 *       ),
 *       baz: "Baz",
 *     }),
 *   }
 * };
 * ```
 *
 * @typeParam TSlice - The type(s) of slices in the Slice Zone
 * @typeParam TContext - Arbitrary data made available to all Slice components
 *
 * @param components - {@link SliceZoneComponents}
 *
 * @returns A new optimized record of {@link SliceZoneComponents}
 */
export declare const defineSliceZoneComponents: <TSlice extends SliceLike<string> = any, TContext = unknown>(components: SliceZoneComponents<TSlice, TContext>) => SliceZoneComponents<TSlice, TContext>;
/**
 * Arguments for a `<SliceZone>` `resolver` function.
 */
export type SliceZoneResolverArgs<TSlice extends SliceLike = SliceLike> = {
    /**
     * The Slice to resolve to a Vue component..
     */
    slice: TSlice;
    /**
     * The name of the Slice.
     */
    sliceName: ExtractSliceType<TSlice>;
    /**
     * The index of the Slice in the Slice Zone.
     */
    i: number;
};
/**
 * A function that determines the rendered Vue component for each Slice in the
 * Slice Zone. If a nullish value is returned, the component will fallback to
 * the `components` or `defaultComponent` props to determine the rendered
 * component.
 *
 * @deprecated Use the `components` prop instead.
 *
 * @param args - Arguments for the resolver function.
 *
 * @returns The Vue component to render for a Slice.
 */
export type SliceZoneResolver<TSlice extends SliceLike = any, TContext = unknown> = (args: SliceZoneResolverArgs<TSlice>) => SliceComponentType<any, TContext> | string | undefined | null;
/**
 * Props for `<SliceZone />`.
 *
 * @typeParam TContext - Arbitrary data made available to all Slice components
 */
export type SliceZoneProps<TContext = unknown> = {
    /**
     * List of Slice data from the Slice Zone.
     */
    slices: SliceZoneLike;
    /**
     * A record mapping Slice types to Vue components.
     */
    components?: SliceZoneComponents;
    /**
     * A function that determines the rendered Vue component for each Slice in the
     * Slice Zone.
     *
     * @deprecated Use the `components` prop instead.
     *
     * @param args - Arguments for the resolver function.
     *
     * @returns The Vue component to render for a Slice.
     */
    resolver?: SliceZoneResolver<any, TContext>;
    /**
     * Arbitrary data made available to all Slice components.
     */
    context?: TContext;
    /**
     * A component or a functional component rendered if a component mapping from
     * the `components` prop cannot be found.
     *
     * @remarks
     * Components will be rendered using the {@link SliceComponentProps} interface.
     *
     * @defaultValue The Slice Zone default component provided to `@prismicio/vue` plugin if configured, otherwise `null` when `process.env.NODE_ENV === "production"` else {@link TODOSliceComponent}.
     */
    defaultComponent?: SliceComponentType<any, TContext>;
    /**
     * An HTML tag name, a component, or a functional component used to wrap the
     * output. The Slice Zone is not wrapped by default.
     */
    wrapper?: string | ConcreteComponent | Raw<DefineComponent>;
};
/**
 * `<SliceZone />` implementation.
 *
 * @internal
 */
export declare const SliceZoneImpl: DefineComponent<{
    slices: {
        type: PropType<SliceZoneLike<SliceLike<string> & Record<string, unknown>>>;
        required: true;
    };
    components: {
        type: PropType<SliceZoneComponents<SliceLike<string>, unknown>>;
        default: undefined;
        required: false;
    };
    resolver: {
        type: PropType<SliceZoneResolver<any, unknown>>;
        default: undefined;
        required: false;
    };
    context: {
        type: null;
        default: undefined;
        required: false;
    };
    defaultComponent: {
        type: PropType<SliceComponentType<any, unknown>>;
        default: undefined;
        required: false;
    };
    wrapper: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
}, (() => null) | (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[]), unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    slices: {
        type: PropType<SliceZoneLike<SliceLike<string> & Record<string, unknown>>>;
        required: true;
    };
    components: {
        type: PropType<SliceZoneComponents<SliceLike<string>, unknown>>;
        default: undefined;
        required: false;
    };
    resolver: {
        type: PropType<SliceZoneResolver<any, unknown>>;
        default: undefined;
        required: false;
    };
    context: {
        type: null;
        default: undefined;
        required: false;
    };
    defaultComponent: {
        type: PropType<SliceComponentType<any, unknown>>;
        default: undefined;
        required: false;
    };
    wrapper: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
}>>, {
    context: any;
    components: SliceZoneComponents<SliceLike<string>, unknown>;
    resolver: SliceZoneResolver<any, unknown>;
    defaultComponent: SliceComponentType<any, unknown>;
    wrapper: string | ConcreteComponent | Raw<DefineComponent>;
}, {}>;
/**
 * Component to render a Prismic Slice Zone.
 *
 * @see Component props {@link SliceZoneProps}
 * @see Templating Slice Zones {@link https://prismic.io/docs/technologies/vue-template-content#slices-and-groups}
 */
export declare const SliceZone: new () => {
    $props: AllowedComponentProps & ComponentCustomProps & VNodeProps & SliceZoneProps;
};
export {};
