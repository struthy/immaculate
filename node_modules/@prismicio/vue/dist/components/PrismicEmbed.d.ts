import { EmbedField } from "@prismicio/client";
import { AllowedComponentProps, ComponentCustomProps, ConcreteComponent, DefineComponent, PropType, Raw, VNodeProps } from "vue";
/**
 * Props for `<PrismicEmbed />`.
 */
export type PrismicEmbedProps = {
    /**
     * The Prismic embed field to render.
     */
    field: EmbedField;
    /**
     * An HTML tag name, a component, or a functional component used to wrap the
     * output.
     *
     * @defaultValue `"div"`
     */
    wrapper?: string | ConcreteComponent | Raw<DefineComponent>;
};
/**
 * `<PrismicEmbed />` implementation.
 *
 * @internal
 */
export declare const PrismicEmbedImpl: DefineComponent<{
    field: {
        type: PropType<EmbedField>;
        required: true;
    };
    wrapper: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
}, (() => null) | (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>), unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    field: {
        type: PropType<EmbedField>;
        required: true;
    };
    wrapper: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
}>>, {
    wrapper: string | ConcreteComponent | Raw<DefineComponent>;
}, {}>;
/**
 * Component to render a Prismic embed field.
 *
 * @see Component props {@link PrismicEmbedProps}
 * @see Templating embed fields {@link https://prismic.io/docs/technologies/vue-template-content#embeds}
 */
export declare const PrismicEmbed: new () => {
    $props: AllowedComponentProps & ComponentCustomProps & VNodeProps & PrismicEmbedProps;
};
