import { HTMLFunctionSerializer, HTMLMapSerializer, LinkResolverFunction, RichTextField } from "@prismicio/client";
import { AllowedComponentProps, ComponentCustomProps, ComputedRef, ConcreteComponent, DefineComponent, PropType, Raw, VNodeProps } from "vue";
import { VueUseOptions } from "../types";
/**
 * Props for `<PrismicRichText />`.
 */
export type PrismicRichTextProps = {
    /**
     * The Prismic rich text or title field to render.
     */
    field: RichTextField | null | undefined;
    /**
     * A link resolver function used to resolve link when not using the route
     * resolver parameter with `@prismicio/client`.
     *
     * @defaultValue The link resolver provided to `@prismicio/vue` plugin if configured.
     *
     * @see Link resolver documentation {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver#link-resolver}
     */
    linkResolver?: LinkResolverFunction;
    /**
     * An HTML serializer to customize the way rich text fields are rendered.
     *
     * @defaultValue The HTML serializer provided to `@prismicio/vue` plugin if configured.
     *
     * @see HTML serializer documentation {@link https://prismic.io/docs/core-concepts/html-serializer}
     */
    serializer?: HTMLFunctionSerializer | HTMLMapSerializer;
    /**
     * An HTML serializer to customize the way rich text fields are rendered.
     *
     * @deprecated Use `serializer` instead.
     *
     * @defaultValue The HTML serializer provided to `@prismicio/vue` plugin if configured.
     *
     * @see HTML serializer documentation {@link https://prismic.io/docs/core-concepts/html-serializer}
     */
    htmlSerializer?: HTMLFunctionSerializer | HTMLMapSerializer;
    /**
     * An HTML tag name, a component, or a functional component used to wrap the
     * output.
     *
     * @defaultValue `"div"`
     */
    wrapper?: string | ConcreteComponent | Raw<DefineComponent>;
    /**
     * The HTML value to be rendered when the field is empty. If a fallback is not
     * given, `""` (nothing) will be rendered.
     */
    fallback?: string;
};
/**
 * Options for {@link usePrismicRichText}.
 */
export type UsePrismicRichTextOptions = VueUseOptions<Omit<PrismicRichTextProps, "wrapper">>;
/**
 * Return type of {@link usePrismicRichText}.
 */
export type UsePrismicRichTextReturnType = {
    /**
     * Serialized rich text field as HTML.
     */
    html: ComputedRef<string>;
};
/**
 * A low level composable that returns a serialized rich text field as HTML.
 *
 * @param props - {@link UsePrismicRichTextOptions}
 *
 * @returns - Serialized rich text field as HTML
 *   {@link UsePrismicRichTextReturnType}
 */
export declare const usePrismicRichText: (props: UsePrismicRichTextOptions) => UsePrismicRichTextReturnType;
/**
 * `<PrismicRichText />` implementation.
 *
 * @internal
 */
export declare const PrismicRichTextImpl: DefineComponent<{
    field: {
        type: PropType<RichTextField | null | undefined>;
        default: undefined;
        required: false;
    };
    linkResolver: {
        type: PropType<LinkResolverFunction>;
        default: undefined;
        required: false;
    };
    serializer: {
        type: PropType<import("@prismicio/client").HTMLRichTextFunctionSerializer | import("@prismicio/client").HTMLRichTextMapSerializer>;
        default: undefined;
        required: false;
    };
    htmlSerializer: {
        type: PropType<import("@prismicio/client").HTMLRichTextFunctionSerializer | import("@prismicio/client").HTMLRichTextMapSerializer>;
        default: undefined;
        required: false;
    };
    wrapper: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
    fallback: {
        type: PropType<string>;
        default: undefined;
        required: false;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    field: {
        type: PropType<RichTextField | null | undefined>;
        default: undefined;
        required: false;
    };
    linkResolver: {
        type: PropType<LinkResolverFunction>;
        default: undefined;
        required: false;
    };
    serializer: {
        type: PropType<import("@prismicio/client").HTMLRichTextFunctionSerializer | import("@prismicio/client").HTMLRichTextMapSerializer>;
        default: undefined;
        required: false;
    };
    htmlSerializer: {
        type: PropType<import("@prismicio/client").HTMLRichTextFunctionSerializer | import("@prismicio/client").HTMLRichTextMapSerializer>;
        default: undefined;
        required: false;
    };
    wrapper: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
    fallback: {
        type: PropType<string>;
        default: undefined;
        required: false;
    };
}>>, {
    wrapper: string | ConcreteComponent | Raw<DefineComponent>;
    field: RichTextField | null | undefined;
    linkResolver: LinkResolverFunction;
    fallback: string;
    serializer: import("@prismicio/client").HTMLRichTextFunctionSerializer | import("@prismicio/client").HTMLRichTextMapSerializer;
    htmlSerializer: import("@prismicio/client").HTMLRichTextFunctionSerializer | import("@prismicio/client").HTMLRichTextMapSerializer;
}, {}>;
/**
 * Component to render a Prismic rich text field as HTML.
 *
 * @see Component props {@link PrismicRichTextProps}
 * @see Templating rich text and title fields {@link https://prismic.io/docs/technologies/vue-template-content#rich-text-and-titles}
 */
export declare const PrismicRichText: new () => {
    $props: AllowedComponentProps & ComponentCustomProps & VNodeProps & PrismicRichTextProps;
};
