import { LinkField, LinkResolverFunction, PrismicDocument } from "@prismicio/client";
import { AllowedComponentProps, ComponentCustomProps, ComputedRef, ConcreteComponent, DefineComponent, PropType, Raw, VNodeProps } from "vue";
import { VueUseOptions } from "../types";
/**
 * Props for `<PrismicLink />`.
 */
export type PrismicLinkProps = {
    /**
     * The Prismic link field or document to render.
     */
    field: LinkField | PrismicDocument;
    /**
     * A link resolver function used to resolve links when not using the route
     * resolver parameter with `@prismicio/client`.
     *
     * @defaultValue The link resolver provided to `@prismicio/vue` plugin if configured.
     *
     * @see Link resolver documentation {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver#link-resolver}
     */
    linkResolver?: LinkResolverFunction;
    /**
     * An explicit `target` attribute to apply to the rendered link.
     */
    target?: string | null;
    /**
     * An explicit `rel` attribute to apply to the rendered link.
     */
    rel?: string | null;
    /**
     * Value of the `rel` attribute to use on links rendered with
     * `target="_blank"`.
     *
     * @defaultValue The one provided to `@prismicio/vue` plugin if configured, `"noopener noreferrer"` otherwise.
     */
    blankTargetRelAttribute?: string | null;
    /**
     * An HTML tag name, a component, or a functional component used to render
     * internal links.
     *
     * @remarks
     * HTML tag names will be rendered using the anchor tag interface (`href`,
     * `target`, and `rel` attributes).
     * @remarks
     * Components will be rendered using Vue Router {@link RouterLink} interface
     * (`to` props).
     * @defaultValue The one provided to `@prismicio/vue` plugin if configured, {@link RouterLink} otherwise.
     */
    internalComponent?: string | ConcreteComponent | Raw<DefineComponent>;
    /**
     * An HTML tag name, a component, or a functional component used to render
     * external links.
     *
     * @remarks
     * HTML tag names will be rendered using the anchor tag interface (`href`,
     * `target`, and `rel` attributes).
     * @remarks
     * Components will be rendered using Vue Router {@link RouterLink} interface
     * (`to` props).
     * @defaultValue The one provided to `@prismicio/vue` plugin if configured, `"a"` otherwise.
     */
    externalComponent?: string | ConcreteComponent | Raw<DefineComponent>;
};
/**
 * Options for {@link usePrismicLink}.
 */
export type UsePrismicLinkOptions = VueUseOptions<PrismicLinkProps>;
/**
 * Return type of {@link usePrismicLink}.
 */
export type UsePrismicLinkReturnType = {
    /**
     * Suggested component to render for provided link field.
     */
    type: ComputedRef<string | ConcreteComponent | Raw<DefineComponent>>;
    /**
     * Resolved anchor `href` value.
     */
    href: ComputedRef<string>;
    /**
     * Resolved anchor `target` value.
     */
    target: ComputedRef<string | null>;
    /**
     * Resolved anchor `rel` value.
     */
    rel: ComputedRef<string | null>;
};
/**
 * A low level composable that returns resolved information about a Prismic link
 * field.
 *
 * @param props - {@link UsePrismicLinkOptions}
 *
 * @returns - Resolved link information {@link UsePrismicLinkReturnType}
 */
export declare const usePrismicLink: (props: UsePrismicLinkOptions) => UsePrismicLinkReturnType;
/**
 * `<PrismicLink />` implementation.
 *
 * @internal
 */
export declare const PrismicLinkImpl: DefineComponent<{
    field: {
        type: PropType<PrismicDocument<Record<string, any>, string, string> | LinkField>;
        required: true;
    };
    linkResolver: {
        type: PropType<LinkResolverFunction>;
        default: undefined;
        required: false;
    };
    target: {
        type: PropType<string | null>;
        default: undefined;
        required: false;
    };
    rel: {
        type: PropType<string | null>;
        default: undefined;
        required: false;
    };
    blankTargetRelAttribute: {
        type: PropType<string | null>;
        default: undefined;
        required: false;
    };
    internalComponent: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
    externalComponent: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
}, (() => null) | (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>), unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    field: {
        type: PropType<PrismicDocument<Record<string, any>, string, string> | LinkField>;
        required: true;
    };
    linkResolver: {
        type: PropType<LinkResolverFunction>;
        default: undefined;
        required: false;
    };
    target: {
        type: PropType<string | null>;
        default: undefined;
        required: false;
    };
    rel: {
        type: PropType<string | null>;
        default: undefined;
        required: false;
    };
    blankTargetRelAttribute: {
        type: PropType<string | null>;
        default: undefined;
        required: false;
    };
    internalComponent: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
    externalComponent: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
}>>, {
    target: string | null;
    linkResolver: LinkResolverFunction;
    rel: string | null;
    blankTargetRelAttribute: string | null;
    internalComponent: string | ConcreteComponent | Raw<DefineComponent>;
    externalComponent: string | ConcreteComponent | Raw<DefineComponent>;
}, {}>;
/**
 * Component to render a Prismic link field.
 *
 * @see Component props {@link PrismicLinkProps}
 * @see Templating link fields {@link https://prismic.io/docs/technologies/vue-template-content#links-and-content-relationships}
 */
export declare const PrismicLink: new () => {
    $props: AllowedComponentProps & ComponentCustomProps & VNodeProps & PrismicLinkProps;
};
