"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const vue = require("vue");
const __PRODUCTION__ = require("../lib/__PRODUCTION__.cjs");
const simplyResolveComponent = require("../lib/simplyResolveComponent.cjs");
const usePrismic = require("../usePrismic.cjs");
const getSliceComponentProps = (propsHint) => ({
  slice: {
    type: Object,
    required: true
  },
  index: {
    type: Number,
    required: true
  },
  slices: {
    type: Array,
    required: true
  },
  context: {
    type: null,
    required: true
  }
});
const TODOSliceComponent = __PRODUCTION__.__PRODUCTION__ ? () => null : /* @__PURE__ */ vue.defineComponent({
  name: "TODOSliceComponent",
  props: {
    slice: {
      type: Object,
      required: true
    }
  },
  setup(props) {
    const type = vue.computed(() => {
      return "slice_type" in props.slice ? props.slice.slice_type : props.slice.type;
    });
    vue.watchEffect(() => {
      console.warn(`[SliceZone] Could not find a component for Slice type "${type.value}"`, props.slice);
    });
    return () => {
      return vue.h("section", {
        "data-slice-zone-todo-component": "",
        "data-slice-type": type.value
      }, [`Could not find a component for Slice type "${type.value}"`]);
    };
  }
});
const defineSliceZoneComponents = (components) => {
  const result = {};
  let type;
  for (type in components) {
    const component = components[type];
    result[type] = typeof component === "string" ? component : vue.markRaw(component);
  }
  return result;
};
const SliceZoneImpl = /* @__PURE__ */ vue.defineComponent({
  name: "SliceZone",
  props: {
    slices: {
      type: Array,
      required: true
    },
    components: {
      type: Object,
      default: void 0,
      required: false
    },
    resolver: {
      type: Function,
      default: void 0,
      required: false
    },
    context: {
      type: null,
      default: void 0,
      required: false
    },
    defaultComponent: {
      type: Object,
      default: void 0,
      required: false
    },
    wrapper: {
      type: [String, Object, Function],
      default: void 0,
      required: false
    }
  },
  setup(props) {
    if (!props.slices) {
      return () => null;
    }
    if (!__PRODUCTION__.__PRODUCTION__) {
      if (props.resolver) {
        console.warn("The `resolver` prop is deprecated. Please replace it with a components map using the `components` prop.");
      }
    }
    const { options } = usePrismic.usePrismic();
    const renderedSlices = vue.computed(() => {
      return props.slices.map((slice, index) => {
        var _a;
        const type = "slice_type" in slice ? slice.slice_type : slice.type;
        let component = props.components && type in props.components ? props.components[type] : props.defaultComponent || ((_a = options.components) == null ? void 0 : _a.sliceZoneDefaultComponent);
        if (props.resolver) {
          const resolvedComponent = props.resolver({
            slice,
            sliceName: type,
            i: index
          });
          if (resolvedComponent) {
            component = resolvedComponent;
          }
        }
        const key = "id" in slice && typeof slice.id === "string" ? slice.id : `${index}-${JSON.stringify(slice)}`;
        if (component) {
          if (slice.__mapped) {
            const { __mapped, ...mappedProps } = slice;
            return vue.h(simplyResolveComponent.simplyResolveComponent(component), {
              key,
              ...mappedProps
            });
          }
          return vue.h(simplyResolveComponent.simplyResolveComponent(component), {
            key,
            slice,
            index,
            context: props.context,
            slices: props.slices
          });
        } else {
          return vue.h(simplyResolveComponent.simplyResolveComponent(TODOSliceComponent), { key, slice });
        }
      });
    });
    return () => {
      if (props.wrapper) {
        const parent = simplyResolveComponent.simplyResolveComponent(props.wrapper);
        if (typeof parent === "string") {
          return vue.h(parent, null, renderedSlices.value);
        } else {
          return vue.h(parent, null, { default: () => renderedSlices.value });
        }
      } else {
        return renderedSlices.value;
      }
    };
  }
});
const SliceZone = SliceZoneImpl;
exports.SliceZone = SliceZone;
exports.SliceZoneImpl = SliceZoneImpl;
exports.TODOSliceComponent = TODOSliceComponent;
exports.defineSliceZoneComponents = defineSliceZoneComponents;
exports.getSliceComponentProps = getSliceComponentProps;
//# sourceMappingURL=SliceZone.cjs.map
