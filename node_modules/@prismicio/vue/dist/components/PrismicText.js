import { isFilled, asText } from "@prismicio/client";
import { computed, unref, defineComponent, h } from "vue";
import { simplyResolveComponent } from "../lib/simplyResolveComponent.js";
const defaultWrapper = "div";
const usePrismicText = (props) => {
  const text = computed(() => {
    const field = unref(props.field);
    if (!isFilled.richText(field)) {
      return unref(props.fallback) ?? "";
    }
    return asText(unref(field), unref(props.separator));
  });
  return {
    text
  };
};
const PrismicTextImpl = /* @__PURE__ */ defineComponent({
  name: "PrismicText",
  props: {
    field: {
      type: Array,
      default: void 0,
      required: false
    },
    separator: {
      type: String,
      default: void 0,
      required: false
    },
    wrapper: {
      type: [String, Object, Function],
      default: void 0,
      required: false
    },
    fallback: {
      type: String,
      default: void 0,
      required: false
    }
  },
  setup(props) {
    const { text } = usePrismicText(props);
    return () => {
      const parent = simplyResolveComponent(props.wrapper || defaultWrapper);
      return h(parent, null, {
        default: () => text.value
      });
    };
  }
});
const PrismicText = PrismicTextImpl;
export {
  PrismicText,
  PrismicTextImpl,
  usePrismicText
};
//# sourceMappingURL=PrismicText.js.map
