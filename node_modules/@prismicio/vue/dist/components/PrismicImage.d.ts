import { ImageField, asImagePixelDensitySrcSet, asImageSrc, asImageWidthSrcSet } from "@prismicio/client";
import { AllowedComponentProps, ComponentCustomProps, ComputedRef, ConcreteComponent, DefineComponent, PropType, Raw, VNodeProps } from "vue";
import { VueUseOptions } from "../types";
/**
 * Props for `<PrismicImage />`.
 */
export type PrismicImageProps = {
    /**
     * The Prismic image field to render.
     */
    field: ImageField | ImageField<string>;
    /**
     * An HTML tag name, a component, or a functional component used to render
     * images.
     *
     * @remarks
     * HTML tag names and components will be rendered using the `img` tag
     * interface (`src`, `srcset`, and `alt` attribute). Components will also
     * receive an additional `copyright` props.
     * @defaultValue The one provided to `@prismicio/vue` plugin if configured, `"img"` otherwise.
     */
    imageComponent?: string | ConcreteComponent | Raw<DefineComponent>;
    /**
     * An object of Imgix URL API parameters.
     *
     * @see Imgix URL parameters reference: https://docs.imgix.com/apis/rendering
     */
    imgixParams?: Parameters<typeof asImageSrc>[1];
    /**
     * Adds an additional `srcset` attribute to the image following given widths.
     *
     * @remarks
     * A special value of `"thumbnails"` is accepted to automatically use image
     * widths coming from the API.
     * @remarks
     * A special value of `"defaults"` is accepted to automatically use image
     * widths coming from the plugin configuration.
     * @remarks
     * This prop is not compatible with the `pixelDensities` prop. When both are
     * used the `pixelDensities` prop will be ignored.
     */
    widths?: NonNullable<Parameters<typeof asImageWidthSrcSet>[1]>["widths"] | "thumbnails" | "defaults";
    /**
     * Adds an additional `srcset` attribute to the image following giving pixel
     * densities.
     *
     * @remarks
     * A special value of `"defaults"` is accepted to automatically use image
     * pixel densities coming from the plugin configuration.
     * @remarks
     * This prop is not compatible with the `widths` prop. When both are used, the
     * `pixelDensities` prop will be ignored.
     */
    pixelDensities?: NonNullable<Parameters<typeof asImagePixelDensitySrcSet>[1]>["pixelDensities"] | "defaults";
};
/**
 * Options for {@link usePrismicImage}.
 */
export type UsePrismicImageOptions = VueUseOptions<Omit<PrismicImageProps, "imageComponent">>;
/**
 * Return type of {@link usePrismicImage}.
 */
export type UsePrismicImageReturnType = {
    /**
     * Resolved image `src` value.
     */
    src: ComputedRef<string | null>;
    /**
     * Resolved image `srcset` value.
     */
    srcset: ComputedRef<string | null>;
    /**
     * Resolved image `alt` value.
     */
    alt: ComputedRef<string>;
    /**
     * Resolved image `copyright` value.
     */
    copyright: ComputedRef<string | null>;
};
/**
 * A low level composable that returns a resolved information about a Prismic
 * image field.
 *
 * @param props - {@link UsePrismicImageOptions}
 *
 * @returns - Resolved image information {@link UsePrismicImageReturnType}
 */
export declare const usePrismicImage: (props: UsePrismicImageOptions) => UsePrismicImageReturnType;
/**
 * `<PrismicImage />` implementation.
 *
 * @internal
 */
export declare const PrismicImageImpl: DefineComponent<{
    field: {
        type: PropType<ImageField | ImageField<string>>;
        required: true;
    };
    imageComponent: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
    imgixParams: {
        type: PropType<import("imgix-url-builder").ImgixURLParams | undefined>;
        default: undefined;
        required: false;
    };
    widths: {
        type: PropType<number[] | "thumbnails" | "defaults" | undefined>;
        default: undefined;
        required: false;
    };
    pixelDensities: {
        type: PropType<number[] | "defaults" | undefined>;
        default: undefined;
        required: false;
    };
}, (() => null) | (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>), unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    field: {
        type: PropType<ImageField | ImageField<string>>;
        required: true;
    };
    imageComponent: {
        type: PropType<string | ConcreteComponent | Raw<DefineComponent>>;
        default: undefined;
        required: false;
    };
    imgixParams: {
        type: PropType<import("imgix-url-builder").ImgixURLParams | undefined>;
        default: undefined;
        required: false;
    };
    widths: {
        type: PropType<number[] | "thumbnails" | "defaults" | undefined>;
        default: undefined;
        required: false;
    };
    pixelDensities: {
        type: PropType<number[] | "defaults" | undefined>;
        default: undefined;
        required: false;
    };
}>>, {
    widths: number[] | "thumbnails" | "defaults" | undefined;
    pixelDensities: number[] | "defaults" | undefined;
    imageComponent: string | ConcreteComponent | Raw<DefineComponent>;
    imgixParams: import("imgix-url-builder").ImgixURLParams | undefined;
}, {}>;
/**
 * Component to render a Prismic image field.
 *
 * @see Component props {@link PrismicImageProps}
 * @see Templating image fields {@link https://prismic.io/docs/technologies/vue-template-content#images}
 */
export declare const PrismicImage: new () => {
    $props: AllowedComponentProps & ComponentCustomProps & VNodeProps & PrismicImageProps;
};
