import { Client, ForbiddenError, ParsingError, PrismicError } from "@prismicio/client";
import { Ref } from "vue";
import { PrismicClientComposableState, VueUseParameters } from "./types";
type UnwrapPromise<T> = T extends Promise<infer U> ? U : T;
type ClientMethodLike = (...args: any[]) => Promise<any> | any;
type ClientMethods = typeof Client.prototype;
type ClientError = PrismicError<unknown> | ParsingError | ForbiddenError;
/**
 * @internal
 */
export type ClientMethodParameters<TMethodName extends keyof ClientMethods> = ClientMethods[TMethodName] extends ClientMethodLike ? VueUseParameters<Parameters<ClientMethods[TMethodName]>> : never;
/**
 * @internal
 */
export type ClientMethodReturnType<TMethodName extends keyof ClientMethods> = ClientMethods[TMethodName] extends ClientMethodLike ? ReturnType<ClientMethods[TMethodName]> : never;
/**
 * @internal
 */
export type ComposableOnlyParameters = {
    client?: Ref<Client> | Client;
};
/**
 * The return type of a `@prismicio/client` Vue composable.
 *
 * @typeParam TData - The expected format of the `data` property of the returned
 *   object
 */
export type ClientComposableReturnType<TData = unknown> = {
    /**
     * The current state of the composable's client method call.
     */
    state: Ref<PrismicClientComposableState>;
    /**
     * Data returned by the client.
     */
    data: Ref<TData | null>;
    /**
     * Error returned by the composable's client method call if in an errror
     * state.
     */
    error: Ref<ClientError | Error | null>;
    /**
     * Perform the composable's client method call again.
     */
    refresh: () => Promise<void>;
};
/**
 * A low level Vue composable that uses provided method name on plugin or
 * provided client with given arguments. The composable has its own internal
 * state manager to report async status, such as pending or error statuses.
 *
 * @typeParam TClientMethodName - A method name from `@prismicio/client`
 * @typeParam TClientMethodArguments - The method expected arguments
 * @typeParam TClientMethodReturnType - The method expected return type
 *
 * @param method - The `@prismicio/client` method name to use
 * @param args - The arguments to use with requested method
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @internal
 */
export declare const useStatefulPrismicClientMethod: <TClientMethodName extends keyof Client<any>, TClientMethodArguments extends ClientMethodParameters<TClientMethodName>, TClientMethodReturnType extends UnwrapPromise<ClientMethodReturnType<TClientMethodName>>>(methodName: TClientMethodName, args: TClientMethodArguments) => ClientComposableReturnType<TClientMethodReturnType>;
export {};
