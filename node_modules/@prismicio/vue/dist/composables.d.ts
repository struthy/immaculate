import { PrismicDocument, Query } from "@prismicio/client";
import { ClientComposableReturnType, ComposableOnlyParameters } from "./useStatefulPrismicClientMethod";
/**
 * A composable that queries content from the Prismic repository.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.get}
 */
export declare const usePrismicDocuments: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(params?: (Partial<import("@prismicio/client").BuildQueryURLArgs> & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries content from the Prismic repository and returns
 * only the first result, if any.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getFirst}
 */
export declare const useFirstPrismicDocument: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(params?: (Partial<import("@prismicio/client").BuildQueryURLArgs> & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument>;
/**
 * A composable that queries a document from the Prismic repository with a
 * specific ID.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param id - ID of the document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByID}
 */
export declare const usePrismicDocumentByID: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(id: string, params?: (Partial<import("@prismicio/client").BuildQueryURLArgs> & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument>;
/**
 * A composable that queries documents from the Prismic repository with specific
 * IDs.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param ids - A list of document IDs
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByIDs}
 */
export declare const usePrismicDocumentsByIDs: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(ids: string[], params?: (Partial<import("@prismicio/client").BuildQueryURLArgs> & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries all documents from the Prismic repository with
 * specific IDs.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param ids - A list of document IDs
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAllByIDs}
 */
export declare const useAllPrismicDocumentsByIDs: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(ids: string[], params?: (Partial<import("@prismicio/client").BuildQueryURLArgs> & {
    limit?: number | undefined;
} & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;
/**
 * A composable that queries a document from the Prismic repository with a
 * specific UID and Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param documentType - The API ID of the document's Custom Type
 * @param uid - UID of the document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByUID}
 */
export declare const usePrismicDocumentByUID: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(documentType: any, uid: string, params?: (Partial<import("@prismicio/client").BuildQueryURLArgs> & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument>;
/**
 * A composable that queries documents from the Prismic repository with specific
 * UIDs.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param documentType - The API ID of the document's Custom Type
 * @param uids - A list of document UIDs
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByIDs}
 */
export declare const usePrismicDocumentsByUIDs: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(documentType: any, uids: string[], params?: (Partial<import("@prismicio/client").BuildQueryURLArgs> & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries all documents from the Prismic repository with
 * specific UIDs.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param documentType - The API ID of the document's Custom Type
 * @param uids - A list of document UIDs
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAllByIDs}
 */
export declare const useAllPrismicDocumentsByUIDs: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(documentType: any, ids: string[], params?: (Partial<import("@prismicio/client").BuildQueryURLArgs> & {
    limit?: number | undefined;
} & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;
/**
 * A composable that queries a singleton document from the Prismic repository
 * for a specific Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param documentType - The API ID of the singleton Custom Type
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getSingle}
 */
export declare const useSinglePrismicDocument: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(documentType: any, params?: (Partial<import("@prismicio/client").BuildQueryURLArgs> & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument>;
/**
 * A composable that queries documents from the Prismic repository for a
 * specific Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param documentType - The API ID of the Custom Type
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByType}
 */
export declare const usePrismicDocumentsByType: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(documentType: any, params?: (Partial<import("@prismicio/client").BuildQueryURLArgs> & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries all documents from the Prismic repository for a
 * specific Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param documentType - The API ID of the Custom Type
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAllByType}
 */
export declare const useAllPrismicDocumentsByType: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(documentType: any, params?: (Partial<Omit<import("@prismicio/client").BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;
/**
 * A composable that queries documents from the Prismic repository with a
 * specific tag.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tag - The tag that must be included on a document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByTag}
 */
export declare const usePrismicDocumentsByTag: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(tag: string, params?: (Partial<import("@prismicio/client").BuildQueryURLArgs> & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries all documents from the Prismic repository with a
 * specific tag.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tag - The tag that must be included on a document
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAllByTag}
 */
export declare const useAllPrismicDocumentsByTag: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(tag: string, params?: (Partial<Omit<import("@prismicio/client").BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;
/**
 * A composable that queries documents from the Prismic repository with specific
 * tags. A document must be tagged with all of the queried tags to be included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByTags}
 */
export declare const usePrismicDocumentsByEveryTag: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(tags: string[], params?: (Partial<import("@prismicio/client").BuildQueryURLArgs> & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries all documents from the Prismic repository with
 * specific tags. A document must be tagged with all of the queried tags to be
 * included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAllByTags}
 */
export declare const useAllPrismicDocumentsByEveryTag: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(tags: string[], params?: (Partial<Omit<import("@prismicio/client").BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;
/**
 * A composable that queries documents from the Prismic repository with specific
 * tags. A document must be tagged with at least one of the queried tags to be
 * included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getByTags}
 */
export declare const usePrismicDocumentsBySomeTags: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(tags: string[], params?: (Partial<import("@prismicio/client").BuildQueryURLArgs> & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<Query<TDocument>>;
/**
 * A composable that queries all documents from the Prismic repository with
 * specific tags. A document must be tagged with at least one of the queried
 * tags to be included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAllByTags}
 */
export declare const useAllPrismicDocumentsBySomeTags: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(tags: string[], params?: (Partial<Omit<import("@prismicio/client").BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;
/**
 * **IMPORTANT**: Avoid using `dangerouslyUseAllPrismicDocuments` as it may be
 * slower and require more resources than other composables. Prefer using other
 * composables that filter by predicates such as
 * `useAllPrismicDocumentsByType`.
 *
 * A composable that queries content from the Prismic repository and returns all
 * matching content. If no predicates are provided, all documents will be
 * fetched.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientComposableReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link Client.getAll}
 */
export declare const dangerouslyUseAllPrismicDocuments: <TDocument extends PrismicDocument<Record<string, any>, string, string>>(params?: (Partial<Omit<import("@prismicio/client").BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    fetchOptions?: import("@prismicio/client").RequestInitLike | undefined;
    signal?: any;
} & ComposableOnlyParameters) | undefined) => ClientComposableReturnType<TDocument[]>;
