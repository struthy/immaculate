import { ref, shallowRef, isRef, watch, unref } from "vue";
import { usePrismic } from "./usePrismic.js";
const isParams = (value) => {
  return typeof value === "object" && value !== null && !Array.isArray(value);
};
const useStatefulPrismicClientMethod = (methodName, args) => {
  const { client } = usePrismic();
  const state = ref(
    "idle"
    /* PrismicClientComposableState.Idle */
  );
  const data = shallowRef(null);
  const error = ref(null);
  const refresh = async () => {
    const lastArg = unref(args[args.length - 1]);
    const { client: explicitClient, ...params } = isParams(lastArg) ? lastArg : {};
    const argsWithoutParams = isParams(lastArg) ? args.slice(0, -1) : args;
    state.value = "pending";
    data.value = null;
    error.value = null;
    try {
      data.value = await (unref(explicitClient) || client)[methodName](...argsWithoutParams.map((arg) => unref(arg)), params);
      state.value = "success";
    } catch (err) {
      state.value = "error";
      error.value = err;
    }
  };
  const refArgs = args.filter((arg) => isRef(arg));
  if (refArgs.length) {
    watch(refArgs, refresh, { deep: true });
  }
  refresh();
  return { state, data, error, refresh };
};
export {
  useStatefulPrismicClientMethod
};
//# sourceMappingURL=useStatefulPrismicClientMethod.js.map
