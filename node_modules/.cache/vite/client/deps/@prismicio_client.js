import {
  __export
} from "./chunk-UV5CTPV7.js";

// node_modules/@prismicio/client/dist/types/value/richText.js
var RichTextNodeType = {
  heading1: "heading1",
  heading2: "heading2",
  heading3: "heading3",
  heading4: "heading4",
  heading5: "heading5",
  heading6: "heading6",
  paragraph: "paragraph",
  preformatted: "preformatted",
  strong: "strong",
  em: "em",
  listItem: "list-item",
  oListItem: "o-list-item",
  list: "group-list-item",
  oList: "group-o-list-item",
  image: "image",
  embed: "embed",
  hyperlink: "hyperlink",
  label: "label",
  span: "span"
};

// node_modules/@prismicio/client/dist/helpers/mapSliceZone.js
function mapSliceZone(sliceZone2, mappers, context) {
  return Promise.all(sliceZone2.map(async (slice, index, slices) => {
    const isRestSliceType = "slice_type" in slice;
    const sliceType = isRestSliceType ? slice.slice_type : slice.type;
    const mapper = mappers[sliceType];
    if (!mapper) {
      return slice;
    }
    const mapperArgs = { slice, slices, index, context };
    let result = await mapper(
      // @ts-expect-error - I don't know how to fix this type
      mapperArgs
    );
    if (
      // `mapper.length < 1` ensures the given
      // function is something of the form:
      // `() => import(...)`
      mapper.length < 1 && (typeof result === "function" || typeof result === "object" && "default" in result)
    ) {
      result = "default" in result ? result.default : result;
      result = await result(mapperArgs);
    }
    if (isRestSliceType) {
      return {
        __mapped: true,
        id: slice.id,
        slice_type: sliceType,
        ...result
      };
    } else {
      return {
        __mapped: true,
        type: sliceType,
        ...result
      };
    }
  }));
}

// node_modules/@prismicio/client/dist/filter.js
var formatValue = (value) => {
  if (Array.isArray(value)) {
    return `[${value.map(formatValue).join(", ")}]`;
  }
  if (typeof value === "string") {
    return `"${value}"`;
  }
  if (value instanceof Date) {
    return `${value.getTime()}`;
  }
  return `${value}`;
};
var pathWithArgsFilter = (name) => {
  const fn = (path, ...args) => {
    const formattedArgs = args.map(formatValue).join(", ");
    const joiner = path && args.length ? ", " : "";
    return `[${name}(${path}${joiner}${formattedArgs})]`;
  };
  return fn;
};
var pathFilter = (name) => {
  const filterFn = pathWithArgsFilter(name);
  const fn = (path) => {
    return filterFn(path);
  };
  return fn;
};
var argsFilter = (name) => {
  const filterFn = pathWithArgsFilter(name);
  const fn = (...args) => {
    return filterFn("", ...args);
  };
  return fn;
};
var filter = {
  /**
   * The `at` filter checks that the path matches the described value exactly.
   * It takes a single value for a field or an array (only for tags).
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#at}
   */
  at: pathWithArgsFilter("at"),
  /**
   * The `not` filter checks that the path doesn't match the provided value
   * exactly. It takes a single value for a field or an array (only for tags).
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#not}
   */
  not: pathWithArgsFilter("not"),
  /**
   * The `any` filter takes an array of values. It works exactly the same way as
   * the `at` operator, but checks whether the fragment matches any of the
   * values in the array.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#any}
   */
  any: pathWithArgsFilter("any"),
  /**
   * The `in` filter is used specifically to retrieve an array of documents by
   * their IDs or UIDs. This filter is much more efficient at this than the any
   * filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#in}
   */
  in: pathWithArgsFilter("in"),
  /**
   * The `fulltext` filter provides two capabilities:
   *
   * 1. Checking if a certain string is anywhere inside a document (this is what
   *    you should use to make your project's search engine feature)
   * 2. Checking if the string is contained inside a specific custom typeâ€™s Rich
   *    Text or Key Text fragment.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#fulltext}
   */
  fulltext: pathWithArgsFilter("fulltext"),
  /**
   * The `has` filter checks whether a fragment has a value. It will return all
   * the documents of the specified type that contain a value for the specified
   * field.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#has}
   */
  has: pathFilter("has"),
  /**
   * The `missing` filter checks if a fragment doesn't have a value. It will
   * return all the documents of the specified type that do not contain a value
   * for the specified field.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#missing}
   */
  missing: pathFilter("missing"),
  /**
   * The `similar` filter takes the ID of a document, and returns a list of
   * documents with similar content. This allows you to build an automated
   * content discovery feature (for example, a "Related posts" section).
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#similar}
   */
  similar: argsFilter("similar"),
  /**
   * The `geopoint.near` filter checks that the value in the path is within the
   * radius of the given coordinates.
   *
   * This filter will only work for a geopoint field.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#geopointnear}
   */
  geopointNear: pathWithArgsFilter("geopoint.near"),
  /**
   * The `number.lt` filter checks that the value in the number field is less
   * than the value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#numberlessthan}
   */
  numberLessThan: pathWithArgsFilter("number.lt"),
  /**
   * The `number.gt` filter checks that the value in the number field is greater
   * than the value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#numbergreaterthan}
   */
  numberGreaterThan: pathWithArgsFilter("number.gt"),
  /**
   * The `number.inRange` filter checks that the value in the path is within the
   * two values passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#numberinrange}
   */
  numberInRange: pathWithArgsFilter("number.inRange"),
  /**
   * The `date.after` filter checks that the value in the path is after the date
   * value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateAfter: pathWithArgsFilter("date.after"),
  /**
   * The `date.before` filter checks that the value in the path is before the
   * date value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateBefore: pathWithArgsFilter("date.before"),
  /**
   * The `date.between` filter checks that the value in the path is within the
   * date values passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateBetween: pathWithArgsFilter("date.between"),
  /**
   * The `date.day-of-month` filter checks that the value in the path is equal
   * to the day of the month passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateDayOfMonth: pathWithArgsFilter("date.day-of-month"),
  /**
   * The `date.day-of-month-after` filter checks that the value in the path is
   * after the day of the month passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateDayOfMonthAfter: pathWithArgsFilter("date.day-of-month-after"),
  /**
   * The `date.day-of-month-before` filter checks that the value in the path is
   * before the day of the month passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateDayOfMonthBefore: pathWithArgsFilter("date.day-of-month-before"),
  /**
   * The `date.day-of-week` filter checks that the value in the path is equal to
   * the day of the week passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateDayOfWeek: pathWithArgsFilter("date.day-of-week"),
  /**
   * The `date.day-of-week-after` filter checks that the value in the path is
   * after the day of the week passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateDayOfWeekAfter: pathWithArgsFilter("date.day-of-week-after"),
  /**
   * The date.day-of-week-before filter checks that the value in the path is
   * before the day of the week passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateDayOfWeekBefore: pathWithArgsFilter("date.day-of-week-before"),
  /**
   * The `date.month` filter checks that the value in the path occurs in the
   * month value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateMonth: pathWithArgsFilter("date.month"),
  /**
   * The `date.month-after` filter checks that the value in the path occurs in
   * any month after the value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateMonthAfter: pathWithArgsFilter("date.month-after"),
  /**
   * The `date.month-before` filter checks that the value in the path occurs in
   * any month before the value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateMonthBefore: pathWithArgsFilter("date.month-before"),
  /**
   * The `date.year` filter checks that the value in the path occurs in the year
   * value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateYear: pathWithArgsFilter("date.year"),
  /**
   * The `date.hour` filter checks that the value in the path occurs within the
   * hour value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateHour: pathWithArgsFilter("date.hour"),
  /**
   * The `date.hour-after` filter checks that the value in the path occurs after
   * the hour value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateHourAfter: pathWithArgsFilter("date.hour-after"),
  /**
   * The `date.hour-before` filter checks that the value in the path occurs
   * before the hour value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */
  dateHourBefore: pathWithArgsFilter("date.hour-before")
};

// node_modules/@prismicio/client/dist/lib/castArray.js
var castArray = (a) => {
  return Array.isArray(a) ? a : [a];
};

// node_modules/@prismicio/client/dist/lib/appendFilters.js
var appendFilters = (objWithFilters = {}, filters) => {
  return {
    ...objWithFilters,
    filters: [...objWithFilters.filters || [], ...castArray(filters)]
  };
};

// node_modules/@prismicio/client/dist/lib/castThunk.js
var castThunk = (a) => {
  return typeof a === "function" ? a : () => a;
};

// node_modules/@prismicio/client/dist/package.json.js
var version = "7.6.0";

// node_modules/@prismicio/client/dist/lib/devMsg.js
var devMsg = (slug) => {
  return `https://prismic.dev/msg/client/v${version}/${slug}`;
};

// node_modules/@prismicio/client/dist/lib/everyTagFilter.js
var everyTagFilter = (tags) => {
  return filter.at("document.tags", castArray(tags));
};

// node_modules/@prismicio/client/dist/errors/PrismicError.js
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var PrismicError = class extends Error {
  constructor(message = "An invalid API response was returned", url, response) {
    super(message);
    __publicField(this, "url");
    __publicField(this, "response");
    this.url = url;
    this.response = response;
  }
};

// node_modules/@prismicio/client/dist/lib/findRef.js
var findRef = (refs, filter2) => {
  const ref = refs.find((ref2) => filter2(ref2));
  if (!ref) {
    throw new PrismicError("Ref could not be found.", void 0, void 0);
  }
  return ref;
};

// node_modules/@prismicio/client/dist/lib/findMasterRef.js
var findMasterRef = (refs) => {
  return findRef(refs, (ref) => ref.isMasterRef);
};

// node_modules/@prismicio/client/dist/lib/findRefByID.js
var findRefByID = (refs, id) => {
  return findRef(refs, (ref) => ref.id === id);
};

// node_modules/@prismicio/client/dist/lib/findRefByLabel.js
var findRefByLabel = (refs, label) => {
  return findRef(refs, (ref) => ref.label === label);
};

// node_modules/@prismicio/client/dist/cookie.js
var cookie_exports = {};
__export(cookie_exports, {
  preview: () => preview
});
var preview = "io.prismic.preview";

// node_modules/@prismicio/client/dist/lib/getPreviewCookie.js
var readValue = (value) => {
  return value.replace(/%3B/g, ";");
};
var getPreviewCookie = (cookieJar) => {
  const cookies = cookieJar.split("; ");
  let value;
  for (const cookie of cookies) {
    const parts = cookie.split("=");
    const name = readValue(parts[0]).replace(/%3D/g, "=");
    if (name === preview) {
      value = readValue(parts.slice(1).join("="));
      break;
    }
  }
  return value;
};

// node_modules/@prismicio/client/dist/lib/minifyGraphQLQuery.js
var minifyGraphQLQuery = (query) => {
  return query.replace(/(\n| )*( |{|})(\n| )*/gm, (_chars, _spaces, brackets) => brackets);
};

// node_modules/@prismicio/client/dist/lib/someTagsFilter.js
var someTagsFilter = (tags) => {
  return filter.any("document.tags", castArray(tags));
};

// node_modules/@prismicio/client/dist/lib/typeFilter.js
var typeFilter = (documentType) => {
  return filter.at("document.type", documentType);
};

// node_modules/@prismicio/client/dist/errors/ForbiddenError.js
var ForbiddenError = class extends PrismicError {
};

// node_modules/@prismicio/client/dist/errors/NotFoundError.js
var NotFoundError = class extends PrismicError {
};

// node_modules/@prismicio/client/dist/errors/ParsingError.js
var ParsingError = class extends PrismicError {
};

// node_modules/@prismicio/client/dist/errors/PreviewTokenExpired.js
var PreviewTokenExpiredError = class extends ForbiddenError {
};

// node_modules/@prismicio/client/dist/errors/RefExpiredError.js
var RefExpiredError = class extends ForbiddenError {
};

// node_modules/@prismicio/client/dist/errors/RefNotFoundError.js
var RefNotFoundError = class extends ForbiddenError {
};

// node_modules/@prismicio/client/dist/errors/RepositoryNotFoundError.js
var RepositoryNotFoundError = class extends NotFoundError {
};

// node_modules/@prismicio/client/dist/types/value/link.js
var LinkType = {
  Any: "Any",
  Document: "Document",
  Media: "Media",
  Web: "Web"
};

// node_modules/@prismicio/client/dist/helpers/documentToLinkField.js
var documentToLinkField = (prismicDocument) => {
  var _a;
  return {
    link_type: LinkType.Document,
    id: prismicDocument.id,
    uid: prismicDocument.uid || void 0,
    type: prismicDocument.type,
    tags: prismicDocument.tags,
    lang: prismicDocument.lang,
    url: prismicDocument.url == null ? void 0 : prismicDocument.url,
    slug: (_a = prismicDocument.slugs) == null ? void 0 : _a[0],
    // The REST API does not include a `data` property if the data
    // object is empty.
    //
    // A presence check for `prismicDocument.data` is done to
    // support partial documents. While `documentToLinkField` is
    // not typed to accept partial documents, passing a partial
    // document can happen in untyped projects.
    ...prismicDocument.data && Object.keys(prismicDocument.data).length > 0 ? { data: prismicDocument.data } : {}
  };
};

// node_modules/@prismicio/client/dist/helpers/asLink.js
var asLink = (linkFieldOrDocument, ...configObjectOrTuple) => {
  if (!linkFieldOrDocument) {
    return null;
  }
  const linkField = (
    // prettier-ignore
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore - Bug in TypeScript 4.9: https://github.com/microsoft/TypeScript/issues/51501
    // TODO: Remove the `prettier-ignore` comment when this bug is fixed.
    "link_type" in linkFieldOrDocument ? linkFieldOrDocument : documentToLinkField(linkFieldOrDocument)
  );
  const [configObjectOrLinkResolver] = configObjectOrTuple;
  let config;
  if (typeof configObjectOrLinkResolver === "function" || configObjectOrLinkResolver == null) {
    config = {
      linkResolver: configObjectOrLinkResolver
    };
  } else {
    config = { ...configObjectOrLinkResolver };
  }
  switch (linkField.link_type) {
    case LinkType.Media:
    case LinkType.Web:
      return "url" in linkField ? linkField.url : null;
    case LinkType.Document: {
      if ("id" in linkField && config.linkResolver) {
        const resolvedURL = config.linkResolver(linkField);
        if (resolvedURL != null) {
          return resolvedURL;
        }
      }
      if ("url" in linkField && linkField.url) {
        return linkField.url;
      }
      return null;
    }
    case LinkType.Any:
    default:
      return null;
  }
};

// node_modules/@prismicio/client/dist/buildQueryURL.js
var RENAMED_PARAMS = {
  accessToken: "access_token"
};
var castOrderingToString = (ordering) => {
  if (typeof ordering === "string") {
    if (true) {
      const [field, direction] = ordering.split(" ");
      const objectForm = direction === "desc" ? `{ field: "${field}", direction: "desc" }` : `{ field: "${field}" }`;
      console.warn(`[@prismicio/client] A string value was provided to the \`orderings\` query parameter. Strings are deprecated. Please convert it to the object form: ${objectForm}. For more details, see ${devMsg("orderings-must-be-an-array-of-objects")}`);
    }
    return ordering;
  }
  return ordering.direction === "desc" ? `${ordering.field} desc` : ordering.field;
};
var buildQueryURL = (endpoint, args) => {
  const { filters, predicates, ...params } = args;
  const url = new URL(`documents/search`, `${endpoint}/`);
  if (filters) {
    if (!Array.isArray(filters)) {
      console.warn(`[@prismicio/client] A non-array value was provided to the \`filters\` query parameter (\`${filters}\`). Non-array values are deprecated. Please convert it to an array. For more details, see ${devMsg("filters-must-be-an-array")}`);
    }
    for (const filter2 of castArray(filters)) {
      url.searchParams.append("q", `[${filter2}]`);
    }
  }
  if (predicates) {
    for (const predicate2 of castArray(predicates)) {
      url.searchParams.append("q", `[${predicate2}]`);
    }
  }
  for (const k in params) {
    const name = RENAMED_PARAMS[k] || k;
    let value = params[k];
    if (name === "orderings") {
      const scopedValue = params[name];
      if (scopedValue != null) {
        if (typeof scopedValue === "string") {
          console.warn(`[@prismicio/client] A string value was provided to the \`orderings\` query parameter. Strings are deprecated. Please convert it to an array of objects. For more details, see ${devMsg("orderings-must-be-an-array-of-objects")}`);
        }
        const v = castArray(scopedValue).map((ordering) => castOrderingToString(ordering)).join(",");
        value = `[${v}]`;
      }
    } else if (name === "routes") {
      if (typeof params[name] === "object") {
        value = JSON.stringify(castArray(params[name]));
      }
    }
    if (value != null) {
      url.searchParams.set(name, castArray(value).join(","));
    }
  }
  return url.toString();
};

// node_modules/@prismicio/client/dist/isRepositoryName.js
var isRepositoryName = (input) => {
  return /^[a-zA-Z0-9][-a-zA-Z0-9]{2,}[a-zA-Z0-9]$/.test(input);
};

// node_modules/@prismicio/client/dist/getRepositoryEndpoint.js
var getRepositoryEndpoint = (repositoryName) => {
  if (isRepositoryName(repositoryName)) {
    return `https://${repositoryName}.cdn.prismic.io/api/v2`;
  } else {
    throw new PrismicError(`An invalid Prismic repository name was given: ${repositoryName}`, void 0, void 0);
  }
};

// node_modules/@prismicio/client/dist/getRepositoryName.js
var getRepositoryName = (repositoryEndpoint) => {
  try {
    return new URL(repositoryEndpoint).hostname.split(".")[0];
  } catch {
    throw new PrismicError(`An invalid Prismic Rest API V2 endpoint was provided: ${repositoryEndpoint}`, void 0, void 0);
  }
};

// node_modules/@prismicio/client/dist/isRepositoryEndpoint.js
var isRepositoryEndpoint = (input) => {
  try {
    new URL(input);
    return true;
  } catch {
    return false;
  }
};

// node_modules/@prismicio/client/dist/createClient.js
var __defProp2 = Object.defineProperty;
var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField2 = (obj, key, value) => {
  __defNormalProp2(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var MAX_PAGE_SIZE = 100;
var REPOSITORY_CACHE_TTL = 5e3;
var GET_ALL_QUERY_DELAY = 500;
var DEFUALT_RETRY_AFTER_MS = 1e3;
var RefStateMode;
(function(RefStateMode2) {
  RefStateMode2["Master"] = "Master";
  RefStateMode2["ReleaseID"] = "ReleaseID";
  RefStateMode2["ReleaseLabel"] = "ReleaseLabel";
  RefStateMode2["Manual"] = "Manual";
})(RefStateMode || (RefStateMode = {}));
var createClient = (repositoryNameOrEndpoint, options) => new Client(repositoryNameOrEndpoint, options);
var Client = class {
  /**
   * Creates a Prismic client that can be used to query a repository.
   *
   * If used in an environment where a global `fetch` function is unavailable,
   * such as Node.js, the `fetch` option must be provided as part of the
   * `options` parameter.
   *
   * @param repositoryNameOrEndpoint - The Prismic repository name or full Rest
   *   API V2 endpoint for the repository.
   * @param options - Configuration that determines how content will be queried
   *   from the Prismic repository.
   *
   * @returns A client that can query content from the repository.
   */
  constructor(repositoryNameOrEndpoint, options = {}) {
    __publicField2(this, "endpoint");
    __publicField2(this, "accessToken");
    __publicField2(this, "routes");
    __publicField2(this, "brokenRoute");
    __publicField2(this, "fetchFn");
    __publicField2(this, "fetchOptions");
    __publicField2(this, "defaultParams");
    __publicField2(this, "refState", {
      mode: RefStateMode.Master,
      autoPreviewsEnabled: true
    });
    __publicField2(this, "cachedRepository");
    __publicField2(this, "cachedRepositoryExpiration", 0);
    __publicField2(this, "fetchJobs", {});
    if (isRepositoryEndpoint(repositoryNameOrEndpoint)) {
      if (true) {
        if (/\.prismic\.io\/(?!api\/v2\/?)/i.test(repositoryNameOrEndpoint)) {
          throw new PrismicError("@prismicio/client only supports Prismic Rest API V2. Please provide only the repository name to the first createClient() parameter or use the getRepositoryEndpoint() helper to generate a valid Rest API V2 endpoint URL.", void 0, void 0);
        }
        const hostname = new URL(repositoryNameOrEndpoint).hostname.toLowerCase();
        if (hostname.endsWith(".prismic.io") && !hostname.endsWith(".cdn.prismic.io")) {
          const repositoryName = getRepositoryName(repositoryNameOrEndpoint);
          const dotCDNEndpoint = getRepositoryEndpoint(repositoryName);
          console.warn(`[@prismicio/client] A non-.cdn endpoint was provided to create a client with (\`${repositoryNameOrEndpoint}\`). Non-.cdn endpoints can have unexpected side-effects and cause performance issues when querying Prismic. Please convert it to the \`.cdn\` alternative (\`${dotCDNEndpoint}\`) or use the repository name directly instead (\`${repositoryName}\`). For more details, see ${devMsg("endpoint-must-use-cdn")}`);
        }
      }
      this.endpoint = repositoryNameOrEndpoint;
    } else {
      this.endpoint = getRepositoryEndpoint(repositoryNameOrEndpoint);
    }
    this.accessToken = options.accessToken;
    this.routes = options.routes;
    this.brokenRoute = options.brokenRoute;
    this.fetchOptions = options.fetchOptions;
    this.defaultParams = options.defaultParams;
    if (options.ref) {
      this.queryContentFromRef(options.ref);
    }
    if (typeof options.fetch === "function") {
      this.fetchFn = options.fetch;
    } else if (typeof globalThis.fetch === "function") {
      this.fetchFn = globalThis.fetch;
    } else {
      throw new PrismicError("A valid fetch implementation was not provided. In environments where fetch is not available (including Node.js), a fetch implementation must be provided via a polyfill or the `fetch` option.", void 0, void 0);
    }
    if (this.fetchFn === globalThis.fetch) {
      this.fetchFn = this.fetchFn.bind(globalThis);
    }
    this.graphQLFetch = this.graphQLFetch.bind(this);
  }
  /**
   * Enables the client to automatically query content from a preview session if
   * one is active in browser environments. This is enabled by default in the
   * browser.
   *
   * For server environments, use `enableAutoPreviewsFromReq`.
   *
   * @example
   *
   * ```ts
   * client.enableAutoPreviews();
   * ```
   *
   * @see enableAutoPreviewsFromReq
   */
  enableAutoPreviews() {
    this.refState.autoPreviewsEnabled = true;
  }
  /**
   * Enables the client to automatically query content from a preview session if
   * one is active in server environments. This is disabled by default on the
   * server.
   *
   * For browser environments, use `enableAutoPreviews`.
   *
   * @example
   *
   * ```ts
   * // In an express app
   * app.get("/", function (req, res) {
   * 	client.enableAutoPreviewsFromReq(req);
   * });
   * ```
   *
   * @param req - An HTTP server request object containing the request's
   *   cookies.
   */
  enableAutoPreviewsFromReq(req) {
    this.refState.httpRequest = req;
    this.refState.autoPreviewsEnabled = true;
  }
  /**
   * Disables the client from automatically querying content from a preview
   * session if one is active.
   *
   * Automatic preview content querying is enabled by default unless this method
   * is called.
   *
   * @example
   *
   * ```ts
   * client.disableAutoPreviews();
   * ```
   */
  disableAutoPreviews() {
    this.refState.autoPreviewsEnabled = false;
  }
  /**
   * Queries content from the Prismic repository.
   *
   * @example
   *
   * ```ts
   * const response = await client.get();
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param params - Parameters to filter, sort, and paginate results.
   *
   * @returns A paginated response containing the result of the query.
   */
  async get(params) {
    const url = await this.buildQueryURL(params);
    return await this.fetch(url, params);
  }
  /**
   * Queries content from the Prismic repository and returns only the first
   * result, if any.
   *
   * @example
   *
   * ```ts
   * const document = await client.getFirst();
   * ```
   *
   * @typeParam TDocument - Type of the Prismic document returned.
   *
   * @param params - Parameters to filter, sort, and paginate results. @returns
   *   The first result of the query, if any.
   */
  async getFirst(params) {
    var _a;
    const actualParams = { ...params };
    if (!(params && params.page) && !(params == null ? void 0 : params.pageSize)) {
      actualParams.pageSize = ((_a = this.defaultParams) == null ? void 0 : _a.pageSize) ?? 1;
    }
    const url = await this.buildQueryURL(actualParams);
    const result = await this.fetch(url, params);
    const firstResult = result.results[0];
    if (firstResult) {
      return firstResult;
    }
    throw new NotFoundError("No documents were returned", url, void 0);
  }
  /**
   * **IMPORTANT**: Avoid using `dangerouslyGetAll` as it may be slower and
   * require more resources than other methods. Prefer using other methods that
   * filter by filters such as `getAllByType`.
   *
   * Queries content from the Prismic repository and returns all matching
   * content. If no filters are provided, all documents will be fetched.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @example
   *
   * ```ts
   * const response = await client.dangerouslyGetAll();
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param params - Parameters to filter, sort, and paginate results.
   *
   * @returns A list of documents matching the query.
   */
  async dangerouslyGetAll(params = {}) {
    var _a;
    const { limit = Infinity, ...actualParams } = params;
    const resolvedParams = {
      ...actualParams,
      pageSize: Math.min(limit, actualParams.pageSize || ((_a = this.defaultParams) == null ? void 0 : _a.pageSize) || MAX_PAGE_SIZE)
    };
    const documents = [];
    let latestResult;
    while ((!latestResult || latestResult.next_page) && documents.length < limit) {
      const page = latestResult ? latestResult.page + 1 : void 0;
      latestResult = await this.get({ ...resolvedParams, page });
      documents.push(...latestResult.results);
      if (latestResult.next_page) {
        await new Promise((res) => setTimeout(res, GET_ALL_QUERY_DELAY));
      }
    }
    return documents.slice(0, limit);
  }
  /**
   * Queries a document from the Prismic repository with a specific ID.
   *
   * @remarks
   * A document's UID is different from its ID. An ID is automatically generated
   * for all documents and is made available on its `id` property. A UID is
   * provided in the Prismic editor and is unique among all documents of its
   * custom type.
   *
   * @example
   *
   * ```ts
   * const document = await client.getByID("WW4bKScAAMAqmluX");
   * ```
   *
   * @typeParam TDocument- Type of the Prismic document returned.
   *
   * @param id - ID of the document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns The document with an ID matching the `id` parameter, if a matching
   *   document exists.
   */
  async getByID(id, params) {
    return await this.getFirst(appendFilters(params, filter.at("document.id", id)));
  }
  /**
   * Queries documents from the Prismic repository with specific IDs.
   *
   * @remarks
   * A document's UID is different from its ID. An ID is automatically generated
   * for all documents and is made available on its `id` property. A UID is
   * provided in the Prismic editor and is unique among all documents of its
   * custom type.
   *
   * @example
   *
   * ```ts
   * const response = await client.getByIDs([
   * 	"WW4bKScAAMAqmluX",
   * 	"U1kTRgEAAC8A5ldS",
   * ]);
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param ids - A list of document IDs.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A paginated response containing documents with IDs matching the
   *   `ids` parameter.
   */
  async getByIDs(ids, params) {
    return await this.get(appendFilters(params, filter.in("document.id", ids)));
  }
  /**
   * Queries all documents from the Prismic repository with specific IDs.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @remarks
   * A document's UID is different from its ID. An ID is automatically generated
   * for all documents and is made available on its `id` property. A UID is
   * provided in the Prismic editor and is unique among all documents of its
   * custom type.
   *
   * @example
   *
   * ```ts
   * const response = await client.getAllByIDs([
   * 	"WW4bKScAAMAqmluX",
   * 	"U1kTRgEAAC8A5ldS",
   * ]);
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param ids - A list of document IDs.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A list of documents with IDs matching the `ids` parameter.
   */
  async getAllByIDs(ids, params) {
    return await this.dangerouslyGetAll(appendFilters(params, filter.in("document.id", ids)));
  }
  /**
   * Queries a document from the Prismic repository with a specific UID and
   * custom type.
   *
   * @remarks
   * A document's UID is different from its ID. An ID is automatically generated
   * for all documents and is made available on its `id` property. A UID is
   * provided in the Prismic editor and is unique among all documents of its
   * custom type.
   *
   * @example
   *
   * ```ts
   * const document = await client.getByUID("blog_post", "my-first-post");
   * ```
   *
   * @typeParam TDocument - Type of the Prismic document returned.
   *
   * @param documentType - The API ID of the document's custom type.
   * @param uid - UID of the document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns The document with a UID matching the `uid` parameter, if a
   *   matching document exists.
   */
  async getByUID(documentType, uid, params) {
    return await this.getFirst(appendFilters(params, [
      typeFilter(documentType),
      filter.at(`my.${documentType}.uid`, uid)
    ]));
  }
  /**
   * Queries document from the Prismic repository with specific UIDs and Custom
   * Type.
   *
   * @remarks
   * A document's UID is different from its ID. An ID is automatically generated
   * for all documents and is made available on its `id` property. A UID is
   * provided in the Prismic editor and is unique among all documents of its
   * custom type.
   *
   * @example
   *
   * ```ts
   * const document = await client.getByUIDs("blog_post", [
   * 	"my-first-post",
   * 	"my-second-post",
   * ]);
   * ```
   *
   * @typeParam TDocument - Type of the Prismic document returned.
   *
   * @param documentType - The API ID of the document's custom type.
   * @param uids - A list of document UIDs.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A paginated response containing documents with UIDs matching the
   *   `uids` parameter.
   */
  async getByUIDs(documentType, uids, params) {
    return await this.get(appendFilters(params, [
      typeFilter(documentType),
      filter.in(`my.${documentType}.uid`, uids)
    ]));
  }
  /**
   * Queries all documents from the Prismic repository with specific UIDs and
   * custom type.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @remarks
   * A document's UID is different from its ID. An ID is automatically generated
   * for all documents and is made available on its `id` property. A UID is
   * provided in the Prismic editor and is unique among all documents of its
   * custom type.
   *
   * @example
   *
   * ```ts
   * const response = await client.getAllByUIDs([
   * 	"my-first-post",
   * 	"my-second-post",
   * ]);
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param documentType - The API ID of the document's custom type.
   * @param uids - A list of document UIDs.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A list of documents with UIDs matching the `uids` parameter.
   */
  async getAllByUIDs(documentType, uids, params) {
    return await this.dangerouslyGetAll(appendFilters(params, [
      typeFilter(documentType),
      filter.in(`my.${documentType}.uid`, uids)
    ]));
  }
  /**
   * Queries a singleton document from the Prismic repository for a specific
   * custom type.
   *
   * @remarks
   * A singleton document is one that is configured in Prismic to only allow one
   * instance. For example, a repository may be configured to contain just one
   * Settings document. This is in contrast to a repeatable custom type which
   * allows multiple instances of itself.
   *
   * @example
   *
   * ```ts
   * const document = await client.getSingle("settings");
   * ```
   *
   * @typeParam TDocument - Type of the Prismic document returned.
   *
   * @param documentType - The API ID of the singleton custom type.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns The singleton document for the custom type, if a matching document
   *   exists.
   */
  async getSingle(documentType, params) {
    return await this.getFirst(appendFilters(params, typeFilter(documentType)));
  }
  /**
   * Queries documents from the Prismic repository for a specific custom type.
   *
   * Use `getAllByType` instead if you need to query all documents for a
   * specific custom type.
   *
   * @example
   *
   * ```ts
   * const response = await client.getByType("blog_post");
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param documentType - The API ID of the custom type.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A paginated response containing documents of the custom type.
   */
  async getByType(documentType, params) {
    return await this.get(appendFilters(params, typeFilter(documentType)));
  }
  /**
   * Queries all documents from the Prismic repository for a specific Custom
   * Type.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @example
   *
   * ```ts
   * const response = await client.getByType("blog_post");
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param documentType - The API ID of the custom type.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A list of all documents of the custom type.
   */
  async getAllByType(documentType, params) {
    return await this.dangerouslyGetAll(appendFilters(params, typeFilter(documentType)));
  }
  /**
   * Queries documents from the Prismic repository with a specific tag.
   *
   * Use `getAllByTag` instead if you need to query all documents with a
   * specific tag.
   *
   * @example
   *
   * ```ts
   * const response = await client.getByTag("food");
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param tag - The tag that must be included on a document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A paginated response containing documents with the tag.
   */
  async getByTag(tag, params) {
    return await this.get(appendFilters(params, someTagsFilter(tag)));
  }
  /**
   * Queries all documents from the Prismic repository with a specific tag.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @example
   *
   * ```ts
   * const response = await client.getAllByTag("food");
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param tag - The tag that must be included on a document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A list of all documents with the tag.
   */
  async getAllByTag(tag, params) {
    return await this.dangerouslyGetAll(appendFilters(params, someTagsFilter(tag)));
  }
  /**
   * Queries documents from the Prismic repository with specific tags. A
   * document must be tagged with all of the queried tags to be included.
   *
   * @example
   *
   * ```ts
   * const response = await client.getByEveryTag(["food", "fruit"]);
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param tags - A list of tags that must be included on a document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A paginated response containing documents with the tags.
   */
  async getByEveryTag(tags, params) {
    return await this.get(appendFilters(params, everyTagFilter(tags)));
  }
  /**
   * Queries documents from the Prismic repository with specific tags. A
   * document must be tagged with all of the queried tags to be included.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @example
   *
   * ```ts
   * const response = await client.getAllByEveryTag(["food", "fruit"]);
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param tags - A list of tags that must be included on a document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A list of all documents with the tags.
   */
  async getAllByEveryTag(tags, params) {
    return await this.dangerouslyGetAll(appendFilters(params, everyTagFilter(tags)));
  }
  /**
   * Queries documents from the Prismic repository with specific tags. A
   * document must be tagged with at least one of the queried tags to be
   * included.
   *
   * @example
   *
   * ```ts
   * const response = await client.getByEveryTag(["food", "fruit"]);
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param tags - A list of tags that must be included on a document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A paginated response containing documents with at least one of the
   *   tags.
   */
  async getBySomeTags(tags, params) {
    return await this.get(appendFilters(params, someTagsFilter(tags)));
  }
  /**
   * Queries documents from the Prismic repository with specific tags. A
   * document must be tagged with at least one of the queried tags to be
   * included.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @example
   *
   * ```ts
   * const response = await client.getAllBySomeTags(["food", "fruit"]);
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param tags - A list of tags that must be included on a document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A list of all documents with at least one of the tags.
   */
  async getAllBySomeTags(tags, params) {
    return await this.dangerouslyGetAll(appendFilters(params, someTagsFilter(tags)));
  }
  /**
   * Returns metadata about the Prismic repository, such as its refs, releases,
   * and custom types.
   *
   * @returns Repository metadata.
   */
  async getRepository(params) {
    const url = new URL(this.endpoint);
    if (this.accessToken) {
      url.searchParams.set("access_token", this.accessToken);
    }
    return await this.fetch(url.toString(), params);
  }
  /**
   * Returns a list of all refs for the Prismic repository.
   *
   * Refs are used to identify which version of the repository's content should
   * be queried. All repositories will have at least one ref pointing to the
   * latest published content called the "master ref".
   *
   * @returns A list of all refs for the Prismic repository.
   */
  async getRefs(params) {
    const repository = await this.getRepository(params);
    return repository.refs;
  }
  /**
   * Returns a ref for the Prismic repository with a matching ID.
   *
   * @param id - ID of the ref.
   *
   * @returns The ref with a matching ID, if it exists.
   */
  async getRefByID(id, params) {
    const refs = await this.getRefs(params);
    return findRefByID(refs, id);
  }
  /**
   * Returns a ref for the Prismic repository with a matching label.
   *
   * @param label - Label of the ref.
   *
   * @returns The ref with a matching label, if it exists.
   */
  async getRefByLabel(label, params) {
    const refs = await this.getRefs(params);
    return findRefByLabel(refs, label);
  }
  /**
   * Returns the master ref for the Prismic repository. The master ref points to
   * the repository's latest published content.
   *
   * @returns The repository's master ref.
   */
  async getMasterRef(params) {
    const refs = await this.getRefs(params);
    return findMasterRef(refs);
  }
  /**
   * Returns a list of all Releases for the Prismic repository. Releases are
   * used to group content changes before publishing.
   *
   * @returns A list of all Releases for the Prismic repository.
   */
  async getReleases(params) {
    const refs = await this.getRefs(params);
    return refs.filter((ref) => !ref.isMasterRef);
  }
  /**
   * Returns a Release for the Prismic repository with a matching ID.
   *
   * @param id - ID of the Release.
   *
   * @returns The Release with a matching ID, if it exists.
   */
  async getReleaseByID(id, params) {
    const releases = await this.getReleases(params);
    return findRefByID(releases, id);
  }
  /**
   * Returns a Release for the Prismic repository with a matching label.
   *
   * @param label - Label of the ref.
   *
   * @returns The ref with a matching label, if it exists.
   */
  async getReleaseByLabel(label, params) {
    const releases = await this.getReleases(params);
    return findRefByLabel(releases, label);
  }
  /**
   * Returns a list of all tags used in the Prismic repository.
   *
   * @returns A list of all tags used in the repository.
   */
  async getTags(params) {
    try {
      const tagsForm = await this.getCachedRepositoryForm("tags", params);
      const url = new URL(tagsForm.action);
      if (this.accessToken) {
        url.searchParams.set("access_token", this.accessToken);
      }
      return await this.fetch(url.toString(), params);
    } catch {
      const repository = await this.getRepository(params);
      return repository.tags;
    }
  }
  /**
   * Builds a URL used to query content from the Prismic repository.
   *
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A URL string that can be requested to query content.
   */
  async buildQueryURL({ signal, fetchOptions, ...params } = {}) {
    const ref = params.ref || await this.getResolvedRefString({ signal, fetchOptions });
    const integrationFieldsRef = params.integrationFieldsRef || (await this.getCachedRepository({ signal, fetchOptions })).integrationFieldsRef || void 0;
    return buildQueryURL(this.endpoint, {
      ...this.defaultParams,
      ...params,
      ref,
      integrationFieldsRef,
      routes: params.routes || this.routes,
      brokenRoute: params.brokenRoute || this.brokenRoute,
      accessToken: params.accessToken || this.accessToken
    });
  }
  /**
   * Determines the URL for a previewed document during an active preview
   * session. The result of this method should be used to redirect the user to
   * the document's URL.
   *
   * @example
   *
   * ```ts
   * 	const url = client.resolvePreviewURL({
   * 	linkResolver: (document) => `/${document.uid}`
   * 	defaultURL: '/'
   * 	})
   * ```
   *
   * @param args - Arguments to configure the URL resolving.
   *
   * @returns The URL for the previewed document during an active preview
   *   session. The user should be redirected to this URL.
   */
  async resolvePreviewURL(args) {
    var _a, _b;
    let documentID = args.documentID;
    let previewToken = args.previewToken;
    if (typeof globalThis.location !== "undefined") {
      const searchParams = new URLSearchParams(globalThis.location.search);
      documentID = documentID || searchParams.get("documentId");
      previewToken = previewToken || searchParams.get("token");
    } else if (this.refState.httpRequest) {
      if ("query" in this.refState.httpRequest) {
        documentID = documentID || ((_a = this.refState.httpRequest.query) == null ? void 0 : _a.documentId);
        previewToken = previewToken || ((_b = this.refState.httpRequest.query) == null ? void 0 : _b.token);
      } else if ("url" in this.refState.httpRequest && this.refState.httpRequest.url) {
        const searchParams = new URL(this.refState.httpRequest.url, "missing-host://").searchParams;
        documentID = documentID || searchParams.get("documentId");
        previewToken = previewToken || searchParams.get("token");
      }
    }
    if (documentID != null && previewToken != null) {
      const document = await this.getByID(documentID, {
        ref: previewToken,
        lang: "*",
        signal: args.signal,
        fetchOptions: args.fetchOptions
      });
      const url = asLink(document, { linkResolver: args.linkResolver });
      if (typeof url === "string") {
        return url;
      }
    }
    return args.defaultURL;
  }
  /**
   * Configures the client to query the latest published content for all future
   * queries.
   *
   * If the `ref` parameter is provided during a query, it takes priority for
   * that query.
   *
   * @example
   *
   * ```ts
   * await client.queryLatestContent();
   * const document = await client.getByID("WW4bKScAAMAqmluX");
   * ```
   */
  queryLatestContent() {
    this.refState.mode = RefStateMode.Master;
  }
  /**
   * Configures the client to query content from a specific Release identified
   * by its ID for all future queries.
   *
   * If the `ref` parameter is provided during a query, it takes priority for
   * that query.
   *
   * @example
   *
   * ```ts
   * await client.queryContentFromReleaseByID("YLB7OBAAACMA7Cpa");
   * const document = await client.getByID("WW4bKScAAMAqmluX");
   * ```
   *
   * @param releaseID - The ID of the Release.
   */
  queryContentFromReleaseByID(releaseID) {
    this.refState = {
      ...this.refState,
      mode: RefStateMode.ReleaseID,
      releaseID
    };
  }
  /**
   * Configures the client to query content from a specific Release identified
   * by its label for all future queries.
   *
   * If the `ref` parameter is provided during a query, it takes priority for
   * that query.
   *
   * @example
   *
   * ```ts
   * await client.queryContentFromReleaseByLabel("My Release");
   * const document = await client.getByID("WW4bKScAAMAqmluX");
   * ```
   *
   * @param releaseLabel - The label of the Release.
   */
  queryContentFromReleaseByLabel(releaseLabel) {
    this.refState = {
      ...this.refState,
      mode: RefStateMode.ReleaseLabel,
      releaseLabel
    };
  }
  /**
   * Configures the client to query content from a specific ref. The ref can be
   * provided as a string or a function.
   *
   * If a function is provided, the ref is fetched lazily before each query. The
   * function may also be asynchronous.
   *
   * @example
   *
   * ```ts
   * await client.queryContentFromRef("my-ref");
   * const document = await client.getByID("WW4bKScAAMAqmluX");
   * ```
   *
   * @param ref - The ref or a function that returns the ref from which to query
   *   content.
   */
  queryContentFromRef(ref) {
    this.refState = {
      ...this.refState,
      mode: RefStateMode.Manual,
      ref
    };
  }
  /**
   * A `fetch()` function to be used with GraphQL clients configured for
   * Prismic's GraphQL API. It automatically applies the necessary `prismic-ref`
   * and Authorization headers. Queries will automatically be minified by
   * removing whitespace where possible.
   *
   * @example
   *
   * ```ts
   * const graphQLClient = new ApolloClient({
   * 	link: new HttpLink({
   * 		uri: prismic.getGraphQLEndpoint(repositoryName),
   * 		// Provide `client.graphQLFetch` as the fetch implementation.
   * 		fetch: client.graphQLFetch,
   * 		// Using GET is required.
   * 		useGETForQueries: true,
   * 	}),
   * 	cache: new InMemoryCache(),
   * });
   * ```
   *
   * @param input - The `fetch()` `input` parameter. Only strings are supported.
   * @param init - The `fetch()` `init` parameter. Only plain objects are
   *   supported.
   *
   * @returns The `fetch()` Response for the request.
   *
   * @experimental
   */
  async graphQLFetch(input, init) {
    const cachedRepository = await this.getCachedRepository();
    const ref = await this.getResolvedRefString();
    const unsanitizedHeaders = {
      "Prismic-ref": ref,
      Authorization: this.accessToken ? `Token ${this.accessToken}` : "",
      // Asserting `init.headers` is a Record since popular GraphQL
      // libraries pass this as a Record. Header objects as input
      // are unsupported.
      ...init ? init.headers : {}
    };
    if (cachedRepository.integrationFieldsRef) {
      unsanitizedHeaders["Prismic-integration-field-ref"] = cachedRepository.integrationFieldsRef;
    }
    const headers = {};
    for (const key in unsanitizedHeaders) {
      if (unsanitizedHeaders[key]) {
        headers[key.toLowerCase()] = unsanitizedHeaders[key];
      }
    }
    const url = new URL(
      // Asserting `input` is a string since popular GraphQL
      // libraries pass this as a string. Request objects as
      // input are unsupported.
      input
    );
    url.searchParams.set("ref", ref);
    const query = url.searchParams.get("query");
    if (query) {
      url.searchParams.set(
        "query",
        // Compress the GraphQL query (if it exists) by
        // removing whitespace. This is done to
        // optimize the query size and avoid
        // hitting the upper limit of GET requests
        // (2048 characters).
        minifyGraphQLQuery(query)
      );
    }
    return await this.fetchFn(url.toString(), {
      ...init,
      headers
    });
  }
  /**
   * Returns a cached version of `getRepository` with a TTL.
   *
   * @returns Cached repository metadata.
   */
  async getCachedRepository(params) {
    if (!this.cachedRepository || Date.now() >= this.cachedRepositoryExpiration) {
      this.cachedRepositoryExpiration = Date.now() + REPOSITORY_CACHE_TTL;
      this.cachedRepository = await this.getRepository(params);
    }
    return this.cachedRepository;
  }
  /**
   * Returns a cached Prismic repository form. Forms are used to determine API
   * endpoints for types of repository data.
   *
   * @param name - Name of the form.
   *
   * @returns The repository form.
   *
   * @throws If a matching form cannot be found.
   */
  async getCachedRepositoryForm(name, params) {
    const cachedRepository = await this.getCachedRepository(params);
    const form = cachedRepository.forms[name];
    if (!form) {
      throw new PrismicError(`Form with name "${name}" could not be found`, void 0, void 0);
    }
    return form;
  }
  /**
   * Returns the ref needed to query based on the client's current state. This
   * method may make a network request to fetch a ref or resolve the user's ref
   * thunk.
   *
   * If auto previews are enabled, the preview ref takes priority if available.
   *
   * The following strategies are used depending on the client's state:
   *
   * - If the user called `queryLatestContent`: Use the repository's master ref.
   *   The ref is cached for 5 seconds. After 5 seconds, a new master ref is
   *   fetched.
   * - If the user called `queryContentFromReleaseByID`: Use the release's ref.
   *   The ref is cached for 5 seconds. After 5 seconds, a new ref for the
   *   release is fetched.
   * - If the user called `queryContentFromReleaseByLabel`: Use the release's ref.
   *   The ref is cached for 5 seconds. After 5 seconds, a new ref for the
   *   release is fetched.
   * - If the user called `queryContentFromRef`: Use the provided ref. Fall back
   *   to the master ref if the ref is not a string.
   *
   * @returns The ref to use during a query.
   */
  async getResolvedRefString(params) {
    var _a, _b;
    if (this.refState.autoPreviewsEnabled) {
      let previewRef;
      let cookieJar;
      if ((_a = this.refState.httpRequest) == null ? void 0 : _a.headers) {
        if ("get" in this.refState.httpRequest.headers && typeof this.refState.httpRequest.headers.get === "function") {
          cookieJar = this.refState.httpRequest.headers.get("cookie");
        } else if ("cookie" in this.refState.httpRequest.headers) {
          cookieJar = this.refState.httpRequest.headers.cookie;
        }
      } else if ((_b = globalThis.document) == null ? void 0 : _b.cookie) {
        cookieJar = globalThis.document.cookie;
      }
      if (cookieJar) {
        previewRef = getPreviewCookie(cookieJar);
      }
      if (previewRef) {
        return previewRef;
      }
    }
    const cachedRepository = await this.getCachedRepository(params);
    const refModeType = this.refState.mode;
    if (refModeType === RefStateMode.ReleaseID) {
      return findRefByID(cachedRepository.refs, this.refState.releaseID).ref;
    } else if (refModeType === RefStateMode.ReleaseLabel) {
      return findRefByLabel(cachedRepository.refs, this.refState.releaseLabel).ref;
    } else if (refModeType === RefStateMode.Manual) {
      const res = await castThunk(this.refState.ref)();
      if (typeof res === "string") {
        return res;
      }
    }
    return findMasterRef(cachedRepository.refs).ref;
  }
  /**
   * Performs a network request using the configured `fetch` function. It
   * assumes all successful responses will have a JSON content type. It also
   * normalizes unsuccessful network requests.
   *
   * @typeParam T - The JSON response.
   *
   * @param url - URL to the resource to fetch.
   * @param params - Prismic REST API parameters for the network request.
   *
   * @returns The JSON response from the network request.
   */
  async fetch(url, params = {}) {
    var _a, _b, _c, _d;
    const requestInit = {
      ...this.fetchOptions,
      ...params.fetchOptions,
      headers: {
        ...(_a = this.fetchOptions) == null ? void 0 : _a.headers,
        ...(_b = params.fetchOptions) == null ? void 0 : _b.headers
      },
      signal: ((_c = params.fetchOptions) == null ? void 0 : _c.signal) || params.signal || ((_d = this.fetchOptions) == null ? void 0 : _d.signal)
    };
    let job;
    if (this.fetchJobs[url] && this.fetchJobs[url].has(requestInit.signal)) {
      job = this.fetchJobs[url].get(requestInit.signal);
    } else {
      this.fetchJobs[url] = this.fetchJobs[url] || /* @__PURE__ */ new Map();
      job = this.fetchFn(url, requestInit).then(async (res2) => {
        let json = void 0;
        try {
          json = await res2.json();
        } catch {
        }
        return {
          status: res2.status,
          headers: res2.headers,
          json
        };
      }).finally(() => {
        this.fetchJobs[url].delete(requestInit.signal);
        if (this.fetchJobs[url].size === 0) {
          delete this.fetchJobs[url];
        }
      });
      this.fetchJobs[url].set(requestInit.signal, job);
    }
    const res = await job;
    if (res.status !== 404 && res.json == null) {
      throw new PrismicError(void 0, url, res.json);
    }
    switch (res.status) {
      case 200: {
        return res.json;
      }
      case 400: {
        throw new ParsingError(res.json.message, url, res.json);
      }
      case 401:
      case 403: {
        throw new ForbiddenError(res.json.error || res.json.message, url, res.json);
      }
      case 404: {
        if (res.json === void 0) {
          throw new RepositoryNotFoundError(`Prismic repository not found. Check that "${this.endpoint}" is pointing to the correct repository.`, url, void 0);
        }
        if (res.json.type === "api_notfound_error") {
          throw new RefNotFoundError(res.json.message, url, res.json);
        }
        if (res.json.type === "api_security_error" && /preview token.*expired/i.test(res.json.message)) {
          throw new PreviewTokenExpiredError(res.json.message, url, res.json);
        }
        throw new NotFoundError(res.json.message, url, res.json);
      }
      case 410: {
        throw new RefExpiredError(res.json.message, url, res.json);
      }
      case 429: {
        const parsedRetryAfter = Number(res.headers.get("retry-after"));
        const delay = Number.isNaN(parsedRetryAfter) ? DEFUALT_RETRY_AFTER_MS : parsedRetryAfter;
        return await new Promise((resolve, reject) => {
          setTimeout(async () => {
            try {
              resolve(await this.fetch(url, params));
            } catch (error) {
              reject(error);
            }
          }, delay);
        });
      }
    }
    throw new PrismicError(void 0, url, res.json);
  }
};

// node_modules/@prismicio/client/dist/getGraphQLEndpoint.js
var getGraphQLEndpoint = (repositoryName) => {
  if (isRepositoryName(repositoryName)) {
    return `https://${repositoryName}.cdn.prismic.io/graphql`;
  } else {
    throw new PrismicError(`An invalid Prismic repository name was given: ${repositoryName}`, void 0, void 0);
  }
};

// node_modules/@prismicio/client/dist/getToolbarSrc.js
var getToolbarSrc = (repositoryName) => {
  if (isRepositoryName(repositoryName)) {
    return `https://static.cdn.prismic.io/prismic.js?new=true&repo=${repositoryName}`;
  } else {
    throw new PrismicError(`An invalid Prismic repository name was given: ${repositoryName}`, void 0, void 0);
  }
};

// node_modules/@prismicio/client/dist/helpers/asDate.js
var asDate = (dateOrTimestampField) => {
  if (!dateOrTimestampField) {
    return null;
  }
  if (dateOrTimestampField.length === 24) {
    return new Date(dateOrTimestampField.replace(/(\+|-)(\d{2})(\d{2})$/, ".000$1$2:$3"));
  } else {
    return new Date(dateOrTimestampField);
  }
};

// node_modules/@prismicio/client/dist/lib/isInternalURL.js
var isInternalURL = (url) => {
  const isInternal = /^(\/(?!\/)|#)/.test(url);
  const isSpecialLink = !isInternal && !/^https?:\/\//.test(url);
  return isInternal && !isSpecialLink;
};

// node_modules/@prismicio/client/dist/helpers/isFilled.js
var isFilled_exports = {};
__export(isFilled_exports, {
  color: () => color,
  contentRelationship: () => contentRelationship,
  date: () => date,
  embed: () => embed,
  geoPoint: () => geoPoint,
  group: () => group,
  image: () => image,
  imageThumbnail: () => imageThumbnail,
  integrationField: () => integrationField,
  integrationFields: () => integrationFields,
  keyText: () => keyText,
  link: () => link,
  linkToMedia: () => linkToMedia,
  number: () => number,
  richText: () => richText,
  select: () => select,
  sliceZone: () => sliceZone,
  timestamp: () => timestamp,
  title: () => title
});
var isNonNullish = (input) => {
  return input != null;
};
var isNonEmptyArray = (input) => {
  return !!input.length;
};
var richText = (field) => {
  if (!isNonNullish(field)) {
    return false;
  } else if (field.length === 1 && "text" in field[0]) {
    return !!field[0].text;
  } else {
    return !!field.length;
  }
};
var title = richText;
var imageThumbnail = (thumbnail) => {
  return isNonNullish(thumbnail) && !!thumbnail.url;
};
var image = imageThumbnail;
var link = (field) => {
  return isNonNullish(field) && ("id" in field || "url" in field);
};
var linkToMedia = link;
var contentRelationship = link;
var date = isNonNullish;
var timestamp = isNonNullish;
var color = isNonNullish;
var number = isNonNullish;
var keyText = (field) => {
  return isNonNullish(keyText) && !!field;
};
var select = isNonNullish;
var embed = (field) => {
  return isNonNullish(field) && !!field.embed_url;
};
var geoPoint = (field) => {
  return isNonNullish(field) && "longitude" in field;
};
var integrationField = isNonNullish;
var integrationFields = integrationField;
var group = (group2) => {
  return isNonNullish(group2) && isNonEmptyArray(group2);
};
var sliceZone = (slices) => {
  return isNonNullish(slices) && isNonEmptyArray(slices);
};

// node_modules/@prismicio/client/dist/helpers/asLinkAttrs.js
var asLinkAttrs = (linkFieldOrDocument, config = {}) => {
  if (linkFieldOrDocument && // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore - Bug in TypeScript 4.9: https://github.com/microsoft/TypeScript/issues/51501
  ("link_type" in linkFieldOrDocument ? link(linkFieldOrDocument) : linkFieldOrDocument)) {
    const target = (
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore - Bug in TypeScript 4.9: https://github.com/microsoft/TypeScript/issues/51501
      "target" in linkFieldOrDocument ? linkFieldOrDocument.target : void 0
    );
    const rawHref = asLink(linkFieldOrDocument, config.linkResolver);
    const href = rawHref == null ? void 0 : rawHref;
    const isExternal = typeof href === "string" ? !isInternalURL(href) : false;
    const rel = config.rel ? config.rel({ href, isExternal, target }) : isExternal ? "noreferrer" : void 0;
    return {
      href,
      target,
      rel: rel == null ? void 0 : rel
    };
  }
  return {};
};

// node_modules/@prismicio/client/dist/richtext/asText.js
var asText = (richTextField, separator = " ") => {
  let result = "";
  for (let i = 0; i < richTextField.length; i++) {
    if ("text" in richTextField[i]) {
      result += (result ? separator : "") + richTextField[i].text;
    }
  }
  return result;
};

// node_modules/@prismicio/client/dist/helpers/asText.js
var asText2 = (richTextField, ...configObjectOrTuple) => {
  if (richTextField) {
    const [configObjectOrSeparator] = configObjectOrTuple;
    let config;
    if (typeof configObjectOrSeparator === "string") {
      config = {
        separator: configObjectOrSeparator
      };
    } else {
      config = { ...configObjectOrSeparator };
    }
    return asText(richTextField, config.separator);
  } else {
    return null;
  }
};

// node_modules/@prismicio/client/dist/lib/escapeHTML.js
var matchHtmlRegExp = /["'&<>]/;
var escapeHTML = (string) => {
  const str = "" + string;
  const match = matchHtmlRegExp.exec(str);
  if (!match) {
    return str;
  }
  let escape;
  let html = "";
  let index = 0;
  let lastIndex = 0;
  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        escape = "&quot;";
        break;
      case 38:
        escape = "&amp;";
        break;
      case 39:
        escape = "&#39;";
        break;
      case 60:
        escape = "&lt;";
        break;
      case 62:
        escape = "&gt;";
        break;
      default:
        continue;
    }
    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }
    lastIndex = index + 1;
    html += escape;
  }
  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
};

// node_modules/@prismicio/client/dist/lib/serializerHelpers.js
var formatAttributes = (node, attributes) => {
  const _attributes = { ...attributes };
  if ("data" in node && "label" in node.data && node.data.label) {
    _attributes.class = _attributes.class ? `${_attributes.class} ${node.data.label}` : node.data.label;
  }
  const result = [];
  for (const key in _attributes) {
    const value = _attributes[key];
    if (value) {
      if (typeof value === "boolean") {
        result.push(key);
      } else {
        result.push(`${key}="${escapeHTML(value)}"`);
      }
    }
  }
  if (result.length) {
    result.unshift("");
  }
  return result.join(" ");
};
var getGeneralAttributes = (serializerOrShorthand) => {
  return serializerOrShorthand && typeof serializerOrShorthand !== "function" ? serializerOrShorthand : {};
};
var serializeStandardTag = (tag, serializerOrShorthand) => {
  const generalAttributes = getGeneralAttributes(serializerOrShorthand);
  return ({ node, children }) => {
    return `<${tag}${formatAttributes(node, generalAttributes)}>${children}</${tag}>`;
  };
};
var serializePreFormatted = (serializerOrShorthand) => {
  const generalAttributes = getGeneralAttributes(serializerOrShorthand);
  return ({ node }) => {
    return `<pre${formatAttributes(node, generalAttributes)}>${escapeHTML(node.text)}</pre>`;
  };
};
var serializeImage = (linkResolver, serializerOrShorthand) => {
  const generalAttributes = getGeneralAttributes(serializerOrShorthand);
  return ({ node }) => {
    const attributes = {
      ...generalAttributes,
      src: node.url,
      alt: node.alt,
      copyright: node.copyright
    };
    let imageTag = `<img${formatAttributes(node, attributes)} />`;
    if (node.linkTo) {
      imageTag = serializeHyperlink(linkResolver)({
        type: "hyperlink",
        node: {
          type: "hyperlink",
          data: node.linkTo,
          start: 0,
          end: 0
        },
        text: "",
        children: imageTag,
        key: ""
      });
    }
    return `<p class="block-img">${imageTag}</p>`;
  };
};
var serializeEmbed = (serializerOrShorthand) => {
  const generalAttributes = getGeneralAttributes(serializerOrShorthand);
  return ({ node }) => {
    const attributes = {
      ...generalAttributes,
      ["data-oembed"]: node.oembed.embed_url,
      ["data-oembed-type"]: node.oembed.type,
      ["data-oembed-provider"]: node.oembed.provider_name
    };
    return `<div${formatAttributes(node, attributes)}>${node.oembed.html}</div>`;
  };
};
var serializeHyperlink = (linkResolver, serializerOrShorthand) => {
  const generalAttributes = getGeneralAttributes(serializerOrShorthand);
  return ({ node, children }) => {
    const attributes = {
      ...generalAttributes
    };
    if (node.data.link_type === LinkType.Web) {
      attributes.href = node.data.url;
      attributes.target = node.data.target;
      attributes.rel = "noopener noreferrer";
    } else if (node.data.link_type === LinkType.Document) {
      attributes.href = asLink(node.data, { linkResolver });
    } else if (node.data.link_type === LinkType.Media) {
      attributes.href = node.data.url;
    }
    return `<a${formatAttributes(node, attributes)}>${children}</a>`;
  };
};
var serializeSpan = () => {
  return ({ text }) => {
    return text ? escapeHTML(text).replace(/\n/g, "<br />") : "";
  };
};

// node_modules/@prismicio/client/dist/richtext/asTree.js
var uuid = () => {
  return (++uuid.i).toString();
};
uuid.i = 0;
var asTree = (nodes) => {
  const preparedNodes = prepareNodes(nodes);
  const children = [];
  for (let i = 0; i < preparedNodes.length; i++) {
    children.push(nodeToTreeNode(preparedNodes[i]));
  }
  return {
    key: uuid(),
    children
  };
};
var createTreeNode = (node, children = []) => {
  return {
    key: uuid(),
    type: node.type,
    text: "text" in node ? node.text : void 0,
    node,
    children
  };
};
var createTextTreeNode = (text) => {
  return createTreeNode({
    type: RichTextNodeType.span,
    text,
    spans: []
  });
};
var prepareNodes = (nodes) => {
  const mutNodes = nodes.slice(0);
  for (let i = 0; i < mutNodes.length; i++) {
    const node = mutNodes[i];
    if (node.type === RichTextNodeType.listItem || node.type === RichTextNodeType.oListItem) {
      const items = [
        node
      ];
      while (mutNodes[i + 1] && mutNodes[i + 1].type === node.type) {
        items.push(mutNodes[i + 1]);
        mutNodes.splice(i, 1);
      }
      if (node.type === RichTextNodeType.listItem) {
        mutNodes[i] = {
          type: RichTextNodeType.list,
          items
        };
      } else {
        mutNodes[i] = {
          type: RichTextNodeType.oList,
          items
        };
      }
    }
  }
  return mutNodes;
};
var nodeToTreeNode = (node) => {
  if ("text" in node) {
    return createTreeNode(node, textNodeSpansToTreeNodeChildren(node.spans, node));
  }
  if ("items" in node) {
    const children = [];
    for (let i = 0; i < node.items.length; i++) {
      children.push(nodeToTreeNode(node.items[i]));
    }
    return createTreeNode(node, children);
  }
  return createTreeNode(node);
};
var textNodeSpansToTreeNodeChildren = (spans, node, parentSpan) => {
  if (!spans.length) {
    return [createTextTreeNode(node.text)];
  }
  const mutSpans = spans.slice(0);
  mutSpans.sort((a, b) => a.start - b.start || b.end - a.end);
  const children = [];
  for (let i = 0; i < mutSpans.length; i++) {
    const span = mutSpans[i];
    const parentSpanStart = parentSpan && parentSpan.start || 0;
    const spanStart = span.start - parentSpanStart;
    const spanEnd = span.end - parentSpanStart;
    const text = node.text.slice(spanStart, spanEnd);
    const childSpans = [];
    for (let j = i; j < mutSpans.length; j++) {
      const siblingSpan = mutSpans[j];
      if (siblingSpan !== span) {
        if (siblingSpan.start >= span.start && siblingSpan.end <= span.end) {
          childSpans.push(siblingSpan);
          mutSpans.splice(j, 1);
          j--;
        } else if (siblingSpan.start < span.end && siblingSpan.end > span.start) {
          childSpans.push({
            ...siblingSpan,
            end: span.end
          });
          mutSpans[j] = {
            ...siblingSpan,
            start: span.end
          };
        }
      }
    }
    if (i === 0 && spanStart > 0) {
      children.push(createTextTreeNode(node.text.slice(0, spanStart)));
    }
    const spanWithText = { ...span, text };
    children.push(createTreeNode(spanWithText, textNodeSpansToTreeNodeChildren(childSpans, {
      ...node,
      text
    }, span)));
    if (spanEnd < node.text.length) {
      children.push(createTextTreeNode(node.text.slice(spanEnd, mutSpans[i + 1] ? mutSpans[i + 1].start - parentSpanStart : void 0)));
    }
  }
  return children;
};

// node_modules/@prismicio/client/dist/richtext/serialize.js
var serialize = (richTextField, serializer) => {
  return serializeTreeNodes(asTree(richTextField).children, serializer);
};
var serializeTreeNodes = (nodes, serializer) => {
  const serializedTreeNodes = [];
  for (let i = 0; i < nodes.length; i++) {
    const treeNode = nodes[i];
    const serializedTreeNode = serializer(treeNode.type, treeNode.node, treeNode.text, serializeTreeNodes(treeNode.children, serializer), treeNode.key);
    if (serializedTreeNode != null) {
      serializedTreeNodes.push(serializedTreeNode);
    }
  }
  return serializedTreeNodes;
};

// node_modules/@prismicio/client/dist/richtext/types.js
var RichTextReversedNodeType = {
  [RichTextNodeType.listItem]: "listItem",
  [RichTextNodeType.oListItem]: "oListItem",
  [RichTextNodeType.list]: "list",
  [RichTextNodeType.oList]: "oList"
};

// node_modules/@prismicio/client/dist/richtext/wrapMapSerializer.js
var wrapMapSerializer = (mapSerializer) => {
  return (type, node, text, children, key) => {
    const tagSerializer = mapSerializer[RichTextReversedNodeType[type] || type];
    if (tagSerializer) {
      return tagSerializer({
        // @ts-expect-error cannot type check here
        type,
        // @ts-expect-error cannot type check here
        node,
        // @ts-expect-error cannot type check here
        text,
        // @ts-expect-error cannot type check here
        children,
        // @ts-expect-error cannot type check here
        key
      });
    }
  };
};

// node_modules/@prismicio/client/dist/richtext/composeSerializers.js
var composeSerializers = (...serializers) => {
  return (...args) => {
    for (let i = 0; i < serializers.length; i++) {
      const serializer = serializers[i];
      if (serializer) {
        const res = serializer(...args);
        if (res != null) {
          return res;
        }
      }
    }
  };
};

// node_modules/@prismicio/client/dist/helpers/asHTML.js
var createHTMLRichTextSerializer = (linkResolver, serializer) => {
  const useSerializerOrDefault = (nodeSerializerOrShorthand, defaultWithShorthand) => {
    if (typeof nodeSerializerOrShorthand === "function") {
      return (payload) => {
        return nodeSerializerOrShorthand(payload) || defaultWithShorthand(payload);
      };
    }
    return defaultWithShorthand;
  };
  const mapSerializer = {
    heading1: useSerializerOrDefault(serializer == null ? void 0 : serializer.heading1, serializeStandardTag("h1", serializer == null ? void 0 : serializer.heading1)),
    heading2: useSerializerOrDefault(serializer == null ? void 0 : serializer.heading2, serializeStandardTag("h2", serializer == null ? void 0 : serializer.heading2)),
    heading3: useSerializerOrDefault(serializer == null ? void 0 : serializer.heading3, serializeStandardTag("h3", serializer == null ? void 0 : serializer.heading3)),
    heading4: useSerializerOrDefault(serializer == null ? void 0 : serializer.heading4, serializeStandardTag("h4", serializer == null ? void 0 : serializer.heading4)),
    heading5: useSerializerOrDefault(serializer == null ? void 0 : serializer.heading5, serializeStandardTag("h5", serializer == null ? void 0 : serializer.heading5)),
    heading6: useSerializerOrDefault(serializer == null ? void 0 : serializer.heading6, serializeStandardTag("h6", serializer == null ? void 0 : serializer.heading6)),
    paragraph: useSerializerOrDefault(serializer == null ? void 0 : serializer.paragraph, serializeStandardTag("p", serializer == null ? void 0 : serializer.paragraph)),
    preformatted: useSerializerOrDefault(serializer == null ? void 0 : serializer.preformatted, serializePreFormatted(serializer == null ? void 0 : serializer.preformatted)),
    strong: useSerializerOrDefault(serializer == null ? void 0 : serializer.strong, serializeStandardTag("strong", serializer == null ? void 0 : serializer.strong)),
    em: useSerializerOrDefault(serializer == null ? void 0 : serializer.em, serializeStandardTag("em", serializer == null ? void 0 : serializer.em)),
    listItem: useSerializerOrDefault(serializer == null ? void 0 : serializer.listItem, serializeStandardTag("li", serializer == null ? void 0 : serializer.listItem)),
    oListItem: useSerializerOrDefault(serializer == null ? void 0 : serializer.oListItem, serializeStandardTag("li", serializer == null ? void 0 : serializer.oListItem)),
    list: useSerializerOrDefault(serializer == null ? void 0 : serializer.list, serializeStandardTag("ul", serializer == null ? void 0 : serializer.list)),
    oList: useSerializerOrDefault(serializer == null ? void 0 : serializer.oList, serializeStandardTag("ol", serializer == null ? void 0 : serializer.oList)),
    image: useSerializerOrDefault(serializer == null ? void 0 : serializer.image, serializeImage(linkResolver, serializer == null ? void 0 : serializer.image)),
    embed: useSerializerOrDefault(serializer == null ? void 0 : serializer.embed, serializeEmbed(serializer == null ? void 0 : serializer.embed)),
    hyperlink: useSerializerOrDefault(serializer == null ? void 0 : serializer.hyperlink, serializeHyperlink(linkResolver, serializer == null ? void 0 : serializer.hyperlink)),
    label: useSerializerOrDefault(serializer == null ? void 0 : serializer.label, serializeStandardTag("span", serializer == null ? void 0 : serializer.label)),
    span: useSerializerOrDefault(serializer == null ? void 0 : serializer.span, serializeSpan())
  };
  return wrapMapSerializerWithStringChildren(mapSerializer);
};
var wrapMapSerializerWithStringChildren = (mapSerializer) => {
  const modifiedMapSerializer = {};
  for (const tag in mapSerializer) {
    const tagSerializer = mapSerializer[tag];
    if (tagSerializer) {
      modifiedMapSerializer[tag] = (payload) => {
        return tagSerializer({
          ...payload,
          // @ts-expect-error - merging blockSerializer types causes TS to bail to a never type
          children: payload.children.join("")
        });
      };
    }
  }
  return wrapMapSerializer(modifiedMapSerializer);
};
var asHTML = (richTextField, ...configObjectOrTuple) => {
  if (richTextField) {
    const [configObjectOrLinkResolver, maybeSerializer] = configObjectOrTuple;
    let config;
    if (typeof configObjectOrLinkResolver === "function" || configObjectOrLinkResolver == null) {
      config = {
        linkResolver: configObjectOrLinkResolver,
        serializer: maybeSerializer
      };
    } else {
      config = { ...configObjectOrLinkResolver };
    }
    let serializer;
    if (config.serializer) {
      if (typeof config.serializer === "function") {
        serializer = composeSerializers((type, node, text, children, key) => (
          // TypeScript doesn't narrow the type correctly here since it is now in a callback function, so we have to cast it here.
          config.serializer(type, node, text, children.join(""), key)
        ), createHTMLRichTextSerializer(config.linkResolver));
      } else {
        serializer = createHTMLRichTextSerializer(config.linkResolver, config.serializer);
      }
    } else {
      serializer = createHTMLRichTextSerializer(config.linkResolver);
    }
    return serialize(richTextField, serializer).join("");
  } else {
    return null;
  }
};

// node_modules/imgix-url-builder/dist/index.mjs
var camelCaseToParamCase = (input) => {
  return input.replace(/[A-Z]/g, (match) => {
    return `-${match.toLowerCase()}`;
  });
};
var buildURL = (url, params) => {
  const instance = new URL(url);
  for (const camelCasedParamKey in params) {
    const paramKey = camelCaseToParamCase(camelCasedParamKey);
    const paramValue = params[camelCasedParamKey];
    if (paramValue === void 0) {
      instance.searchParams.delete(paramKey);
    } else if (Array.isArray(paramValue)) {
      instance.searchParams.set(paramKey, paramValue.join(","));
    } else {
      instance.searchParams.set(paramKey, `${paramValue}`);
    }
  }
  const s = instance.searchParams.get("s");
  if (s) {
    instance.searchParams.delete("s");
    instance.searchParams.append("s", s);
  }
  return instance.toString();
};
var buildPixelDensitySrcSet = (url, { pixelDensities, ...params }) => {
  return pixelDensities.map((dpr) => {
    return `${buildURL(url, { ...params, dpr })} ${dpr}x`;
  }).join(", ");
};
var buildWidthSrcSet = (url, { widths, ...params }) => {
  return widths.map((width) => {
    return `${buildURL(url, { ...params, w: void 0, width })} ${width}w`;
  }).join(", ");
};

// node_modules/@prismicio/client/dist/helpers/asImageSrc.js
var asImageSrc = (field, config = {}) => {
  if (field && imageThumbnail(field)) {
    return buildURL(field.url, config);
  } else {
    return null;
  }
};

// node_modules/@prismicio/client/dist/helpers/asImageWidthSrcSet.js
var DEFAULT_WIDTHS = [640, 828, 1200, 2048, 3840];
var asImageWidthSrcSet = (field, config = {}) => {
  if (field && imageThumbnail(field)) {
    let {
      widths = DEFAULT_WIDTHS,
      // eslint-disable-next-line prefer-const
      ...imgixParams
    } = config;
    const { url, dimensions, id: _id, alt: _alt, copyright: _copyright, edit: _edit, ...responsiveViews } = field;
    const responsiveViewObjects = Object.values(responsiveViews);
    if (widths === "thumbnails" && responsiveViewObjects.length < 1) {
      widths = DEFAULT_WIDTHS;
    }
    return {
      src: buildURL(url, imgixParams),
      srcset: (
        // By this point, we know `widths` can only be
        // `"thubmanils"` if the field has thumbnails.
        widths === "thumbnails" ? [
          buildWidthSrcSet(url, {
            ...imgixParams,
            widths: [dimensions.width]
          }),
          ...responsiveViewObjects.map((thumbnail) => {
            return buildWidthSrcSet(thumbnail.url, {
              ...imgixParams,
              widths: [thumbnail.dimensions.width]
            });
          })
        ].join(", ") : buildWidthSrcSet(field.url, {
          ...imgixParams,
          widths
        })
      )
    };
  } else {
    return null;
  }
};

// node_modules/@prismicio/client/dist/helpers/asImagePixelDensitySrcSet.js
var DEFAULT_PIXEL_DENSITIES = [1, 2, 3];
var asImagePixelDensitySrcSet = (field, config = {}) => {
  if (field && imageThumbnail(field)) {
    const { pixelDensities = DEFAULT_PIXEL_DENSITIES, ...imgixParams } = config;
    return {
      src: buildURL(field.url, imgixParams),
      srcset: buildPixelDensitySrcSet(field.url, {
        ...imgixParams,
        pixelDensities
      })
    };
  } else {
    return null;
  }
};

// node_modules/@prismicio/client/dist/types/value/embed.js
var OEmbedType = {
  Photo: "photo",
  Video: "video",
  Link: "link",
  Rich: "rich"
};

// node_modules/@prismicio/client/dist/types/model/types.js
var CustomTypeModelFieldType = {
  Boolean: "Boolean",
  Color: "Color",
  Date: "Date",
  Embed: "Embed",
  GeoPoint: "GeoPoint",
  Group: "Group",
  Image: "Image",
  Integration: "IntegrationFields",
  Link: "Link",
  Number: "Number",
  Select: "Select",
  Slices: "Slices",
  StructuredText: "StructuredText",
  Text: "Text",
  Timestamp: "Timestamp",
  UID: "UID",
  /**
   * @deprecated - Renamed to `Integration`.
   */
  IntegrationFields: "IntegrationFields",
  /**
   * @deprecated - Legacy field type. Use `Number` instead.
   */
  Range: "Range",
  /**
   * @deprecated - Legacy field type. Do not use.
   */
  Separator: "Separator",
  /**
   * @deprecated - Legacy field type. Use `Slices` instead.
   */
  LegacySlices: "Choice"
};

// node_modules/@prismicio/client/dist/types/model/link.js
var CustomTypeModelLinkSelectType = {
  Document: "document",
  Media: "media",
  Web: "web"
};

// node_modules/@prismicio/client/dist/types/model/sliceZone.js
var CustomTypeModelSliceType = {
  Slice: "Slice",
  SharedSlice: "SharedSlice"
};

// node_modules/@prismicio/client/dist/types/model/slice.js
var CustomTypeModelSliceDisplay = {
  List: "list",
  Grid: "grid"
};

// node_modules/@prismicio/client/dist/types/webhook/types.js
var WebhookType = {
  APIUpdate: "api-update",
  TestTrigger: "test-trigger"
};

// node_modules/@prismicio/client/dist/index.js
var predicate = filter;
var unstable_mapSliceZone = mapSliceZone;
var Element = RichTextNodeType;
export {
  Client,
  CustomTypeModelFieldType,
  CustomTypeModelLinkSelectType,
  CustomTypeModelSliceDisplay,
  CustomTypeModelSliceType,
  Element,
  ForbiddenError,
  LinkType,
  NotFoundError,
  OEmbedType,
  ParsingError,
  PreviewTokenExpiredError,
  PrismicError,
  RefExpiredError,
  RefNotFoundError,
  RepositoryNotFoundError,
  RichTextNodeType,
  WebhookType,
  asDate,
  asHTML,
  asImagePixelDensitySrcSet,
  asImageSrc,
  asImageWidthSrcSet,
  asLink,
  asLinkAttrs,
  asText2 as asText,
  buildQueryURL,
  cookie_exports as cookie,
  createClient,
  documentToLinkField,
  filter,
  getGraphQLEndpoint,
  getRepositoryEndpoint,
  getRepositoryName,
  getToolbarSrc,
  isFilled_exports as isFilled,
  isRepositoryEndpoint,
  isRepositoryName,
  mapSliceZone,
  predicate,
  unstable_mapSliceZone
};
//# sourceMappingURL=@prismicio_client.js.map
