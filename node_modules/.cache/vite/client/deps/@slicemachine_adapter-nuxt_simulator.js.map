{
  "version": 3,
  "sources": ["../../../../statuses/codes.json", "../../../../statuses/index.js", "../../../../@prismicio/src/lib/throttle.ts", "../../../../@prismicio/src/types.ts", "../../../../@prismicio/src/kit/types.ts", "../../../../@prismicio/src/channel/types.ts", "../../../../@prismicio/src/channel/errors.ts", "../../../../@prismicio/src/channel/messages.ts", "../../../../@prismicio/src/channel/ChannelNetwork.ts", "../../../../@prismicio/src/channel/ChannelReceiver.ts", "../../../../@prismicio/src/SimulatorAPI.ts", "../../../../@prismicio/src/lib/EventEmitter.ts", "../../../../@prismicio/src/kit/domHelpers.ts", "../../../../@prismicio/src/kit/getDefault.ts", "../../../../@prismicio/src/kit/State.ts", "../../../../@prismicio/src/kit/messages.ts", "../../../../@prismicio/src/kit/SimulatorManager.ts", "../../../../@prismicio/src/kit/eventHandlers.ts", "../../../../@slicemachine/src/simulator/SliceSimulator.ts"],
  "sourcesContent": ["{\n  \"100\": \"Continue\",\n  \"101\": \"Switching Protocols\",\n  \"102\": \"Processing\",\n  \"103\": \"Early Hints\",\n  \"200\": \"OK\",\n  \"201\": \"Created\",\n  \"202\": \"Accepted\",\n  \"203\": \"Non-Authoritative Information\",\n  \"204\": \"No Content\",\n  \"205\": \"Reset Content\",\n  \"206\": \"Partial Content\",\n  \"207\": \"Multi-Status\",\n  \"208\": \"Already Reported\",\n  \"226\": \"IM Used\",\n  \"300\": \"Multiple Choices\",\n  \"301\": \"Moved Permanently\",\n  \"302\": \"Found\",\n  \"303\": \"See Other\",\n  \"304\": \"Not Modified\",\n  \"305\": \"Use Proxy\",\n  \"307\": \"Temporary Redirect\",\n  \"308\": \"Permanent Redirect\",\n  \"400\": \"Bad Request\",\n  \"401\": \"Unauthorized\",\n  \"402\": \"Payment Required\",\n  \"403\": \"Forbidden\",\n  \"404\": \"Not Found\",\n  \"405\": \"Method Not Allowed\",\n  \"406\": \"Not Acceptable\",\n  \"407\": \"Proxy Authentication Required\",\n  \"408\": \"Request Timeout\",\n  \"409\": \"Conflict\",\n  \"410\": \"Gone\",\n  \"411\": \"Length Required\",\n  \"412\": \"Precondition Failed\",\n  \"413\": \"Payload Too Large\",\n  \"414\": \"URI Too Long\",\n  \"415\": \"Unsupported Media Type\",\n  \"416\": \"Range Not Satisfiable\",\n  \"417\": \"Expectation Failed\",\n  \"418\": \"I'm a Teapot\",\n  \"421\": \"Misdirected Request\",\n  \"422\": \"Unprocessable Entity\",\n  \"423\": \"Locked\",\n  \"424\": \"Failed Dependency\",\n  \"425\": \"Too Early\",\n  \"426\": \"Upgrade Required\",\n  \"428\": \"Precondition Required\",\n  \"429\": \"Too Many Requests\",\n  \"431\": \"Request Header Fields Too Large\",\n  \"451\": \"Unavailable For Legal Reasons\",\n  \"500\": \"Internal Server Error\",\n  \"501\": \"Not Implemented\",\n  \"502\": \"Bad Gateway\",\n  \"503\": \"Service Unavailable\",\n  \"504\": \"Gateway Timeout\",\n  \"505\": \"HTTP Version Not Supported\",\n  \"506\": \"Variant Also Negotiates\",\n  \"507\": \"Insufficient Storage\",\n  \"508\": \"Loop Detected\",\n  \"509\": \"Bandwidth Limit Exceeded\",\n  \"510\": \"Not Extended\",\n  \"511\": \"Network Authentication Required\"\n}\n", "/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = status\n\n// status code to message map\nstatus.message = codes\n\n// status message (lower-case) to code map\nstatus.code = createMessageToStatusCodeMap(codes)\n\n// array of status codes\nstatus.codes = createStatusCodeList(codes)\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n}\n\n/**\n * Create a map of message to status code.\n * @private\n */\n\nfunction createMessageToStatusCodeMap (codes) {\n  var map = {}\n\n  Object.keys(codes).forEach(function forEachCode (code) {\n    var message = codes[code]\n    var status = Number(code)\n\n    // populate map\n    map[message.toLowerCase()] = status\n  })\n\n  return map\n}\n\n/**\n * Create a list of all status codes.\n * @private\n */\n\nfunction createStatusCodeList (codes) {\n  return Object.keys(codes).map(function mapCode (code) {\n    return Number(code)\n  })\n}\n\n/**\n * Get the status code for given message.\n * @private\n */\n\nfunction getStatusCode (message) {\n  var msg = message.toLowerCase()\n\n  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {\n    throw new Error('invalid status message: \"' + message + '\"')\n  }\n\n  return status.code[msg]\n}\n\n/**\n * Get the status message for given code.\n * @private\n */\n\nfunction getStatusMessage (code) {\n  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {\n    throw new Error('invalid status code: ' + code)\n  }\n\n  return status.message[code]\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\nfunction status (code) {\n  if (typeof code === 'number') {\n    return getStatusMessage(code)\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string')\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    return getStatusMessage(n)\n  }\n\n  return getStatusCode(code)\n}\n", "// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const throttle = <TFn extends (...args: any[]) => any>(\n\tfn: TFn,\n\tdelay = 16,\n): ((...args: Parameters<TFn>) => void) => {\n\tlet lastExec = 0;\n\tlet timer: NodeJS.Timeout | null = null;\n\n\treturn function (this: unknown, ...args: Parameters<TFn>) {\n\t\tconst now = Date.now();\n\t\tconst delta = now - lastExec;\n\n\t\tif (delta >= delay) {\n\t\t\tfn.apply(this, args);\n\t\t\tlastExec = now;\n\t\t} else {\n\t\t\tif (timer) {\n\t\t\t\tclearTimeout(timer);\n\t\t\t}\n\t\t\ttimer = setTimeout(() => {\n\t\t\t\tfn.apply(this, args);\n\t\t\t\tlastExec = Date.now();\n\t\t\t}, delay - delta);\n\t\t}\n\t};\n};\n", "import { SliceZone } from \"@prismicio/client\";\n\nimport { RequestMessage, ResponseMessage, Transaction } from \"./channel\";\n\nexport type ActiveSlice = {\n\trect: DOMRect;\n\tsliceID: string;\n\tvariationID: string;\n\tindex: number;\n};\n\nexport type SliceZoneSize = {\n\trect: DOMRect;\n};\n\nexport enum APIRequestType {\n\tSetActiveSlice = \"setActiveSlice\",\n\tSetSliceZoneSize = \"setSliceZoneSize\",\n}\n\nexport type APITransactions = {\n\t[APIRequestType.SetActiveSlice]: Transaction<\n\t\tRequestMessage<APIRequestType.SetActiveSlice, ActiveSlice | null>\n\t>;\n\t[APIRequestType.SetSliceZoneSize]: Transaction<\n\t\tRequestMessage<APIRequestType.SetSliceZoneSize, SliceZoneSize>\n\t>;\n};\n\nexport enum ClientRequestType {\n\tPing = \"ping\",\n\tSetSliceZone = \"setSliceZone\",\n\tScrollToSlice = \"scrollToSlice\",\n}\n\nexport type ClientTransactions = {\n\t[ClientRequestType.Ping]: Transaction<\n\t\tRequestMessage<ClientRequestType.Ping>,\n\t\tResponseMessage<\"pong\">\n\t>;\n\n\t[ClientRequestType.SetSliceZone]: Transaction<\n\t\tRequestMessage<ClientRequestType.SetSliceZone, SliceZone>\n\t>;\n\n\t[ClientRequestType.ScrollToSlice]: Transaction<\n\t\tRequestMessage<\n\t\t\tClientRequestType.ScrollToSlice,\n\t\t\t{\n\t\t\t\tsliceIndex: number;\n\t\t\t\tbehavior?: \"auto\" | \"smooth\";\n\t\t\t\tblock?: \"start\" | \"center\" | \"end\" | \"nearest\";\n\t\t\t\tinline?: \"start\" | \"center\" | \"end\" | \"nearest\";\n\t\t\t}\n\t\t>\n\t>;\n};\n", "import type { SliceZone } from \"@prismicio/client\";\n\nimport type { ActiveSlice } from \"../types\";\n\nimport type { SimulatorManager } from \"./SimulatorManager\";\n\nexport enum StateEventType {\n\tSlices = \"slices\",\n\tActiveSlice = \"activeSlice\",\n\tMessage = \"message\",\n}\n\nexport type StateEvents = {\n\t[StateEventType.Slices]: SliceZone;\n\t[StateEventType.ActiveSlice]: ActiveSlice | null;\n\t[StateEventType.Message]: string;\n};\n\nexport interface SliceSimulatorProps {\n\tzIndex?: number;\n\tbackground?: string;\n}\n\nexport interface SliceSimulatorState {\n\tmanager: SimulatorManager;\n\tslices: SliceZone;\n\tmessage: string;\n}\n\nexport type SliceSimulatorOptions = SliceSimulatorProps & SliceSimulatorState;\n", "// Messages\nexport type MessageBase = {\n\trequestID: string;\n};\n\nexport type RequestMessage<TType extends string = string, TData = void> = {\n\ttype: TType;\n\tdata: TData;\n} & MessageBase;\n\nexport type ResponseMessageBase = {\n\tstatus: number;\n\tmsg: string;\n} & MessageBase;\n\nexport type SuccessResponseMessage<TData = void> = {\n\tdata: TData;\n\terror?: never;\n} & ResponseMessageBase;\n\nexport type ErrorResponseMessage<TError = unknown> = {\n\tdata?: never;\n\terror: unknown | TError;\n} & ResponseMessageBase;\n\nexport type ResponseMessage<TData = void, TError = unknown> =\n\t| SuccessResponseMessage<TData>\n\t| ErrorResponseMessage<TError>;\n\nexport type ExtractSuccessResponseMessage<\n\tTResponse extends UnknownResponseMessage,\n> = Extract<TResponse, { error?: never }>;\n\nexport type ExtractErrorResponseMessage<\n\tTResponse extends UnknownResponseMessage,\n> = Extract<TResponse, { data?: never }>;\n\n// Unknown messages\nexport type UnknownRequestMessage = RequestMessage<string, unknown>;\n\nexport type UnknownSuccessResponseMessage = SuccessResponseMessage<unknown>;\n\nexport type UnknownErrorResponseMessage = ErrorResponseMessage<unknown>;\n\nexport type UnknownResponseMessage =\n\t| UnknownSuccessResponseMessage\n\t| UnknownErrorResponseMessage;\n\nexport type UnknownMessage = UnknownRequestMessage | UnknownResponseMessage;\n\n// Transactions\nexport type Transaction<\n\tTRequest extends UnknownRequestMessage,\n\tTResponse extends UnknownResponseMessage = ResponseMessage<void>,\n> = {\n\trequest: TRequest;\n\tresponse: TResponse;\n};\n\nexport type TransactionMethod<\n\tTTransaction extends Transaction<\n\t\tUnknownRequestMessage,\n\t\tUnknownResponseMessage\n\t>,\n> = (\n\tdata: TTransaction[\"request\"][\"data\"],\n) => Promise<ExtractSuccessResponseMessage<TTransaction[\"response\"]>>;\n\nexport type TransactionHandler<\n\tTTransaction extends Transaction<\n\t\tUnknownRequestMessage,\n\t\tUnknownResponseMessage\n\t>,\n> = (\n\trequest: TTransaction[\"request\"],\n\tresponse: {\n\t\tsuccess: (\n\t\t\tdata: ExtractSuccessResponseMessage<TTransaction[\"response\"]>[\"data\"],\n\t\t\tstatus?: number,\n\t\t) => ExtractSuccessResponseMessage<TTransaction[\"response\"]>;\n\t\terror: (\n\t\t\terror: ExtractErrorResponseMessage<TTransaction[\"response\"]>[\"error\"],\n\t\t\tstatus?: number,\n\t\t) => ExtractErrorResponseMessage<TTransaction[\"response\"]>;\n\t},\n) => Promise<TTransaction[\"response\"]> | TTransaction[\"response\"];\n\nexport type TransactionsMethods<\n\tTTransactions extends Record<string, UnknownTransaction>,\n> = {\n\t[Key in keyof TTransactions]: TransactionMethod<TTransactions[Key]>;\n};\n\nexport type TransactionsHandlers<\n\tTTransactions extends Record<string, UnknownTransaction>,\n> = {\n\t[Key in keyof TTransactions]: TransactionHandler<TTransactions[Key]>;\n};\n\n// Unknown transactions\nexport type UnknownTransaction = Transaction<\n\tUnknownRequestMessage,\n\tUnknownResponseMessage\n>;\n\nexport type UnknownTransactionMethod = TransactionMethod<UnknownTransaction>;\n\nexport type UnknownTransactionHandler = TransactionHandler<UnknownTransaction>;\n\n// Emitter\nexport enum InternalEmitterRequestType {\n\tConnect = \"connect\",\n}\n\nexport type InternalEmitterTransactions<\n\tTReceiverOptions extends Record<string, unknown> = Record<string, unknown>,\n> = {\n\t[InternalEmitterRequestType.Connect]: Transaction<\n\t\tRequestMessage<\n\t\t\tInternalEmitterRequestType.Connect,\n\t\t\t| Partial<\n\t\t\t\t\tOmit<TReceiverOptions, \"debug\" | \"requestIDPrefix\" | \"readyTimeout\">\n\t\t\t  >\n\t\t\t| undefined\n\t\t>\n\t>;\n};\n\n// Receiver\nexport enum InternalReceiverRequestType {\n\tReady = \"ready\",\n}\n\nexport type InternalReceiverTransactions = {\n\t[InternalReceiverRequestType.Ready]: Transaction<\n\t\tRequestMessage<InternalReceiverRequestType.Ready>\n\t>;\n};\n", "import { UnknownErrorResponseMessage } from \".\";\n\nimport { UnknownRequestMessage } from \"./types\";\n\nexport class ResponseError<\n\tTErrorResponse extends UnknownErrorResponseMessage,\n> extends Error {\n\tpublic response: TErrorResponse;\n\n\tconstructor(errorResponse: TErrorResponse) {\n\t\tsuper(errorResponse.msg);\n\n\t\tthis.response = errorResponse;\n\t}\n}\n\nexport class ConnectionTimeoutError extends Error {\n\tconstructor() {\n\t\tsuper(\"Connection timed out\");\n\t}\n}\nexport class TooManyConcurrentRequestsError extends Error {\n\tpublic request: UnknownRequestMessage;\n\n\tconstructor(request: UnknownRequestMessage) {\n\t\tsuper(`Too many concurrent requests`);\n\n\t\tthis.request = request;\n\t}\n}\nexport class RequestTimeoutError<\n\tTRequest extends UnknownRequestMessage,\n> extends Error {\n\tpublic request: UnknownRequestMessage;\n\n\tconstructor(request: TRequest) {\n\t\tsuper(`Request \\`${request.requestID}\\` timed out`);\n\n\t\tthis.request = request;\n\t}\n}\n\nexport class NotReadyError extends Error {}\nexport class PortNotSetError extends Error {\n\tconstructor() {\n\t\tsuper(\"Port is not set\");\n\t}\n}\nexport class ChannelNotSetError extends Error {\n\tconstructor() {\n\t\tsuper(\"Channel is not set\");\n\t}\n}\n", "import statuses from \"statuses\";\n\nimport {\n\tErrorResponseMessage,\n\tRequestMessage,\n\tSuccessResponseMessage,\n\tUnknownErrorResponseMessage,\n\tUnknownMessage,\n\tUnknownRequestMessage,\n\tUnknownResponseMessage,\n\tUnknownSuccessResponseMessage,\n} from \"./types\";\n\nlet requestID = 0;\n\nexport const createRequestMessage = <\n\tTType extends string = string,\n\tTData = undefined,\n>(\n\ttype: TType,\n\tdata: TData,\n\tprefix = \"\",\n): RequestMessage<TType, TData> => {\n\treturn {\n\t\trequestID: `${prefix}${requestID++}`,\n\t\ttype,\n\t\tdata,\n\t};\n};\n\nexport const createSuccessResponseMessage = <TData = undefined>(\n\trequestID: string,\n\tdata: TData,\n\tstatus: keyof typeof statuses.message = 200,\n): SuccessResponseMessage<TData> => {\n\tif (status >= 400) {\n\t\tthrow new TypeError(\n\t\t\t`Invalid success status code, expected status to be within \\`[100;400[\\`, got \\`${status}\\``,\n\t\t);\n\t}\n\n\treturn {\n\t\trequestID,\n\t\tstatus,\n\t\tmsg: statuses.message[status]?.replace(/\\.$/, \"\").toLowerCase() ?? \"\",\n\t\tdata,\n\t};\n};\n\nexport const createErrorResponseMessage = <TError = undefined>(\n\trequestID: string,\n\terror: TError,\n\tstatus: keyof typeof statuses.message = 400,\n): ErrorResponseMessage<TError> => {\n\tif (status < 400) {\n\t\tthrow new TypeError(\n\t\t\t`Invalid error status code, expected status to be within \\`[500;600[\\`, got \\`${status}\\``,\n\t\t);\n\t}\n\n\treturn {\n\t\trequestID,\n\t\tstatus,\n\t\tmsg: statuses.message[status]?.replace(/\\.$/, \"\").toLowerCase() ?? \"\",\n\t\terror,\n\t};\n};\n\nexport const validateMessage = (message: unknown): UnknownMessage => {\n\tif (typeof message !== \"object\" || message === null) {\n\t\tthrow new TypeError(\n\t\t\t`Invalid message received, expected message to be of type \\`object\\`, got \\`${typeof message}\\``,\n\t\t);\n\t} else if (\n\t\t!Object.keys(message).every((key) =>\n\t\t\t[\"requestID\", \"type\", \"data\", \"status\", \"msg\", \"error\"].includes(key),\n\t\t)\n\t) {\n\t\tthrow new TypeError(`Invalid message received: ${JSON.stringify(message)}`);\n\t} else if (\n\t\ttypeof (message as Record<string, unknown>).requestID !== \"string\"\n\t) {\n\t\tthrow new TypeError(\n\t\t\t`Invalid message received, expected \\`message.requestID\\` to be of type \\`string\\`, got \\`${typeof (\n\t\t\t\tmessage as Record<string, unknown>\n\t\t\t).id}\\``,\n\t\t);\n\t}\n\n\treturn message as UnknownMessage;\n};\n\nexport const isRequestMessage = (\n\tmessage: UnknownMessage,\n): message is UnknownRequestMessage => {\n\treturn \"type\" in message;\n};\n\nexport const isResponseMessage = (\n\tmessage: UnknownMessage,\n): message is UnknownResponseMessage => {\n\treturn !(\"type\" in message);\n};\n\nexport const isSuccessResponseMessage = (\n\tmessage: UnknownMessage,\n): message is UnknownSuccessResponseMessage => {\n\treturn isResponseMessage(message) && !(\"error\" in message);\n};\n\nexport const isErrorResponseMessage = (\n\tmessage: UnknownMessage,\n): message is UnknownErrorResponseMessage => {\n\treturn isResponseMessage(message) && !(\"data\" in message);\n};\n", "import {\n\tExtractErrorResponseMessage,\n\tExtractSuccessResponseMessage,\n\tRequestMessage,\n\tTransactionsHandlers,\n\tUnknownRequestMessage,\n\tUnknownResponseMessage,\n\tUnknownTransaction,\n} from \"./types\";\n\nimport {\n\tPortNotSetError,\n\tRequestTimeoutError,\n\tResponseError,\n\tTooManyConcurrentRequestsError,\n} from \"./errors\";\n\nimport {\n\tcreateErrorResponseMessage,\n\tcreateRequestMessage,\n\tcreateSuccessResponseMessage,\n\tisRequestMessage,\n\tisSuccessResponseMessage,\n\tvalidateMessage,\n} from \"./messages\";\n\nexport type PostRequestOptions = {\n\ttimeout?: number;\n};\n\nexport type ChannelNetworkOptions = {\n\tdebug: boolean;\n\tmaximumRequestConcurrency: number;\n\tdefaultTimeout: number;\n\trequestIDPrefix: string;\n};\n\nexport const channelNetworkDefaultOptions: ChannelNetworkOptions = {\n\tdebug: false,\n\tmaximumRequestConcurrency: 20,\n\tdefaultTimeout: 5000,\n\trequestIDPrefix: \"channel-\",\n};\n\nexport abstract class ChannelNetwork<\n\tTPartnerTransactions extends Record<string, UnknownTransaction> = Record<\n\t\tstring,\n\t\tnever\n\t>,\n\tTOptions extends Record<string, unknown> = Record<string, unknown>,\n> {\n\tpublic requestHandlers: TransactionsHandlers<TPartnerTransactions>;\n\tpublic options: ChannelNetworkOptions & TOptions;\n\n\tprivate _port: MessagePort | null = null;\n\tprotected get port(): MessagePort {\n\t\tif (!this._port) {\n\t\t\tthrow new PortNotSetError();\n\t\t}\n\n\t\treturn this._port;\n\t}\n\tprotected set port(port: MessagePort | null) {\n\t\t// Destroy old port\n\t\tif (this._port) {\n\t\t\tthis._port.onmessage = null;\n\t\t}\n\n\t\tthis._port = port;\n\t\tif (this._port) {\n\t\t\tthis._port.onmessage = this.onMessage.bind(this);\n\t\t}\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tprivate _pendingRequests: Map<string, (response: any) => void> = new Map();\n\n\tconstructor(\n\t\trequestHandlers: TransactionsHandlers<TPartnerTransactions>,\n\t\toptions: Partial<ChannelNetworkOptions> & TOptions,\n\t) {\n\t\tthis.requestHandlers = requestHandlers;\n\t\tthis.options = { ...channelNetworkDefaultOptions, ...options };\n\t}\n\n\tpublic createRequestMessage<TType extends string = string, TData = undefined>(\n\t\ttype: TType,\n\t\tdata: TData,\n\t): RequestMessage<TType, TData> {\n\t\treturn createRequestMessage(type, data, this.options.requestIDPrefix);\n\t}\n\n\tprotected async onMessage(event: MessageEvent<unknown>): Promise<void> {\n\t\tif (this.options.debug) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.debug(event.data);\n\t\t}\n\n\t\ttry {\n\t\t\tconst message = validateMessage(event.data);\n\n\t\t\tif (isRequestMessage(message)) {\n\t\t\t\tif (!this.requestHandlers[message.type]) {\n\t\t\t\t\tthis.postResponse(\n\t\t\t\t\t\tcreateErrorResponseMessage(message.requestID, undefined, 501),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// TODO: Figure out why type cannot be inferred on its own anymore\n\t\t\t\t\t\tconst response = await this.requestHandlers[message.type](message, {\n\t\t\t\t\t\t\tsuccess: createSuccessResponseMessage.bind(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tmessage.requestID,\n\t\t\t\t\t\t\t) as Parameters<\n\t\t\t\t\t\t\t\t(typeof this.requestHandlers)[string]\n\t\t\t\t\t\t\t>[1][\"success\"],\n\t\t\t\t\t\t\terror: createErrorResponseMessage.bind(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tmessage.requestID,\n\t\t\t\t\t\t\t) as Parameters<\n\t\t\t\t\t\t\t\t(typeof this.requestHandlers)[string]\n\t\t\t\t\t\t\t>[1][\"error\"],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.postResponse(response);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.postResponse(\n\t\t\t\t\t\t\tcreateErrorResponseMessage(message.requestID, error, 500),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!this._pendingRequests.has(message.requestID)) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`Unknown request ID received in response: ${JSON.stringify(\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t)}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Pending requests are checked in previous statement\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\tthis._pendingRequests.get(message.requestID)!(message);\n\t\t\t\t\tthis._pendingRequests.delete(message.requestID);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error instanceof TypeError) {\n\t\t\t\tconsole.warn(error.message);\n\t\t\t} else {\n\t\t\t\t// Should not be possible, but who knows :shrug:\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected postRequest<\n\t\tTRequest extends UnknownRequestMessage,\n\t\tTResponse extends UnknownResponseMessage,\n\t>(\n\t\trequest: TRequest,\n\t\tpostMessage = (request: TRequest): void => this.port.postMessage(request),\n\t\toptions: PostRequestOptions = {},\n\t): Promise<ExtractSuccessResponseMessage<TResponse>> {\n\t\tif (this.options.debug) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.debug(request);\n\t\t}\n\n\t\tif (this._pendingRequests.size >= this.options.maximumRequestConcurrency) {\n\t\t\tthrow new TooManyConcurrentRequestsError(request);\n\t\t}\n\n\t\treturn new Promise<ExtractSuccessResponseMessage<TResponse>>(\n\t\t\t(resolve, reject) => {\n\t\t\t\tconst requestTimeout = setTimeout(() => {\n\t\t\t\t\tif (this._pendingRequests.has(request.requestID)) {\n\t\t\t\t\t\tthis._pendingRequests.delete(request.requestID);\n\t\t\t\t\t}\n\t\t\t\t\treject(new RequestTimeoutError(request));\n\t\t\t\t}, options.timeout || this.options.defaultTimeout);\n\n\t\t\t\tthis._pendingRequests.set(\n\t\t\t\t\trequest.requestID,\n\t\t\t\t\t(response: TResponse): void => {\n\t\t\t\t\t\tclearTimeout(requestTimeout);\n\n\t\t\t\t\t\tisSuccessResponseMessage(response)\n\t\t\t\t\t\t\t? resolve(response as ExtractSuccessResponseMessage<TResponse>)\n\t\t\t\t\t\t\t: reject(\n\t\t\t\t\t\t\t\t\tnew ResponseError(\n\t\t\t\t\t\t\t\t\t\tresponse as ExtractErrorResponseMessage<TResponse>,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t  );\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tpostMessage(request);\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected postResponse<TResponse extends UnknownResponseMessage>(\n\t\tresponse: TResponse,\n\t\tpostMessage = (response: TResponse): void =>\n\t\t\tthis.port.postMessage(response),\n\t): TResponse {\n\t\tif (this.options.debug) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.debug(response);\n\t\t}\n\n\t\tpostMessage(response);\n\n\t\treturn response;\n\t}\n}\n", "import {\n\tExtractSuccessResponseMessage,\n\tInternalEmitterRequestType,\n\tInternalEmitterTransactions,\n\tInternalReceiverRequestType,\n\tRequestMessage,\n\tResponseMessage,\n\tSuccessResponseMessage,\n\tTransactionsHandlers,\n\tUnknownRequestMessage,\n\tUnknownResponseMessage,\n\tUnknownTransaction,\n} from \"./types\";\n\nimport { NotReadyError } from \"./errors\";\n\nimport {\n\tChannelNetwork,\n\tChannelNetworkOptions,\n\tPostRequestOptions,\n} from \"./ChannelNetwork\";\nimport {\n\tcreateErrorResponseMessage,\n\tcreateSuccessResponseMessage,\n\tisRequestMessage,\n\tvalidateMessage,\n} from \"./messages\";\n\nexport type ChannelReceiverOptions = {\n\treadyTimeout: number;\n};\n\nexport const channelReceiverDefaultOptions: ChannelReceiverOptions &\n\tPartial<ChannelNetworkOptions> = {\n\treadyTimeout: 20000,\n\trequestIDPrefix: \"receiver-\",\n};\n\nexport type AllChannelReceiverOptions = ChannelReceiverOptions &\n\tChannelNetworkOptions;\n\nexport abstract class ChannelReceiver<\n\tTEmitterTransactions extends Record<string, UnknownTransaction> = Record<\n\t\tstring,\n\t\tnever\n\t>,\n\tTOptions extends Record<string, unknown> = Record<string, unknown>,\n> extends ChannelNetwork<\n\tTEmitterTransactions,\n\tChannelReceiverOptions & TOptions\n> {\n\tprivate _ready = false;\n\n\tconstructor(\n\t\trequestHandlers: TransactionsHandlers<TEmitterTransactions>,\n\t\toptions: Partial<AllChannelReceiverOptions> & TOptions,\n\t) {\n\t\tsuper(requestHandlers, { ...channelReceiverDefaultOptions, ...options });\n\n\t\twindow.addEventListener(\"message\", (event) => {\n\t\t\tthis._onPublicMessage(event);\n\t\t});\n\t}\n\n\t/**\n\t * Tells the emitter that receiver is ready\n\t */\n\tpublic async ready(): Promise<SuccessResponseMessage> {\n\t\tif (window.parent === window) {\n\t\t\tthrow new Error(\"Receiver is currently not embedded as an iframe\");\n\t\t}\n\n\t\tthis._ready = false;\n\n\t\tconst request = this.createRequestMessage(\n\t\t\tInternalReceiverRequestType.Ready,\n\t\t\tundefined,\n\t\t);\n\n\t\tconst response = await this.postRequest<\n\t\t\tRequestMessage<InternalReceiverRequestType.Ready>,\n\t\t\tResponseMessage\n\t\t>(\n\t\t\trequest,\n\t\t\t(request) => {\n\t\t\t\twindow.parent.postMessage(request, \"*\");\n\t\t\t},\n\t\t\t{\n\t\t\t\ttimeout: this.options.readyTimeout,\n\t\t\t},\n\t\t);\n\n\t\tthis._ready = true;\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * Handles public messages\n\t */\n\tprivate _onPublicMessage(event: MessageEvent<unknown>): void {\n\t\ttry {\n\t\t\tconst message = validateMessage(event.data);\n\n\t\t\tif (isRequestMessage(message)) {\n\t\t\t\tif (this.options.debug) {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.debug(event.data);\n\t\t\t\t}\n\n\t\t\t\tswitch (message.type) {\n\t\t\t\t\tcase InternalEmitterRequestType.Connect:\n\t\t\t\t\t\t// Set port\n\t\t\t\t\t\tthis.port = event.ports[0];\n\n\t\t\t\t\t\t// Update options\n\t\t\t\t\t\tconst { data } =\n\t\t\t\t\t\t\tmessage as InternalEmitterTransactions[\"connect\"][\"request\"];\n\t\t\t\t\t\tthis.options = {\n\t\t\t\t\t\t\t...this.options,\n\t\t\t\t\t\t\t...data,\n\t\t\t\t\t\t\t// Ensure core options remain the same\n\t\t\t\t\t\t\tdebug: this.options.debug,\n\t\t\t\t\t\t\trequestIDPrefix: this.options.requestIDPrefix,\n\t\t\t\t\t\t\treadyTimeout: this.options.readyTimeout,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst response = createSuccessResponseMessage(\n\t\t\t\t\t\t\tmessage.requestID,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tthis.postResponse(response);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.postResponse(\n\t\t\t\t\t\t\tcreateErrorResponseMessage(message.requestID, undefined),\n\t\t\t\t\t\t\t(response) => {\n\t\t\t\t\t\t\t\t(event.source as WindowProxy).postMessage(\n\t\t\t\t\t\t\t\t\tresponse,\n\t\t\t\t\t\t\t\t\tevent.origin,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Forward response messages to default message handler if necessary\n\t\t\t\tif (!this._ready) {\n\t\t\t\t\tthis.onMessage(event);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error instanceof TypeError) {\n\t\t\t\t// Ignore unknown messages\n\t\t\t} else {\n\t\t\t\t// Should not be possible, but who knows :shrug:\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected postFormattedRequest<\n\t\tTRequest extends UnknownRequestMessage,\n\t\tTResponse extends UnknownResponseMessage,\n\t>(\n\t\ttype: TRequest[\"type\"],\n\t\tdata?: TRequest[\"data\"],\n\t\toptions: PostRequestOptions = {},\n\t): Promise<ExtractSuccessResponseMessage<TResponse>> {\n\t\tif (!this._ready) {\n\t\t\tthrow new NotReadyError(\n\t\t\t\t\"Receiver is not ready, use `ChannelReceiver.ready()` first\",\n\t\t\t);\n\t\t}\n\n\t\treturn this.postRequest(\n\t\t\tthis.createRequestMessage(type, data),\n\t\t\tundefined,\n\t\t\toptions,\n\t\t);\n\t}\n}\n", "import {\n\tAPIRequestType,\n\tAPITransactions,\n\tClientRequestType,\n\tClientTransactions,\n} from \"./types\";\n\nimport {\n\tAllChannelReceiverOptions,\n\tChannelReceiver,\n\tTransactionMethod,\n\tTransactionsHandlers,\n\tTransactionsMethods,\n} from \"./channel\";\n\nexport type SimulatorAPIOptions = {\n\tactiveSliceAPI: boolean;\n\tsliceZoneSizeAPI: boolean;\n};\n\nexport const simulatorAPIDefaultOptions: Partial<AllChannelReceiverOptions> &\n\tSimulatorAPIOptions = {\n\trequestIDPrefix: \"api-\",\n\tactiveSliceAPI: false,\n\tsliceZoneSizeAPI: false,\n};\n\nexport class SimulatorAPI\n\textends ChannelReceiver<ClientTransactions, SimulatorAPIOptions>\n\timplements TransactionsMethods<APITransactions>\n{\n\tconstructor(\n\t\trequestHandlers: Omit<\n\t\t\tTransactionsHandlers<ClientTransactions>,\n\t\t\tClientRequestType.Ping\n\t\t> &\n\t\t\tPartial<\n\t\t\t\tPick<TransactionsHandlers<ClientTransactions>, ClientRequestType.Ping>\n\t\t\t>,\n\t\toptions?: Partial<AllChannelReceiverOptions & SimulatorAPIOptions>,\n\t) {\n\t\t// True if `options.debug` is true or `debug=true` is among query parameters\n\t\tconst debug =\n\t\t\toptions?.debug ||\n\t\t\t/[?&]debug=true/i.test(decodeURIComponent(window.location.search));\n\n\t\tsuper(\n\t\t\t{\n\t\t\t\t[ClientRequestType.Ping]: (_req, res) => {\n\t\t\t\t\treturn res.success(\"pong\");\n\t\t\t\t},\n\t\t\t\t...requestHandlers,\n\t\t\t},\n\t\t\t{\n\t\t\t\t...simulatorAPIDefaultOptions,\n\t\t\t\t...options,\n\t\t\t\tdebug,\n\t\t\t},\n\t\t);\n\n\t\t// Append API to window object\n\t\tif (debug) {\n\t\t\twindow.prismic ||= {};\n\t\t\twindow.prismic.sliceSimulator ||= {};\n\t\t\twindow.prismic.sliceSimulator.api ||= [];\n\t\t\twindow.prismic.sliceSimulator.api.push(this);\n\t\t}\n\t}\n\n\t[APIRequestType.SetActiveSlice]: TransactionMethod<\n\t\tAPITransactions[APIRequestType.SetActiveSlice]\n\t> = async (data) => {\n\t\treturn await this.postFormattedRequest(APIRequestType.SetActiveSlice, data);\n\t};\n\n\t[APIRequestType.SetSliceZoneSize]: TransactionMethod<\n\t\tAPITransactions[APIRequestType.SetSliceZoneSize]\n\t> = async (data) => {\n\t\treturn await this.postFormattedRequest(\n\t\t\tAPIRequestType.SetSliceZoneSize,\n\t\t\tdata,\n\t\t);\n\t};\n}\n", "export type Listener<T> = (event: T) => void;\n\nexport type EventMap = {\n\t[K in string]: unknown;\n};\n\nexport abstract class EventEmitter<TEventMap = EventMap> {\n\tprivate _listeners: {\n\t\t[K in keyof TEventMap]?: [Listener<TEventMap[K]>, string | null][];\n\t} = {};\n\n\ton<TEventType extends keyof TEventMap>(\n\t\tevent: TEventType,\n\t\tlistener: Listener<TEventMap[TEventType]>,\n\t\tkey: string | null = null,\n\t): void {\n\t\tthis._listeners[event] = [\n\t\t\t...(this._listeners[event] ?? []),\n\t\t\t[listener, key],\n\t\t];\n\t}\n\n\toff<TEventType extends keyof TEventMap>(\n\t\tevent: TEventType,\n\t\tlistenerOrKey: Listener<TEventMap[TEventType]> | string,\n\t): void {\n\t\tthis._listeners[event] = (this._listeners[event] ?? []).filter(\n\t\t\t([listener, key]) =>\n\t\t\t\ttypeof listenerOrKey === \"function\"\n\t\t\t\t\t? listener !== listenerOrKey\n\t\t\t\t\t: key !== listenerOrKey,\n\t\t);\n\t}\n\n\temit<TEventType extends keyof TEventMap>(\n\t\tevent: TEventType,\n\t\tpayload: TEventMap[TEventType],\n\t): void {\n\t\t(this._listeners[event] ?? []).forEach((listener) => listener[0](payload));\n\t}\n}\n", "export const simulatorClass = \"slice-simulator\";\nexport const simulatorRootClass = \"slice-simulator--root\";\n\nexport const getSimulatorDOM = (): Element | null => {\n\treturn document.querySelector(`.${simulatorClass}`);\n};\n\nexport const getSimulatorRootDOM = (): Element | null => {\n\treturn document.querySelector(`.${simulatorRootClass}`);\n};\n\nexport const getSliceZoneDOM = (\n\texpectedNumberOfChildren: number,\n): Element | null => {\n\t// If SliceZone has been tagged (#5)\n\tlet node = document.querySelector(`.${simulatorClass} [data-slice-zone]`);\n\tif (node) {\n\t\tif (node.children.length !== expectedNumberOfChildren) {\n\t\t\tconsole.warn(\n\t\t\t\t`Flagged SliceZone has an unexpected number of children, found ${node.children.length} but expected ${expectedNumberOfChildren}. This might lead to unexpected behaviors. Are you sure you tagged the right element?`,\n\t\t\t);\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t// Start searching\n\tnode = document.querySelector(`.${simulatorClass} .${simulatorRootClass}`);\n\n\tif (!node) {\n\t\treturn null;\n\t}\n\n\tconst searchDepth = 5;\n\tfor (let i = 0; i < searchDepth; i++) {\n\t\tif (node.children.length === expectedNumberOfChildren) {\n\t\t\t// Return the first node that matches the expected number of children\n\t\t\treturn node;\n\t\t} else if (node.children.length) {\n\t\t\t// Continue searching if current node has children\n\t\t\tnode = node.children[0];\n\t\t} else {\n\t\t\t// Stop searching if current node has no children\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Failed to find SliceZone\n\treturn null;\n};\n\nexport const getActiveSliceDOM = (\n\t$sliceZone: Element,\n\tmouse: { x: number; y: number },\n): Element | null => {\n\t// Raycast cursor position on DOM\n\tconst raycast = document.elementsFromPoint(mouse.x, mouse.y).reverse();\n\n\t// Find SliceZone in raycast\n\tconst sliceZoneIndex = raycast.indexOf($sliceZone);\n\n\t// SliceZone is not part of raycast\n\tif (sliceZoneIndex === -1) {\n\t\treturn null;\n\t}\n\n\tconst $slice = raycast[sliceZoneIndex + 1];\n\n\t// Slice is not part of raycast\n\tif (!$slice) {\n\t\treturn null;\n\t}\n\n\treturn $slice;\n};\n", "import type { SliceZone } from \"@prismicio/client\";\n\nimport { SliceSimulatorProps } from \"./types\";\n\nexport const getDefaultProps = (): Required<{\n\t[K in keyof SliceSimulatorProps]: NonNullable<SliceSimulatorProps[K]>;\n}> => ({\n\tzIndex: 100,\n\tbackground: \"#ffffff\",\n});\n\nexport const getDefaultSlices = (): SliceZone => {\n\treturn [];\n};\n\nexport const getDefaultMessage = (): string => {\n\treturn \"\";\n};\n", "import type { SharedSlice, SliceZone } from \"@prismicio/client\";\n\nimport { EventEmitter } from \"../lib/EventEmitter\";\nimport { __PRODUCTION__ } from \"../lib/__PRODUCTION__\";\nimport { throttle } from \"../lib/throttle\";\n\nimport type { ActiveSlice } from \"../types\";\nimport { StateEventType, StateEvents } from \"./types\";\n\nimport { getActiveSliceDOM, getSliceZoneDOM } from \"./domHelpers\";\nimport { getDefaultSlices } from \"./getDefault\";\n\ntype StateConstructorArgs = {\n\tslices?: SliceZone;\n};\n\nexport class State extends EventEmitter<StateEvents> {\n\tprivate _slices: SliceZone;\n\tpublic set slices(slices: SliceZone) {\n\t\tthis._slices = slices;\n\t\t// Clean up message\n\t\tthis.message = \"\";\n\t\t// Dispatch event\n\t\tthis.emit(StateEventType.Slices, slices);\n\t}\n\tpublic get slices(): SliceZone {\n\t\treturn this._slices;\n\t}\n\n\tprivate _activeSlice: ActiveSlice | null;\n\tpublic set activeSlice(activeSlice: ActiveSlice | null) {\n\t\tthis._activeSlice = activeSlice;\n\t\tthis.emit(StateEventType.ActiveSlice, activeSlice);\n\t}\n\tpublic get activeSlice(): ActiveSlice | null {\n\t\treturn this._activeSlice;\n\t}\n\n\tprivate _message: string;\n\tpublic set message(message: string) {\n\t\tthis._message = message;\n\t\tthis.emit(StateEventType.Message, message);\n\t}\n\tpublic get message(): string {\n\t\treturn this._message;\n\t}\n\n\tprivate _mouse: { x: number; y: number };\n\n\tconstructor(args?: StateConstructorArgs) {\n\t\tsuper();\n\n\t\tthis._slices = args?.slices || getDefaultSlices();\n\t\tthis._activeSlice = null;\n\t\tthis._message = \"\";\n\n\t\t// StateManager needs to keep track of mouse position for the active slice\n\t\tthis._mouse = { x: 0, y: 0 };\n\t}\n\n\tasync init(): Promise<void> {\n\t\t// Init listener\n\t\twindow.addEventListener(\"mousemove\", (event) => {\n\t\t\tthis._mouse = { x: event.clientX, y: event.clientY };\n\t\t});\n\t}\n\n\tprivate _setActiveSlice = (): void => {\n\t\t// There can't be an active slice if there's no slice displayed\n\t\tif (this.slices.length === 0) {\n\t\t\tthis.activeSlice = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst $sliceZone = getSliceZoneDOM(this.slices.length);\n\n\t\t// SliceZone has not been found, therefore active slice cannot be found\n\t\tif (!$sliceZone) {\n\t\t\tthis.activeSlice = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst $activeSlice = getActiveSliceDOM($sliceZone, this._mouse);\n\n\t\t// Active slice has not been found\n\t\tif (!$activeSlice) {\n\t\t\tthis.activeSlice = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeSliceIndex = Array.prototype.indexOf.call(\n\t\t\t$sliceZone.children,\n\t\t\t$activeSlice,\n\t\t);\n\n\t\t// Active slice has been found\n\t\tthis.activeSlice = {\n\t\t\trect: $activeSlice.getBoundingClientRect(),\n\t\t\tsliceID: this.slices[activeSliceIndex].slice_type,\n\t\t\tvariationID: (this.slices[activeSliceIndex] as SharedSlice).variation,\n\t\t\tindex: activeSliceIndex,\n\t\t};\n\t};\n\tsetActiveSlice = throttle(this._setActiveSlice, 16);\n\n\tsetSliceZone(slices: SliceZone): void {\n\t\t// Set slices\n\t\tthis.slices = slices;\n\t}\n}\n", "const div = (content: string) =>\n\t`<div style=\"word-spacing: initial; white-space: pre; line-height: initial; font-family: monospace; color: #ffffff; mix-blend-mode: difference; padding: 1rem; font-size: 1rem;\">${content}</div>`;\n\nconst a = (href: string, label?: string) =>\n\t`<a href=\"${href}\" style=\"text-decoration: underline;\">${label || href}<a>`;\n\nconst header =\n\t\"   _____ ___          _____ _                 __      __            \\n  / ___// (_)_______ / ___/(_)___ ___  __  __/ /___ _/ /_____  _____\\n  \\\\__ \\\\/ / / ___/ _ \\\\\\\\__ \\\\/ / __ `__ \\\\/ / / / / __ `/ __/ __ \\\\/ ___/\\n ___/ / / / /__/  __/__/ / / / / / / / /_/ / / /_/ / /_/ /_/ / /    \\n/____/_/_/\\\\___/\\\\___/____/_/_/ /_/ /_/\\\\__,_/_/\\\\__,_/\\\\__/\\\\____/_/     \\n                  / /_  __  __   / __ \\\\_____(_)________ ___  (_)____\\n                 / __ \\\\/ / / /  / /_/ / ___/ / ___/ __ `__ \\\\/ / ___/\\n                / /_/ / /_/ /  / ____/ /  / (__  ) / / / / / / /__  \\n               /_.___/\\\\__, /  /_/   /_/  /_/____/_/ /_/ /_/_/\\\\___/  \\n                     /____/\\n\\n\";\n\nconst footer =\n\t\"\\n\\n\\n\\n\\n\\n                                                - The Prismic team\";\n\nexport const sliceSimulatorAccessedDirectly = div(\n\t[\n\t\theader,\n\t\t`You're seeing this page because you're accessing Slice simulator\\ndirectly, e.g:\\n\\n  - ${a(\n\t\t\t\"http://localhost:3000/slice-simulator\",\n\t\t)}\\n\\n\\n\\nThe Slice simulator can only be accessed through Slice Machine or the\\nPage Builder. To preview your Slices, head over to Slice Machine:\\n\\n  - ${a(\n\t\t\t\"http://localhost:9999\",\n\t\t)}\\n\\n\\n\\nIf you believe this is an error, please reach out to us:\\n\\n  - ${a(\n\t\t\t\"https://github.com/prismicio/slice-machine/issues/new/choose\",\n\t\t)}`,\n\t\tfooter,\n\t].join(\"\"),\n);\n", "import type { SliceZone } from \"@prismicio/client\";\n\nimport { throttle } from \"../lib/throttle\";\n\nimport { ClientRequestType } from \"../types\";\nimport { StateEventType } from \"./types\";\n\nimport { SimulatorAPI } from \"../SimulatorAPI\";\nimport { ResponseError } from \"../channel\";\n\nimport { State } from \"./State\";\nimport {\n\tgetSimulatorDOM,\n\tgetSimulatorRootDOM,\n\tgetSliceZoneDOM,\n} from \"./domHelpers\";\nimport { sliceSimulatorAccessedDirectly } from \"./messages\";\n\ntype ManagerConstructorArgs = {\n\tslices?: SliceZone;\n};\n\nexport class SimulatorManager {\n\tpublic state: State;\n\tprivate _api: SimulatorAPI | null;\n\tprivate _initialized: boolean;\n\n\tconstructor(args?: ManagerConstructorArgs) {\n\t\tthis.state = new State(args);\n\t\tthis._api = null;\n\t\tthis._initialized = false;\n\t}\n\n\tasync init(): Promise<void> {\n\t\tif (this._initialized) {\n\t\t\treturn;\n\t\t} else {\n\t\t\tthis._initialized = true;\n\t\t}\n\n\t\t// Init state manager\n\t\tawait this.state.init();\n\n\t\t// Init API\n\t\ttry {\n\t\t\tawait this._initAPI();\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror instanceof Error &&\n\t\t\t\terror.message === \"Receiver is currently not embedded as an iframe\" &&\n\t\t\t\t!this.state.slices.length\n\t\t\t) {\n\t\t\t\t// Catch not embedded error and display message\n\t\t\t\tthis.state.message = sliceSimulatorAccessedDirectly;\n\t\t\t}\n\t\t\tconsole.error(error);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Init listeners\n\t\tthis._initListeners();\n\t}\n\n\tprivate async _initAPI(): Promise<void> {\n\t\t// Register SimulatorAPI request handlers\n\t\tthis._api = new SimulatorAPI({\n\t\t\t[ClientRequestType.SetSliceZone]: (req, res) => {\n\t\t\t\tthis.state.setSliceZone(req.data);\n\n\t\t\t\treturn res.success();\n\t\t\t},\n\t\t\t[ClientRequestType.ScrollToSlice]: (req, res) => {\n\t\t\t\t// Error if `sliceIndex` is invalid\n\t\t\t\tif (req.data.sliceIndex < 0) {\n\t\t\t\t\treturn res.error(\"`sliceIndex` must be > 0\", 400);\n\t\t\t\t} else if (req.data.sliceIndex >= this.state.slices.length) {\n\t\t\t\t\treturn res.error(\n\t\t\t\t\t\t`\\`sliceIndex\\` must be < ${this.state.slices.length} (\\`<SliceZone />\\` current length)`,\n\t\t\t\t\t\t400,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst $sliceZone = getSliceZoneDOM(this.state.slices.length);\n\t\t\t\tif (!$sliceZone) {\n\t\t\t\t\treturn res.error(\"Failed to find `<SliceZone />`\", 500);\n\t\t\t\t}\n\n\t\t\t\t// Destroy existing active slice as we're about to scroll\n\t\t\t\tthis.state.activeSlice = null;\n\n\t\t\t\tconst $slice = $sliceZone.children[req.data.sliceIndex];\n\t\t\t\tif (!$slice) {\n\t\t\t\t\treturn res.error(\n\t\t\t\t\t\t`Failed fo find slice at index $\\`{req.data.sliceIndex}\\` in \\`<SliceZone />\\``,\n\t\t\t\t\t\t500,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Scroll to Slice\n\t\t\t\t$slice.scrollIntoView({\n\t\t\t\t\tbehavior: req.data.behavior,\n\t\t\t\t\tblock: req.data.block,\n\t\t\t\t\tinline: req.data.inline,\n\t\t\t\t});\n\n\t\t\t\t// Update active slice after scrolling\n\t\t\t\tthis._api?.options.activeSliceAPI &&\n\t\t\t\t\tsetTimeout(this.state.setActiveSlice, 750);\n\n\t\t\t\treturn res.success();\n\t\t\t},\n\t\t});\n\n\t\t// Mark API as ready\n\t\tawait this._api.ready();\n\t}\n\n\tprivate _initListeners(): void {\n\t\tif (this._api?.options.activeSliceAPI) {\n\t\t\t// Update active slice on mouse move\n\t\t\twindow.addEventListener(\"mousemove\", () => {\n\t\t\t\tthis.state.setActiveSlice();\n\t\t\t});\n\t\t\t// Update active slice on events impacting slices rendering\n\t\t\twindow.addEventListener(\"resize\", () => {\n\t\t\t\tthis.state.setActiveSlice();\n\t\t\t});\n\t\t\twindow.addEventListener(\"mousewheel\", () => {\n\t\t\t\tsetTimeout(this.state.setActiveSlice, 200);\n\t\t\t});\n\n\t\t\t// Update active slice when slices are set\n\t\t\tthis.state.on(StateEventType.Slices, () => {\n\t\t\t\tthis.state.setActiveSlice();\n\t\t\t});\n\t\t\t// Send active slices to renderer\n\t\t\tthis.state.on(StateEventType.ActiveSlice, async (activeSlice) => {\n\t\t\t\tif (this._api) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this._api.setActiveSlice(activeSlice);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// Just log bad requests, throw everything else\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\terror instanceof ResponseError &&\n\t\t\t\t\t\t\terror.response.status === 400\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconsole.error(error.response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (this._api?.options.sliceZoneSizeAPI) {\n\t\t\t// Monitor Simulator root node size\n\t\t\tconst resizeObserver = new ResizeObserver(\n\t\t\t\tthrottle(async (entries) => {\n\t\t\t\t\tconst [entry] = entries;\n\n\t\t\t\t\tif (this._api && entry) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this._api.setSliceZoneSize({ rect: entry.contentRect });\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t// Just log bad requests, throw everything else\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\terror instanceof ResponseError &&\n\t\t\t\t\t\t\t\terror.response.status === 400\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconsole.error(error.response);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, 16),\n\t\t\t);\n\t\t\tconst observeSimulatorRoot = () => {\n\t\t\t\tconst simulatorRootDOM = getSimulatorRootDOM();\n\t\t\t\tresizeObserver.disconnect();\n\t\t\t\tif (simulatorRootDOM) {\n\t\t\t\t\tresizeObserver.observe(simulatorRootDOM);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Monitor Simulator root node in DOM\n\t\t\tconst mutationObserver = new MutationObserver(observeSimulatorRoot);\n\t\t\t// We want it to fail if not found\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\tmutationObserver.observe(getSimulatorDOM()!, {\n\t\t\t\tsubtree: false,\n\t\t\t\tchildList: true,\n\t\t\t});\n\t\t}\n\t}\n}\n", "export const disableEventHandler = (event: Event): void => {\n\tevent.preventDefault();\n\tevent.stopPropagation();\n};\n\nexport const onClickHandler = (\n\tevent: MouseEvent & { path?: HTMLElement[] },\n): void => {\n\tif (\n\t\tevent.path &&\n\t\tevent.path.slice(0, 5).some((el) => el instanceof HTMLAnchorElement)\n\t) {\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t}\n};\n", "import {\n\tdefineComponent,\n\tref,\n\tonMounted,\n\th,\n\tPropType,\n\tVNodeArrayChildren,\n\tAllowedComponentProps,\n\tComponentCustomProps,\n\tVNodeProps,\n\tonUnmounted,\n} from \"vue\";\n\nimport {\n\tgetDefaultProps,\n\tgetDefaultSlices,\n\tgetDefaultMessage,\n\tonClickHandler,\n\tdisableEventHandler,\n\tsimulatorClass,\n\tsimulatorRootClass,\n\tSliceSimulatorProps as BaseSliceSimulatorProps,\n\tStateEventType,\n\tSimulatorManager,\n} from \"@prismicio/simulator/kit\";\n\nexport type SliceSimulatorProps = Omit<BaseSliceSimulatorProps, \"state\">;\n\nconst simulatorManager = new SimulatorManager();\n\nexport const SliceSimulatorImpl = /*#__PURE__*/ defineComponent({\n\tname: \"SliceSimulator\",\n\tprops: {\n\t\tzIndex: {\n\t\t\ttype: Number as PropType<Required<SliceSimulatorProps[\"zIndex\"]>>,\n\t\t\tdefault: getDefaultProps().zIndex,\n\t\t\trequired: false,\n\t\t},\n\t\tbackground: {\n\t\t\ttype: String as PropType<Required<SliceSimulatorProps[\"background\"]>>,\n\t\t\tdefault: getDefaultProps().background,\n\t\t\trequired: false,\n\t\t},\n\t},\n\tsetup(props, { slots }) {\n\t\tconst slices = ref(getDefaultSlices());\n\t\tconst message = ref(getDefaultMessage());\n\n\t\tonMounted(() => {\n\t\t\tsimulatorManager.state.on(\n\t\t\t\tStateEventType.Slices,\n\t\t\t\t(_slices) => {\n\t\t\t\t\tslices.value = _slices;\n\t\t\t\t},\n\t\t\t\t\"simulator-slices\",\n\t\t\t);\n\t\t\tsimulatorManager.state.on(\n\t\t\t\tStateEventType.Message,\n\t\t\t\t(_message) => {\n\t\t\t\t\tmessage.value = _message;\n\t\t\t\t},\n\t\t\t\t\"simulator-message\",\n\t\t\t);\n\n\t\t\tsimulatorManager.init();\n\t\t});\n\n\t\tonUnmounted(() => {\n\t\t\tsimulatorManager.state.off(StateEventType.Slices, \"simulator-slices\");\n\n\t\t\tsimulatorManager.state.off(StateEventType.Message, \"simulator-message\");\n\t\t});\n\n\t\treturn () => {\n\t\t\tconst children: VNodeArrayChildren = [];\n\n\t\t\tif (message.value) {\n\t\t\t\tchildren.push(\n\t\t\t\t\th(\"article\", {\n\t\t\t\t\t\tinnerHTML: message.value,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} else if (slices.value.length && slots.default) {\n\t\t\t\tchildren.push(\n\t\t\t\t\th(\n\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"root\",\n\t\t\t\t\t\t\tclass: simulatorRootClass,\n\t\t\t\t\t\t\tonClickCapture: onClickHandler,\n\t\t\t\t\t\t\tonSubmitCapture: disableEventHandler,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tslots.default({\n\t\t\t\t\t\t\t\tslices: slices.value,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t],\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn h(\n\t\t\t\t\"div\",\n\t\t\t\t{\n\t\t\t\t\tclass: simulatorClass,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tzIndex: props.zIndex,\n\t\t\t\t\t\tposition: \"fixed\",\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\t\theight: \"100vh\",\n\t\t\t\t\t\toverflow: \"auto\",\n\t\t\t\t\t\tbackground: props.background,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tchildren,\n\t\t\t);\n\t\t};\n\t},\n});\n\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\nexport const SliceSimulator = SliceSimulatorImpl as unknown as {\n\tnew (): {\n\t\t$props: AllowedComponentProps &\n\t\t\tComponentCustomProps &\n\t\t\tVNodeProps &\n\t\t\tSliceSimulatorProps;\n\t};\n};\n"],
  "mappings": "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",
  "names": ["codes", "status", "APIRequestType", "ClientRequestType", "StateEventType", "InternalEmitterRequestType", "InternalReceiverRequestType", "requestID", "_a", "statuses", "__publicField", "request", "response", "__publicField", "request", "response", "__publicField", "_a", "_b", "__publicField", "__publicField", "__publicField", "_a", "_b"]
}
