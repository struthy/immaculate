{
  "resolvedId": "C:/webdev/Tutorials/nuxt-blog/node_modules/@prismicio/vue/dist/createPrismic.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createClient, filter, cookie, asText, asHTML, asLink, asLinkAttrs, asDate, asImageSrc, asImageWidthSrcSet, asImagePixelDensitySrcSet, isFilled, documentToLinkField } from \"@prismicio/client\";\nimport { prismicKey } from \"./injectionSymbols.js\";\nimport { PrismicLink } from \"./components/PrismicLink.js\";\nimport { PrismicEmbed } from \"./components/PrismicEmbed.js\";\nimport { PrismicImage } from \"./components/PrismicImage.js\";\nimport { PrismicText } from \"./components/PrismicText.js\";\nimport { PrismicRichText } from \"./components/PrismicRichText.js\";\nimport { SliceZone } from \"./components/SliceZone.js\";\nconst createPrismic = (options) => {\n  let client;\n  if (options.client) {\n    client = options.client;\n  } else {\n    client = createClient(options.endpoint, {\n      fetch: async (endpoint, options2) => {\n        let fetchFunction;\n        if (typeof globalThis.fetch === \"function\") {\n          fetchFunction = globalThis.fetch;\n        } else {\n          fetchFunction = (await import(\"isomorphic-unfetch\")).default;\n        }\n        return await fetchFunction(endpoint, options2);\n      },\n      ...options.clientConfig\n    });\n  }\n  const prismicClient = {\n    client,\n    filter,\n    cookie\n  };\n  const prismicHelpers = {\n    asText,\n    asHTML: (richTextField, ...config) => {\n      const [configOrLinkResolver, maybeHTMLSerializer] = config;\n      return asHTML(richTextField, typeof configOrLinkResolver === \"function\" || configOrLinkResolver == null ? {\n        linkResolver: configOrLinkResolver || options.linkResolver,\n        serializer: maybeHTMLSerializer || options.richTextSerializer || options.htmlSerializer\n      } : {\n        linkResolver: options.linkResolver,\n        serializer: options.richTextSerializer || options.htmlSerializer,\n        ...configOrLinkResolver\n      });\n    },\n    asLink: (linkField, config) => {\n      return asLink(linkField, typeof config === \"function\" ? { linkResolver: config } : {\n        linkResolver: options.linkResolver,\n        // TODO: For some reasons, TypeScript narrows the type to \"unknown\" where it's supposed to be a union\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ...config\n      });\n    },\n    asLinkAttrs: (linkField, config) => {\n      return asLinkAttrs(linkField, {\n        // TODO: We can't really retrieve the generic type here, this might cause some unexpected type error in some edge-case scenario\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        linkResolver: options.linkResolver,\n        ...config\n      });\n    },\n    asDate,\n    asImageSrc,\n    asImageWidthSrcSet,\n    asImagePixelDensitySrcSet,\n    isFilled,\n    documentToLinkField\n  };\n  const prismic = {\n    options,\n    ...prismicClient,\n    ...prismicHelpers,\n    install(app) {\n      app.provide(prismicKey, this);\n      app.config.globalProperties.$prismic = this;\n      if (options.injectComponents !== false) {\n        app.component(PrismicLink.name, PrismicLink);\n        app.component(PrismicEmbed.name, PrismicEmbed);\n        app.component(PrismicImage.name, PrismicImage);\n        app.component(PrismicText.name, PrismicText);\n        app.component(PrismicRichText.name, PrismicRichText);\n        app.component(SliceZone.name, SliceZone);\n      }\n    }\n  };\n  return prismic;\n};\nexport {\n  createPrismic\n};\n//# sourceMappingURL=createPrismic.js.map\n",
      "start": 1720177711061,
      "end": 1720177711205,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1720177711205,
      "end": 1720177711205,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "result": "import { __vitePreload } from \"\u0000vite/preload-helper.js\";import { createClient, filter, cookie, asText, asHTML, asLink, asLinkAttrs, asDate, asImageSrc, asImageWidthSrcSet, asImagePixelDensitySrcSet, isFilled, documentToLinkField } from \"@prismicio/client\";\nimport { prismicKey } from \"./injectionSymbols.js\";\nimport { PrismicLink } from \"./components/PrismicLink.js\";\nimport { PrismicEmbed } from \"./components/PrismicEmbed.js\";\nimport { PrismicImage } from \"./components/PrismicImage.js\";\nimport { PrismicText } from \"./components/PrismicText.js\";\nimport { PrismicRichText } from \"./components/PrismicRichText.js\";\nimport { SliceZone } from \"./components/SliceZone.js\";\nconst createPrismic = (options) => {\n  let client;\n  if (options.client) {\n    client = options.client;\n  } else {\n    client = createClient(options.endpoint, {\n      fetch: async (endpoint, options2) => {\n        let fetchFunction;\n        if (typeof globalThis.fetch === \"function\") {\n          fetchFunction = globalThis.fetch;\n        } else {\n          fetchFunction = (await __vitePreload(() => import(\"isomorphic-unfetch\"),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url)).default;\n        }\n        return await fetchFunction(endpoint, options2);\n      },\n      ...options.clientConfig\n    });\n  }\n  const prismicClient = {\n    client,\n    filter,\n    cookie\n  };\n  const prismicHelpers = {\n    asText,\n    asHTML: (richTextField, ...config) => {\n      const [configOrLinkResolver, maybeHTMLSerializer] = config;\n      return asHTML(richTextField, typeof configOrLinkResolver === \"function\" || configOrLinkResolver == null ? {\n        linkResolver: configOrLinkResolver || options.linkResolver,\n        serializer: maybeHTMLSerializer || options.richTextSerializer || options.htmlSerializer\n      } : {\n        linkResolver: options.linkResolver,\n        serializer: options.richTextSerializer || options.htmlSerializer,\n        ...configOrLinkResolver\n      });\n    },\n    asLink: (linkField, config) => {\n      return asLink(linkField, typeof config === \"function\" ? { linkResolver: config } : {\n        linkResolver: options.linkResolver,\n        // TODO: For some reasons, TypeScript narrows the type to \"unknown\" where it's supposed to be a union\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ...config\n      });\n    },\n    asLinkAttrs: (linkField, config) => {\n      return asLinkAttrs(linkField, {\n        // TODO: We can't really retrieve the generic type here, this might cause some unexpected type error in some edge-case scenario\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        linkResolver: options.linkResolver,\n        ...config\n      });\n    },\n    asDate,\n    asImageSrc,\n    asImageWidthSrcSet,\n    asImagePixelDensitySrcSet,\n    isFilled,\n    documentToLinkField\n  };\n  const prismic = {\n    options,\n    ...prismicClient,\n    ...prismicHelpers,\n    install(app) {\n      app.provide(prismicKey, this);\n      app.config.globalProperties.$prismic = this;\n      if (options.injectComponents !== false) {\n        app.component(PrismicLink.name, PrismicLink);\n        app.component(PrismicEmbed.name, PrismicEmbed);\n        app.component(PrismicImage.name, PrismicImage);\n        app.component(PrismicText.name, PrismicText);\n        app.component(PrismicRichText.name, PrismicRichText);\n        app.component(SliceZone.name, SliceZone);\n      }\n    }\n  };\n  return prismic;\n};\nexport {\n  createPrismic\n};\n//# sourceMappingURL=createPrismic.js.map\n",
      "start": 1720177711205,
      "end": 1720177711206,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:reporter",
      "start": 1720177711206,
      "end": 1720177711206,
      "order": "normal"
    }
  ]
}
