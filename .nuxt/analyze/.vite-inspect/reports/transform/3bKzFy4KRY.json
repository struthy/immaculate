{
  "resolvedId": "C:/webdev/Tutorials/nuxt-blog/node_modules/statuses/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = status\n\n// status code to message map\nstatus.message = codes\n\n// status message (lower-case) to code map\nstatus.code = createMessageToStatusCodeMap(codes)\n\n// array of status codes\nstatus.codes = createStatusCodeList(codes)\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n}\n\n/**\n * Create a map of message to status code.\n * @private\n */\n\nfunction createMessageToStatusCodeMap (codes) {\n  var map = {}\n\n  Object.keys(codes).forEach(function forEachCode (code) {\n    var message = codes[code]\n    var status = Number(code)\n\n    // populate map\n    map[message.toLowerCase()] = status\n  })\n\n  return map\n}\n\n/**\n * Create a list of all status codes.\n * @private\n */\n\nfunction createStatusCodeList (codes) {\n  return Object.keys(codes).map(function mapCode (code) {\n    return Number(code)\n  })\n}\n\n/**\n * Get the status code for given message.\n * @private\n */\n\nfunction getStatusCode (message) {\n  var msg = message.toLowerCase()\n\n  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {\n    throw new Error('invalid status message: \"' + message + '\"')\n  }\n\n  return status.code[msg]\n}\n\n/**\n * Get the status message for given code.\n * @private\n */\n\nfunction getStatusMessage (code) {\n  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {\n    throw new Error('invalid status code: ' + code)\n  }\n\n  return status.message[code]\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\nfunction status (code) {\n  if (typeof code === 'number') {\n    return getStatusMessage(code)\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string')\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    return getStatusMessage(n)\n  }\n\n  return getStatusCode(code)\n}\n",
      "start": 1720103995594,
      "end": 1720103995613,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1720103995613,
      "end": 1720103995613,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000C:/webdev/Tutorials/nuxt-blog/node_modules/statuses/codes.json?commonjs-proxy\";\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require$$0\n\n/**\n * Module exports.\n * @public\n */\n\nvar statuses = status\n\n// status code to message map\nstatus.message = codes\n\n// status message (lower-case) to code map\nstatus.code = createMessageToStatusCodeMap(codes)\n\n// array of status codes\nstatus.codes = createStatusCodeList(codes)\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n}\n\n/**\n * Create a map of message to status code.\n * @private\n */\n\nfunction createMessageToStatusCodeMap (codes) {\n  var map = {}\n\n  Object.keys(codes).forEach(function forEachCode (code) {\n    var message = codes[code]\n    var status = Number(code)\n\n    // populate map\n    map[message.toLowerCase()] = status\n  })\n\n  return map\n}\n\n/**\n * Create a list of all status codes.\n * @private\n */\n\nfunction createStatusCodeList (codes) {\n  return Object.keys(codes).map(function mapCode (code) {\n    return Number(code)\n  })\n}\n\n/**\n * Get the status code for given message.\n * @private\n */\n\nfunction getStatusCode (message) {\n  var msg = message.toLowerCase()\n\n  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {\n    throw new Error('invalid status message: \"' + message + '\"')\n  }\n\n  return status.code[msg]\n}\n\n/**\n * Get the status message for given code.\n * @private\n */\n\nfunction getStatusMessage (code) {\n  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {\n    throw new Error('invalid status code: ' + code)\n  }\n\n  return status.message[code]\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\nfunction status (code) {\n  if (typeof code === 'number') {\n    return getStatusMessage(code)\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string')\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    return getStatusMessage(n)\n  }\n\n  return getStatusCode(code)\n}\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(statuses);\nexport { statuses as __moduleExports };",
      "start": 1720103995613,
      "end": 1720103995629,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1720103995629,
      "end": 1720103995629,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1720103995629,
      "end": 1720103995629,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1720103995629,
      "end": 1720103995629,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1720103995629,
      "end": 1720103995629,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1720103995629,
      "end": 1720103995629,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1720103995629,
      "end": 1720103995629,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1720103995629,
      "end": 1720103995629,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1720103995629,
      "end": 1720103995629,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1720103995629,
      "end": 1720103995629,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1720103995629,
      "end": 1720103995629,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1720103995629,
      "end": 1720103995629,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1720103995629,
      "end": 1720103995629,
      "order": "normal"
    }
  ]
}
