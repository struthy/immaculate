{
  "resolvedId": "C:/webdev/Tutorials/nuxt-blog/node_modules/@prismicio/client/dist/richtext/asTree.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { RichTextNodeType } from \"../types/value/richText.js\";\nconst uuid = () => {\n  return (++uuid.i).toString();\n};\nuuid.i = 0;\nconst asTree = (nodes) => {\n  const preparedNodes = prepareNodes(nodes);\n  const children = [];\n  for (let i = 0; i < preparedNodes.length; i++) {\n    children.push(nodeToTreeNode(preparedNodes[i]));\n  }\n  return {\n    key: uuid(),\n    children\n  };\n};\nconst createTreeNode = (node, children = []) => {\n  return {\n    key: uuid(),\n    type: node.type,\n    text: \"text\" in node ? node.text : void 0,\n    node,\n    children\n  };\n};\nconst createTextTreeNode = (text) => {\n  return createTreeNode({\n    type: RichTextNodeType.span,\n    text,\n    spans: []\n  });\n};\nconst prepareNodes = (nodes) => {\n  const mutNodes = nodes.slice(0);\n  for (let i = 0; i < mutNodes.length; i++) {\n    const node = mutNodes[i];\n    if (node.type === RichTextNodeType.listItem || node.type === RichTextNodeType.oListItem) {\n      const items = [\n        node\n      ];\n      while (mutNodes[i + 1] && mutNodes[i + 1].type === node.type) {\n        items.push(mutNodes[i + 1]);\n        mutNodes.splice(i, 1);\n      }\n      if (node.type === RichTextNodeType.listItem) {\n        mutNodes[i] = {\n          type: RichTextNodeType.list,\n          items\n        };\n      } else {\n        mutNodes[i] = {\n          type: RichTextNodeType.oList,\n          items\n        };\n      }\n    }\n  }\n  return mutNodes;\n};\nconst nodeToTreeNode = (node) => {\n  if (\"text\" in node) {\n    return createTreeNode(node, textNodeSpansToTreeNodeChildren(node.spans, node));\n  }\n  if (\"items\" in node) {\n    const children = [];\n    for (let i = 0; i < node.items.length; i++) {\n      children.push(nodeToTreeNode(node.items[i]));\n    }\n    return createTreeNode(node, children);\n  }\n  return createTreeNode(node);\n};\nconst textNodeSpansToTreeNodeChildren = (spans, node, parentSpan) => {\n  if (!spans.length) {\n    return [createTextTreeNode(node.text)];\n  }\n  const mutSpans = spans.slice(0);\n  mutSpans.sort((a, b) => a.start - b.start || b.end - a.end);\n  const children = [];\n  for (let i = 0; i < mutSpans.length; i++) {\n    const span = mutSpans[i];\n    const parentSpanStart = parentSpan && parentSpan.start || 0;\n    const spanStart = span.start - parentSpanStart;\n    const spanEnd = span.end - parentSpanStart;\n    const text = node.text.slice(spanStart, spanEnd);\n    const childSpans = [];\n    for (let j = i; j < mutSpans.length; j++) {\n      const siblingSpan = mutSpans[j];\n      if (siblingSpan !== span) {\n        if (siblingSpan.start >= span.start && siblingSpan.end <= span.end) {\n          childSpans.push(siblingSpan);\n          mutSpans.splice(j, 1);\n          j--;\n        } else if (siblingSpan.start < span.end && siblingSpan.end > span.start) {\n          childSpans.push({\n            ...siblingSpan,\n            end: span.end\n          });\n          mutSpans[j] = {\n            ...siblingSpan,\n            start: span.end\n          };\n        }\n      }\n    }\n    if (i === 0 && spanStart > 0) {\n      children.push(createTextTreeNode(node.text.slice(0, spanStart)));\n    }\n    const spanWithText = { ...span, text };\n    children.push(createTreeNode(spanWithText, textNodeSpansToTreeNodeChildren(childSpans, {\n      ...node,\n      text\n    }, span)));\n    if (spanEnd < node.text.length) {\n      children.push(createTextTreeNode(node.text.slice(spanEnd, mutSpans[i + 1] ? mutSpans[i + 1].start - parentSpanStart : void 0)));\n    }\n  }\n  return children;\n};\nexport {\n  asTree\n};\n//# sourceMappingURL=asTree.js.map\n",
      "start": 1720103995278,
      "end": 1720103995480,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1720103995480,
      "end": 1720103995480,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1720103995481,
      "end": 1720103995481,
      "order": "normal"
    }
  ]
}
