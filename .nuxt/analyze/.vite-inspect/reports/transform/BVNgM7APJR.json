{
  "resolvedId": "C:/webdev/Tutorials/nuxt-blog/node_modules/@prismicio/simulator/dist/channel/ChannelReceiver.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { InternalReceiverRequestType, InternalEmitterRequestType } from \"./types.js\";\nimport { NotReadyError } from \"./errors.js\";\nimport { ChannelNetwork } from \"./ChannelNetwork.js\";\nimport { validateMessage, isRequestMessage, createErrorResponseMessage, createSuccessResponseMessage } from \"./messages.js\";\nconst channelReceiverDefaultOptions = {\n  readyTimeout: 2e4,\n  requestIDPrefix: \"receiver-\"\n};\nclass ChannelReceiver extends ChannelNetwork {\n  constructor(requestHandlers, options) {\n    super(requestHandlers, { ...channelReceiverDefaultOptions, ...options });\n    __publicField(this, \"_ready\", false);\n    window.addEventListener(\"message\", (event) => {\n      this._onPublicMessage(event);\n    });\n  }\n  /**\n   * Tells the emitter that receiver is ready\n   */\n  async ready() {\n    if (window.parent === window) {\n      throw new Error(\"Receiver is currently not embedded as an iframe\");\n    }\n    this._ready = false;\n    const request = this.createRequestMessage(InternalReceiverRequestType.Ready, void 0);\n    const response = await this.postRequest(request, (request2) => {\n      window.parent.postMessage(request2, \"*\");\n    }, {\n      timeout: this.options.readyTimeout\n    });\n    this._ready = true;\n    return response;\n  }\n  /**\n   * Handles public messages\n   */\n  _onPublicMessage(event) {\n    try {\n      const message = validateMessage(event.data);\n      if (isRequestMessage(message)) {\n        if (this.options.debug) {\n          console.debug(event.data);\n        }\n        switch (message.type) {\n          case InternalEmitterRequestType.Connect:\n            this.port = event.ports[0];\n            const { data } = message;\n            this.options = {\n              ...this.options,\n              ...data,\n              // Ensure core options remain the same\n              debug: this.options.debug,\n              requestIDPrefix: this.options.requestIDPrefix,\n              readyTimeout: this.options.readyTimeout\n            };\n            const response = createSuccessResponseMessage(message.requestID, void 0);\n            this.postResponse(response);\n            break;\n          default:\n            this.postResponse(createErrorResponseMessage(message.requestID, void 0), (response2) => {\n              event.source.postMessage(response2, event.origin);\n            });\n            break;\n        }\n      } else {\n        if (!this._ready) {\n          this.onMessage(event);\n        }\n      }\n    } catch (error) {\n      if (error instanceof TypeError)\n        ;\n      else {\n        throw error;\n      }\n    }\n  }\n  postFormattedRequest(type, data, options = {}) {\n    if (!this._ready) {\n      throw new NotReadyError(\"Receiver is not ready, use `ChannelReceiver.ready()` first\");\n    }\n    return this.postRequest(this.createRequestMessage(type, data), void 0, options);\n  }\n}\nexport {\n  ChannelReceiver,\n  channelReceiverDefaultOptions\n};\n//# sourceMappingURL=ChannelReceiver.js.map\n",
      "start": 1720177711510,
      "end": 1720177711518,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1720177711518,
      "end": 1720177711518,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1720177711518,
      "end": 1720177711519,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1720177711519,
      "end": 1720177711519,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1720177711519,
      "end": 1720177711519,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1720177711519,
      "end": 1720177711519,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1720177711519,
      "end": 1720177711519,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1720177711519,
      "end": 1720177711519,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1720177711519,
      "end": 1720177711519,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1720177711519,
      "end": 1720177711519,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1720177711519,
      "end": 1720177711519,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1720177711519,
      "end": 1720177711519,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1720177711519,
      "end": 1720177711519,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1720177711519,
      "end": 1720177711519,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1720177711519,
      "end": 1720177711519,
      "order": "normal"
    }
  ]
}
